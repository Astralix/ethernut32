$Id: ChangeLog,v 1.541 2009/03/09 08:15:14 haraldkipp Exp $

2009-03-09  Harald Kipp  <harald.kipp@egnite.de>

	* MOVING TO SUBVERSION. PLEASE DO NOT COMMIT ANY MORE CHANGES
	TO CVS HEAD.

	* configure.ac, os/version.c: Release candidate 4.7.99.


2009-03-08  Harald Kipp  <harald.kipp@egnite.de>

	* app/basemon/Makefile, app/httpd/Makefile: Added libnutgorp
	to fix linker error.

	* app/pppc/pppc.c: AVR compile error fixed. lctl is required.

	* gorp/base64/base64_decode.c, gorp/base64/base64_encode.c,
	include/gorp/md5.h: Replaced inttypes.h by stdint.h. The latter 
	is sufficient while the first is not always available.

	* gorp/hashes/md5.c: Replaced const by CONST to make it compile
	with ICCAVR.

	* include/dev/board.h: Fixed missing UART device for AVR.

	* Makefile.am: Included gorp in automake.

	* tools/nutconf/scrolledtree.cpp, tools/nutconf/scrolledtree.h,
	tools/nutconf/nutconf.h: Dummy scrollbar in tree window fixed.


2009-03-08  Ole Reinhardt <ole.reinhardt@thermotemp.de>
	* include/gorp: Added missing header files to CVS
	
2009-03-06  Ole Reinhardt <ole.reinhardt@thermotemp.de>
	* gorp: Added gorp ("Studentenfutter") directory

	* gorp/Makefile: Makefile for in-source-tree compilation added

	* gorp/hashes/md5*: Added first code snippets: md5 routines

	* gorp/base64/base64_encode, gorp/base64/base64_encode: 
	  Added base64 encoding and decoding routines

	* lib/Makefile: Added gorp directory

	* conf/gorp/gorp.nut: Added configurator file for gorp library

	* conf/repository.nut: Added gorp library

	* conf/tools.nut: Added at91_bootloader_bootcrom ldscript

	* pro/auth.c: Use base64 decoder from gorp/base64/base64_decode.c
	  instead from dencode.c

	* pro/dencode.c, pro/dencode.h: Moved base64 decoder to
	  gorp/base64/base64_decode.c

2009-03-05  Matthias Ringwald <mringwal@inf.ethz.ch>
    * arch/unix/dev/ostimer.c, arch/unix/os/nutinit.c:
         added return NULL to make compiler happy
    * arch/unix/os/thread.c:   fix function prototype for compiler
    * fs/pathops: unix emulation requires unistd.h as first include
    * Makedefs.unix-gcc, arch/unix/os/nutinit.c, dev/ihndlr.c,
      include/compiler.h, include/errno.h, include/netdb.h,
      include/stdio.h, include/time.h, include/unistd.h, include/arch/timer.h,
      include/arch/unix.h, include/dev/board.h, include/dev/debug.h,
      include/dev/irqreg.h, include/dev/uartavr.h, include/dev/usartavr.h,
      include/netinet/in.h, include/sys/atom.h, include/sys/nut_types.h,
      include/sys/thread.h, include/sys/types.h, net/confnet.c, os/nutinit.c,
      os/osdebug.c, os/thread.c, os/timer.c:
        use __NUT_EMULATION instead of __APPLE__, __linux__, or __CYGWIN__
    * crt/putf.c: don't follow __arm__ if __NUT_EMULATION__
    
2009-02-28  Ole Reinhardt <ole.reinhardt@thermotemp.de>
	* boot/bootmon/arp.c: Added ARP responder

	* boot/bootmon/ether.c: Answer to incomming ARP requests 
	  (Fixes arp timeout bug when downloading large files)

	* boot/bootmon/bootmon.c, boot/bootmon/dialog.c,
	  boot/bootmon/dialog.h, boot/bootmon/tftp.c, boot/bootmon/utils.c,
	  boot/bootmon/utils.h: 
          Fixed compiler warnings (signedness)

2009-02-22  Ole Reinhardt <ole.reinhardt@thermotemp.de>
	* include/net/errno.h: 
	  Added a deprecated warning.
	  Commended out all defines and include include/errno.h instead.
	  All defines in this file are duplicates of the one defined in
          include/errno.h, just with an offset of 10000. We don't need these
	  defines and just get conflicts. So remove this file ASAP

	* include/net/netdebug.h, net/igmp.c, net/igmpin.c, net/tcpout.c,
	  net/tcpsm.c, net/tcpsock.c:
	  Include "include/errno.h" instead of "include/net/errno.h"

	* include/cfg/udp.h: Added empty header for "in sourcetree"
	  compilation

	* net/udpsock.c, include/sys/socket.h, include/sys/sock_var.h:
	  Added NutUdpError and NutUdpSetSocketError to set and retrieve
	  socket errors. As udp sockets aren't connection oriented those 
          errors will be anounced asynchronously on the next NutUdpSend 
	  or NutUdpReceive.

	  Include "include/errno.h" instead of "include/net/errno.h"

	* conf/net/net.nut:
	  Added NUT_UDP_ICMP_SUPPORT (ICMP support on UDP sockets)

	* net/icmpin.c: 
	  Added ICMP destination unreachable support for UDP sockets and 
	  give a more detailed errno to TCP sockets as well. ICMP support 
	  for UDP sockets will just be enabled when defining 
	  NUT_UDP_ICMP_SUPPORT int the configurator

	  Include "include/errno.h" instead of "include/net/errno.h"

	* app/icmp-udp/*: 

	  Initial import of ICMP demo for UDP sockets. You should have
	  enabled NUT_UDP_ICMP_SUPPORT enabled in the configurator to 
	  use the new ICMP support for UDP sockets

2009-02-18  Ole Reinhardt <ole.reinhardt@thermotemp.de>
	* crt/setenv.c: 
	  Implemented posix compatible unsetenv function. (The posix variant 
          correctly returns an int return value)

	  This is needed for Newlib since version 1.17.0

	  As avr-libc and older newlib versions declare unsetenv returning 
	  void, the void version is still default and using the posix 
          compatible declaration needs to be enabled in the configurator 
          (option CRT_UNSETENV_POSIX, in 
          C runtime (target specific) / Environment / posix compatible unsetenv 

	* conf/crt/crt.nut: Added CRT_UNSETENV_POSIX, enable it when
	  building for ARM using Newlib since version 1.17.0 to avoid
	  compile errors for unsetenv in setenv.c. See above!

        * basemon/webdemo.c, canbus/candemo.c, httpd/httpserv.c,
          inetq/inetq.c, nutpiper/config.c, nutpiper/config.h,
          nutpiper/nutpiper.c, nutpiper/player.c, nutpiper/player.h,
          nutpiper/scanner.c, playmp3/playmp3.c, pppc/pppc.c

          Fixed compilier warnings. Especialy signedness of char buffers
          as well as unused code on arm platform and main functions without
          return value

2009-02-16  Thiago A. Correa <thiago.correa@gmail.com>

	* include/dev/irqreg_arm.h, include/dev/irqreg_avr.h,
	include/dev/irqreg_h8.h, include/dev/irqreg_m68k.h,
	include/dev/irqreg_unix.h: Remove deprecated headers.

2009-02-16  Harald Kipp  <harald.kipp@egnite.de>

	* Makerules.arm-gcc, Makerules.arm-gccdbg, app/Makerules.arm-gcc,
	app/Makerules.arm-gccdbg: Include dot in wildcards, added PHONY 
	declarations and removed unused targets.

	* arch/arm/dev/spibus0at91.c, arch/arm/dev/spibus1at91.c,
	arch/avr/dev/spibus0avr.c, dev/sbi_mmc.c,
	include/cfg/arch/porttran.h: Macro GPIO_CFG_OUTPUT had been 
	defined twice. I changed the one in porttran.h to GPIO_OUTPUT 
	in the hope that this will have the least impact on existing 
	applications. Also changed GPIO_CFG_INPUT to GPIO_INPUT to make 
	it look more consistent.
	
	* arch/arm/dev/spibus_at91.c: Interrupt routine was not 
	registered due to ifdef mismatch.

	* dev/spi_at45d.c: Added support for AT45DB0642D.

	* include/arch/arm/at91.h: Use more general macros. Added 
	definition for NUT_HWCLK_PERIPHERAL for targets which have 
	a PMC MDIV flag. Thanks to Thiago A. Correa, who discovered 
	this problem.

	* arch/arm/init/crtat91sam9260_ram.S, conf/arch/arm.nut:
	A lot of clean-up had been done with SAM9260 initialization.
	Clock configurations should now work as expected. Note, that
	the CPU is running now at 198.6560 MHz with peripheral clock
	at 99.3280 MHz. Thanks to Paulo Silva for providing a working
	sample.

	* include/arch/arm/at91_matrix.h: Added master and slave 
	indices as they appear on the SAM9260. Not sure about other 
	AT91 devices.

	* include/arch/arm/at91_pmc.h, include/arch/arm/at91sam9xe.h:
	Check for PLL B availability instead of target names.

	* include/arch/arm.h: Added inline assembler macros for 
	reading/writing coprocessor CP15 control register.

	* include/arch/arm/at91sam9260.h, include/arch/arm/v5te.h:
	ARM coprocessor bits added, at least a few.

	* conf/at91sam9260-ek.conf: Updated for latest Nut/OS 
	configurations requirements.

	* os/heap.c: Some compiler versions didn't like the pointer 
	type cast. Hope this will fix it.

	* app/Makeburn.arm-samba, tools/win32/at91sam-sdram.tcl:
	Added 'make burn' support for SAM-BA.


2009-02-13  Harald Kipp  <harald.kipp@egnite.de>

	* include/sys/heap.h, os/heap.c: Complete redesign of the Nut/OS 
	heap memory management. This new version provides advanced 
	debugging features and fixes at least 2 alignment bugs for 
	32 bit platforms (special thanks to Timothy M. De Baillie). 
	Furthermore, it is prepared to manage multiple heap regions, 
	which is quite useful for targets with more than one RAM area. 
	However, more needs to be done during system initialization. 
	Two new routines allow to check the heaps for consistency 
	(NutHeapCheck) and print out a dump (NutHeapDump).

	* crt/malloc.c, crt/realloc.c: Move realloc to a new module
	to reduce the size of applications that don't use it.

	* crt/calloc_dbg.c, crt/malloc_dbg.c, crt/strdup_dbg.c, 
	include/memdebug.h, crt/realloc_dbg.c: Debug versions of C 
	runtime routines added.

	* pro/ssi.c: As a first result of the new heap routines we 
	found a memory overflow bug in the $QUERY_STRING handling.

	* conf/os/os.nut: Heap debug options and split memory flag added. 
	Banked memory options moved to the right module. NUTPANIC added.

	* conf/crt/crt.nut: Debug versions of heap routines added.

	* arch/arm/dev/spibus_at91.c, arch/arm/dev/tlv320dac.c,
	arch/avr/dev/spibus0avr.c, contrib/hxmp3/buffers.c,
	contrib/hxmp3/hermite.c, crt/environ.c, crt/fclose.c,
	crt/fdopen.c, crt/fopen.c, crt/freopen.c, crt/putf.c,
	crt/setenv.c, crt/time.c, dev/blockdev.c, dev/chat.c,
	dev/mmcard.c, dev/nvmem_at45d.c, dev/spi_vscodec.c,
	dev/term.c, dev/usart.c, dev/vscodec.c, dev/x12rtc.c,
	fs/basename.c, fs/dirent.c, fs/dirname.c, fs/phatdir.c,
	fs/phatfs.c, fs/phatutil.c, fs/phatvol.c, fs/pnutfs.c,
	fs/rawfs.c, fs/uromfs.c, net/arpcache.c, net/ethdemux.c,
	net/ipdemux.c, net/route.c, net/tcpsock.c, net/udpsock.c,
	pro/asn1.c, pro/asp.c, pro/auth.c, pro/cgi.c, pro/dhcpc.c,
	pro/discover.c, pro/ftpd.c, pro/httpd.c, pro/httpd_p.c,
	pro/httpopt.c, pro/resolv.c, pro/snmp_agent.c,
	pro/snmp_config.c, pro/snmp_mib.c, pro/sntp.c, pro/syslog.c,
	pro/uxmlstream.c, pro/uxmltree.c: Include memdebug.h for 
	memory debugging support.

	* include/sys/nutdebug.h, os/fatal.c, os/panic.c:
	New panic routine added, which works similar to printf.

	* dev/hxcodec.c, include/dev/hxcodec.h, conf/dev/dev.nut: 
	Using the VS10xx driver as a template for redesign. Now both 
	drivers behave in the same way, specially when used in media 
	streaming over the network. No additional buffering is needed.

	* include/sys/types.h: Two memory alignment macros added, 
	NUTMEM_BOTTOM_ALIGN and NUTMEM_TOP_ALIGN.


2009-02-04  Thiago A. Correa <thiago.correa@gmail.com>
        
	* app/uart/uart.c: Remove unused variable.

2009-02-06  Harald Kipp  <harald.kipp@egnite.de>

	* Makedefs.arm-gccdbg, arch/arm/dev/at91_ahdlc.c,
	arch/arm/dev/at91_emac.c, arch/arm/dev/at91sam7x_emac.c,
	arch/arm/dev/dm9000e.c, arch/arm/os/nutinit.c,
	arch/avr/dev/ahdlcavr.c, arch/avr/dev/lanc111.c,
	arch/avr/dev/nicrtl.c, arch/avr/os/nutinit.c, conf/arch/avr.nut, 
	include/sys/thread.h, net/tcpsm.c, pro/dhcpc.c, pro/discover.c,
	app/httpd/httpserv.c, Makedefs.avr-gccdbg:
	Added stack space multiplier and addend. For size optimized code
	the multiplier is 1, for debug code it will be set to 3. Thus,
	debugging code will have three times more stack space. Most
	stack sizes of Nut/OS internal threads had been adjusted for
	size optimized code, using the NUTDEBUG_CHECK_STACK option.
	As a final result significantly more heap space will be available 
	to most applications.

	* arch/avr/os/context_gcc.c: Added stack checking code for AVR.

	* os/thread.c: Allow to query the thread handle of the currently
	running thread without knowing its name (using parameter NULL).

	* conf/c/stdlib.nut, conf/c/string.nut, conf/crt/crt.nut,
	include/arch/avr/gcc.h, crt/calloc.c, crt/strdup.c: Routines 
	using heap memory moved from c to crt module. We now have 
	strdup() and calloc().

	* crt/putenv.c, dev/chat.c, dev/mmcard.c, fs/uromfs.c,
	net/ethdemux.c, net/ipdemux.c, net/pppsm.c, net/route.c,
	net/tcpsock.c, net/udpsock.c, os/bankmem.c, pro/asp.c,
	pro/auth.c, pro/cgi.c, pro/ftpd.c, pro/httpd.c, pro/httpd_p.c,
	pro/resolv.c, pro/sntp.c, pro/ssi.c, pro/wins.c: Now using strdup() 
	and calloc(). Furthermore, replaced NutHeap routines by standard 
	malloc/free and pointer values 0 by NULL. Some day we may be able 
	to use parts of Nut/OS on other operating systems.

	* pro/uxmlstream.c: Stop XML parsing if less than 8k bytes data 
	space are available.

	* conf/dev/dev.nut, dev/spi_vscodec.c, dev/spi_vscodec0.c, 
	include/dev/vscodec.h: New audio driver for VLSI chips uses the 
	SPI bus. 

	* include/dev/vs1011.h: Clock features corrected.

	* dev/spi_mlcd.c, include/dev/mlcd.h: Added dummy driver for 
	ATmega driven displays.

	* dev/spi_at45d0.c: The SPI bus driver fails, if attached devices 
	use different SPI modes. As a temporary workaround we can configure 
	the first AT45D DataFlash to mode 0. This allows to run the audio 
	decoder and the DataFlash on the EIR board on the same bus.

	* conf/eir10c.conf: New audio codec and DataFlash driver enabled.

	* conf/ethernut21b.conf: New audio codec driver enabled.

	* conf/arch/arch.nut: Added NutReset support for SAM9260. Removed 
	stack size defaults.

	* conf/os/os.nut, conf/pro/pro.nut, include/cfg/os.h: Removed 
	stack size defaults.

	* conf/repository.nut: Introduced target independent symbols for 
	external interrutps.

	* arch/arm/dev/spibus1at91.c: Corrected a bug with the first chip 
	select on the second SPI bus. Thanks to Oender Tekyar.

	* dev/at45db.c: Corrected a bug with non-negated chip selects.


2009-02-05  Henrik Maier  <hwmaier@users.sourceforge.net>

        * arch/avr/dev/atcan.c, conf/arch/avr.nut: 
        Added support for a receive buffer size configuration 
        entry ATCAN_RX_BUF_SIZE.
        

2009-02-04  Thiago A. Correa <thiago.correa@gmail.com>
        
	* os/heap.c: Fix compile for 32 bit ARCHs with OS Debug 
	enabled.

2009-01-29  Harald Kipp  <harald.kipp@egnite.de>

	* arch/arm/dev/ih_at91fiq.c, arch/arm/dev/ih_at91irq0.c,
	arch/arm/dev/ih_at91irq1.c: Enable IRQ clocks.

	* arch/arm/dev/spibus0at91.c, arch/arm/dev/spibus1at91.c,
	arch/avr/dev/spibus0avr.c: Use inline functions instead of 
	macros to allow different ports. Ability to define port bits 
	without specifying the port identifier. This can be used by 
	drivers, which handle chip selects on their own. Corrected a 
	bug when using chip selects other than 0.

	* conf/dev/dev.nut: Added auto detected VS10xx. Default
	audio decoder reset recover times changed to 0.

	* conf/eir10c.conf: Added second VS10xx chip select and
	MMC interface definitions.

	* dev/sbi_mmc.c: Use inline functions instead of macros to 
	allow different ports.

	* include/cfg/arch/porttran.h: Changed the documented example
	to use inline functions instead of macros. Compile bug for AT91 
	MDE, IFE PIO registers fixed.

	* dev/vscodec.c: Make sure, that used registers are defined.

	* include/dev/gpio.h: Added more general names for external 
	interrupts.

	* include/dev/vs1001.h, include/dev/vs1011.h, 
	include/dev/vs1053.h, include/dev/vscodec.h: Added VS10xx 
	feature files. Cleaned up for different decoder chips and fixed 
	several minor bugs.


2009-01-19  Harald Kipp  <harald.kipp@egnite.de>

	* arch/arm/os/context.c, include/sys/thread.h, os/thread.c,
	os/timer.c: Added stack checking code. When 
	HWDEFS+=-DNUTDEBUG_CHECK_STACKMIN=x has been added to 
	nutbld/UserConf.mk, then the system will check once per 
	second, that at least x bytes of stack space remain
	available. If any thread's stack space had been lower,
	NUTFATAL will be called. More options are available.
	This had been originally suggested by Michael Fischer,
	long, long time ago.

	* conf/os/os.nut, os/fatal.c: Default fatal error handler 
	added.

	* conf/eir10c.conf: The EIR board uses the last DataFlash
	sector to store its Nut/OS configuration.

	* arch/arm/os/nutinit.c: Moved NutLoadConfig from NutInit to
	the idle thread. We can now use standard drivers to read the
	configuration. Added support for early stdout, mainly
	helpful to trace system initializations and catch early
	exceptions. Made the code a bit cleaner and added some
	more comments as well. Should be done for the AVR as well.

	* conf/dev/dev.nut, dev/nvmem_at45d.c: Configuration of the 
	AT45D non-volatile memory support was not useable. Fixed.

	* dev/nvmem.c: Support for AT45D SPI bus driver added.


2009-01-18  Harald Kipp  <harald.kipp@egnite.de>

	* conf/dev/dev.nut, dev/spibus0gpio.c, dev/spibus_gpio.c,
	include/dev/spibus_gpio.h: Added GPIO based bit banging SPI bus 
	driver. This early release had been tested with the EIR board, 
	but should run on any platform which implements our target 
	independent GPIO routines. Few more changes to distinguish 
	between PIO IDs and port numbers.

	* conf/repository.nut, include/dev/gpio.h, include/dev/sbbif0.h:
	Introduced target independent port numbers. Distinguish between 
	PIO IDs and port numbers.

	* arch/arm/dev/gpio_at91.c: Constants replaced by new port
	number macros.

	* conf/arch/arm.nut, conf/arch/avr.nut: Distinguish between 
	PIO IDs and port numbers. Call internal Lua functions when 
	needed only.

	* dev/sbbif0.c: Header cfg/arch/gpio.h replaced by dev/gpio.h, 
	so we can use new port numbers.

	* include/dev/sbbif0.h, include/dev/sbbif1.h, include/dev/sbbif2.h, 
	include/dev/sbbif3.h: Bit banging SPI still not compiling for ARM 
	targets.


2009-01-17  Harald Kipp  <harald.kipp@egnite.de>

	* os/devreg.c, os/event.c, os/mutex.c, os/semaphore.c,
	os/thread.c, os/timer.c, crt/close.c, crt/environ.c,
	crt/feof.c, crt/ferror.c, crt/fflush.c, crt/fgetc.c,
	crt/fgets.c, crt/filelength.c, crt/fileno.c, crt/fmode.c,
	crt/fprintf.c, crt/fpurge.c, crt/fputc.c, crt/fputs.c,
	crt/fputs_p.c, crt/fread.c, crt/fscanf.c, crt/fseek.c,
	crt/ftell.c, crt/fwrite.c, crt/fwrite_p.c, crt/gets.c,
	crt/ioctl.c, crt/localtim.c, crt/mktime.c, crt/open.c,
	crt/printf.c, crt/putenv.c, crt/read.c, crt/scanf.c,
	crt/seek.c, crt/sprintf.c, crt/tell.c, crt/ungetc.c,
	crt/vfprintf.c, crt/vfprintf_p.c, crt/write.c, crt/write_p.c:
	Added some NUTASSERT macros to check function parameters.

	* Getting rid of two remaining BSD types in favor of stdint. 
	Replaced 'u_int' by 'unsinged int' and 'uptr_t' by 'uintptr_t'.


2009-01-16  Harald Kipp  <harald.kipp@egnite.de>

	* arch/unix/dev/eeprom.c: Trying to apply a quick fix
	for the Linux emulator build failure.

	* arch/arm/debug/arm-da.S, arch/arm/debug/arm-pfa.S,
	arch/arm/debug/arm-swi.S, arch/arm/debug/arm-udf.S,
	arch/arm/debug/common_xxx_handler.c,
	arch/arm/debug/default_da_handler.c,
	arch/arm/debug/default_pfa_handler.c,
	arch/arm/debug/default_swi_handler.c,
	arch/arm/debug/default_udf_handler.c,
	arch/arm/debug/reg-dump.c, arch/arm/debug/stackdump.c,
	include/arch/arm/exception_asm.h,
	include/arch/arm/exception_c.h,
	include/arch/arm/ptrace.h, include/sys/ptrace.h,
	conf/arch/arm.nut: Duane Ellis' crash dump routines added.
	The original code had been released as part of the LoastARM 
	Project under GPL Version 2, but has been made available for 
	Nut/OS under out 3-clause BSD license with kind permission 
	from the author. It currently handles data abort, undefined,
	prefetch abort and SWI exceptions and will spit out a
	register dump and a stack backtrace. Note, that this will 
	currently work with arm-elf debug code only, because production 
	code omits frame pointers, which are needed by the stack back 
	trace. Experimental, use with care.

	* arch/arm/init/crtat91sam7sex_rom.S, arch/arm/init/crtat91_boot.S,
	arch/arm/init/crtat91_bootcrom.S, arch/arm/init/crtat91_httprom.S,
	arch/arm/init/crtat91_ram.S, arch/arm/init/crtat91_rom.S,
	arch/arm/init/crtat91sam7se512_ram.S, 
	arch/arm/init/crtat91sam7sex_rom.S,
	arch/arm/init/crtat91sam9260_ram.S,
	arch/arm/init/crtat91sam9xe512_ram.S,
	arch/arm/init/crteb40a_ram.S, arch/arm/init/crtwolf_ram.S,
	include/arch/arm.h, arch/arm/os/context.c:
	Most previous ARM ports run Nut/OS kernel and application
	code in supervisor mode, which causes a number of problems.
	As a simple solution, we are now changing to system mode.
	The majority of applications will not even notice this change.
	Some existing code, however, which deals with black magic
	like nested interrupts etc. should be carefully reviewed.
	Anyway, this is still experimental and should be used with care.
	Note the new ARM CPSR bit names, the old ones are deprecated.

	* arch/arm/os/nutinit.c, arch/avr/os/nutinit.c,
	arch/unix/os/nutinit.c: No longer save any default 
	OS configuration in non-volatile RAM. All platforms
	will call NutLoadConfig().

	* conf/os/os.nut, os/confos.c, include/sys/confos.h:
	Configurable host name length. The *nix conditional is
	no longer required as this will be handled in the nvmem
	routines. NutLoadConfig will now set the virgin host
	name, if no valid configuration is available. Cookie
	and virgin host name are configurable too, but disabled
	in the Configurator until we fixed the string value
	problem. You may use UserConf.mk instead.

	* conf/pro/pro.nut, pro/discover.c, include/pro/discover.h,
	include/cfg/discover.h: Configurable discovery protocol 
	version and port plus configurable service thread stack 
	size. The new protocol version 1.1 allows host names up 
	to 98 characters. Added some code to make sure, that 
	nothing is overwritten with version 1.0 protocol and 
	too long host names. Protocol version 1.0 is still the 
	default.

	* tools/nutdisc/discovery.h, tools/nutdisc/mainframe.cpp,
	tools/nutdisc/nutdisc.rc, tools/nutdisc/propdialog.cpp,
	tools/nutdisc/udpthread.cpp, tools/nutdisc/version.h:
	This new version 2.3 additionally supports discovery 
	protocol version 1.1.


2009-01-15  Harald Kipp  <harald.kipp@egnite.de>

	* tools/nutconf/nutconf.cpp: Fixed a path separator problem
	for Linux. The editor is now launched again when double
	clicking the configured header file in the property list.


2009-01-15  Ole Reinhardt <ole.reinhardt@thermotemp.de>
	* arch/arm/dev/at91_spi.c:
	  Fixed return values of At91SpiReset
	  Fixed calculation of return values in At91SpiGetSckDelay,
	  At91SpiGetTxDelay, At91SpiGetCsDelay


2009-01-14  Harald Kipp  <harald.kipp@egnite.de>

	* tools/nutconf/nutconf.cpp: Applied the patch contributed by
	Joerg Hermann. This finally seems to fix the seg fault crash
	on KDE4 and Gnome 2.24.

	* tools/nutconf/nutconfdoc.cpp: Removed the destructor of
	CAbstractDirCopyTraverser. It's not really required, but
	results in a compile error with the newer GNU compiler,
	which doesn't accept a pure-specifier with a function body.


2009-01-13  Ole Reinhardt <ole.reinhardt@thermotemp.de>
          
        * tools/nutconf/nutconfdoc.cpp: Commented out inline destructor of
          CAbstractDirCopyTraverser to fix compilation bug on linux


2009-01-10  Harald Kipp  <harald.kipp@egnite.de>

	* tools/nutdisc/mainframe.cpp, tools/nutdisc/propdialog.cpp:
	Allow unicode build.

	* tools/linux/Makefile.am: Remove Makefile.in on maintainer-clean.


2009-01-09  Harald Kipp  <harald.kipp@egnite.de>

	* tools/nutconf/nutcomponent.c, tools/nutconf/nutconf.h:
	Version 2.0.7. Re-introduced support for Lua 5.0.

	* doc/gen/nut_en.cfg.in: Upgraded to Doxygen 1.5.8.

	* app/Makefile: Temporarily removed C++ sample due to problems
	with GCC 4.3.

	* configure.ac, os/version.c: Next beta will be 4.7.5.

	* conf/arch/arm.nut, conf/arch/avr.nut, conf/eir10c.conf,
	conf/ethernut21b.conf, dev/spibus.c, include/dev/board.h,
	include/sys/device.h, arch/arm/dev/spibus0at91.c,
	arch/arm/dev/spibus1at91.c, arch/arm/dev/spibus_at91.c,
	arch/avr/dev/spibus0avr.c, arch/avr/dev/spibus_avr.c,
	include/cfg/spi.h, include/dev/spibus.h,
	include/dev/spibus_at91.h, include/dev/spibus_avr.h:
	Added SPI bus controller for AVR and AT91.

	* conf/dev/dev.nut, dev/blockdev.c, dev/nvmem_at45d.c,
	dev/spi_at45d.c, dev/spi_at45d0.c, dev/spi_at45d1.c,
	dev/spi_at45d2.c, dev/spi_at45d3.c, include/dev/blockdev.h,
	include/dev/at45d.h, include/dev/nvmem_at45d.h,
	include/dev/spi_at45d.h: Added target independent AT45D block 
	device drivers and non-volatile memory support based on the 
	new bus controllers.

	* conf/fs/fs.nut, fs/rawfs.c, include/fs/rawfs.h: Added raw file 
	system driver.


2009-01-05  Thiago A. Correa <thiago.correa@gmail.com>
        
	* tools/nutconf/nutconfview.cpp:
	      Fix unsafe cast.

2009-01-04  Ole Reinhardt <ole.reinhardt@thermotemp.de>

        * pro/Makefile: Fixed Makefile. Thanks to Uwe Bonnes for this patch
        * configure.ac: Checks and warns about an empty $LUA_HEADERS 
                        also looks in more places. Thanks again to Uwe Bonnes
        * pro/rfctime.c: Fixed time parsing in RfcTimeParse
                         Thanks to Michael Fischer!

2008-01-04  Thiago A. Correa <thiago.correa@gmail.com>
        
	* tools/nutconf/bldoptdlg.h,
	* tools/nutconf/bldoptdlg.h:
	      Fix behavior of "Browse" buttons in page "Build"
	      of Settings dialog.
	      
2009-01-04  Thiago A. Correa <thiago.correa@gmail.com>
        
	* tools/nutconf/nutcomponent.c,
	* tools/nutconf/nutconfdoc.cpp:
	      Add .svn to ignore list when copying files and
	      reduce some duplicated code.
	      
2009-01-04  Thiago A. Correa <thiago.correa@gmail.com>
        
	* tools/nutconf/nutcomponent.c:
	      Update lua initialization to conform to lua 5.x API change.
	      This change should still be compatible with 4.x.

2009-01-04  Thiago A. Correa <thiago.correa@gmail.com>
        
	* tools/nutconf/mainframe.cpp,
	* tools/nutconf/nutconfdoc.cpp:
	      Allow nutconf to build with _UNICODE under Win32. 

2008-12-24  Thiago A. Correa <thiago.correa@gmail.com>
        
	* conf/dev/dev.nut, 
          Improve Serial Bit Bang drivers dependency check
          in nutconf.

2008-12-19  Ole Reinhardt <ole.reinhardt@thermotemp.de>
        
	* arch/arm/dev/gpioa_at91.c, 
	  arch/arm/dev/gpiob_at91.c, 
	  arch/arm/dev/gpioc_at91.c:
          Fixed irq enable / disable bug  

2008-11-12  Harald Kipp  <harald.kipp@egnite.de>

	* conf/arch/arm.nut, dev/at45db.c: Enable DataFlash support
	for EIR board.


2008-10-26  Ole Reinhardt <ole.reinhardt@thermotemp.de>
	* tools/crurom/crurom.c: Added .svn to the list of directories to   
          ignore when creating urom.c

2008-10-22  Harald Kipp  <harald.kipp@egnite.de>

	* arch/arm/dev/usart0at91.c, arch/arm/dev/usart1at91.c,
	arch/arm/dev/usartat91.c, conf/arch/arch.nut,
	include/arch/arm/at91_us.h, include/arch/arm/at91sam7s.h,
	include/arch/arm/at91sam7se.h, include/arch/arm/at91sam7x.h,
	include/arch/arm/at91sam9260.h, include/arch/arm/at91sam9xe.h,
	include/cfg/uart.h: Prepared AT91 UART hardware handshake.

	* conf/arch/arm.nut: Added MCU family macros and AT91 UART 
	hardware handshake.

	* conf/dev/dev.nut, include/dev/sbi_mmc.h, dev/sbi_mmc.c,
	dev/sbi0mmc0.c, dev/sbi0mmc1.c, dev/sbi1mmc0.c, dev/sbi1mmc1.c:
	New software SPI MMC routines added. Actually we need drivers
	for a new SPI bus concept, but MMC was not working on the EIR.
	So I added another temporary solution. This one should work
	on all supported targets, but has been tested on the EIR only.
	It supports 2 buses with 2 MMC sockets each.

	* include/cfg/arch/avr.h: Offering the same port identifiers
	as for the AT91 family. The old ones are kept for backward
	compatibility.

	* dev/vs10xx.c, dev/lan91.c, dev/vscodec.c, dev/sbbif0.c,
	dev/hxcodec.c: Include the correct header file.

	* include/cfg/arch/porttran.h: This new header file determines 
	the target specific GPIO register names by a simple configured 
	port identifier. Use this to remove those lengthy #if's in some
	source files.

	* include/cfg/arch.h: Now determines MCU family. Added 
	Ethernut 5 settings.

	* include/dev/board.h: Added default MMC interfaces.


2008-10-05  Harald Kipp  <harald.kipp@egnite.de>

	* configure.ac, os/version.c: Next beta will be 4.7.4.

	* conf/crt/crt.nut: Floating point provision added.

	* conf/repository.nut, conf/lua/lua.nut,
	lua/lapi.c, lua/lauxlib.c, lua/lbaselib.c, lua/lcode.c, lua/ldblib.c,
	lua/ldebug.c, lua/ldo.c, lua/ldump.c, lua/lfunc.c, lua/lgc.c,
	lua/linit.c, lua/liolib.c, lua/llex.c, lua/lmathlib.c, lua/lmem.c,
	lua/loadlib.c, lua/lobject.c, lua/lopcodes.c, lua/loslib.c,
	lua/lparser.c, lua/lstate.c, lua/lstring.c, lua/lstrlib.c,
	lua/ltable.c, lua/ltablib.c, lua/ltm.c, lua/lundump.c, lua/lvm.c,
	lua/lzio.c, include/lua/lapi.h, include/lua/lauxlib.h,
	include/lua/lcode.h, include/lua/ldebug.h, include/lua/ldo.h,
	include/lua/lfunc.h, include/lua/lgc.h, include/lua/llex.h,
	include/lua/llimits.h, include/lua/lmem.h, include/lua/lobject.h,
	include/lua/lopcodes.h, include/lua/lparser.h, include/lua/lstate.h,
	include/lua/lstring.h, include/lua/ltable.h, include/lua/ltm.h,
	include/lua/lua.h, include/lua/luaconf.h, include/lua/lualib.h,
	include/lua/luanut.h, include/lua/lundump.h, include/lua/lvm.h,
	include/lua/lzio.h: Lua interpreter module added. Many thanks to 
	Laszlo Parrag.


2008-10-05  Harald Kipp  <harald.kipp@egnite.de>

	* arch/arm/dev/usart0at91.c, arch/arm/dev/usart1at91.c:
	UART driver was broken on SAM7S and SAM7SE.

	* conf/at91sam9260-ek-radio.conf, conf/at91sam7x-ek-radio.conf:
	Allow RPSL and RCSL.

	* conf/repository.nut, conf/contrib/contrib.nut,
	contrib/README.txt, include/contrib/README.txt:
	Added new contrib directory for non-BSDL code.

	* conf/contrib/hxmp3.nut, contrib/hxmp3/LICENSE.txt,
	contrib/hxmp3/Makefile, contrib/hxmp3/RCSL.txt, 
	contrib/hxmp3/RPSL.txt, contrib/hxmp3/asmpoly_gcc.S,
	contrib/hxmp3/bitstream.c, contrib/hxmp3/buffers.c,
	contrib/hxmp3/dct32.c, contrib/hxmp3/dequant.c,
	contrib/hxmp3/dqchan.c, contrib/hxmp3/hermite.c,
	contrib/hxmp3/huffman.c, contrib/hxmp3/hufftabs.c,
	contrib/hxmp3/imdct.c, contrib/hxmp3/mp3dec.c,
	contrib/hxmp3/mp3tabs.c, contrib/hxmp3/scalfact.c,
	contrib/hxmp3/stproc.c, contrib/hxmp3/subband.c,
	contrib/hxmp3/trigtabs.c, include/contrib/hxmp3/LICENSE.txt,
	include/contrib/hxmp3/RCSL.txt, include/contrib/hxmp3/RPSL.txt,
	include/contrib/hxmp3/assembly.h, include/contrib/hxmp3/coder.h,
	include/contrib/hxmp3/hermite.h, include/contrib/hxmp3/mp3common.h,
	include/contrib/hxmp3/mp3dec.h, include/contrib/hxmp3/statname.h:
	Added Helix MP3 decoder and Hermite re-sampler. Do not miss to read
	the license texts.

	* arch/arm/dev/at91_spi.c: Removed forgotten debug output.

	* conf/arch/arm.nut, arch/arm/dev/tlv320dac.c, 
	include/dev/tlv320dac.h: Added suport for the TLV320 audio DAC.

	* conf/dev/dev.nut, dev/hxcodec.c, include/dev/hxcodec.h: Added 
	Helix audio device.


2008-10-03  Harald Kipp  <harald.kipp@egnite.de>

	* net/arpin.c, net/icmpin.c, net/igmpin.c, net/ipin.c, net/tcpin.c,
	net/udpin.c: Cris Neckar reported a security hole, which allows an 
	attacker to read random memory locations by sending ICMP echo 
	requests with modified IP header length fields. Even writing to 
	random locations would be possible by controlling the checksum 
	generation of the reply packet. Added several new size checks on 
	incoming telegrams to fix this. Many thanks to Cris for his
	detailed description of the problem.

	* include/net/if_arp.h, include/netinet/ip_icmp.h, pro/dhcpc.c:
	Added missing attributes 'packed'. This may fix a problem with
	different ARM compiler optimization settings.

	* include/netinet/ip.h, include/sys/confnet.h, include/sys/confos.h:
	Removed attribute 'packed' from typedef.

	* arch/arm/dev/at91_mci.c, include/dev/mmcard.h: Several changes. 
	The interface should work now with MultiMedia and SD Cards.

	* include/arch/arm/at91_mci.h: Typo corrected, MCI_OPCMD should
	have been MCI_OPDCMD. The wrong one will be kept for backward
	compatibility.

	* arch/arm/dev/at91_reset.c: Added external and peripheral reset,
	as suggested by Ole.

	* arch/arm/dev/at91_twi.c, conf/arch/arm.nut, conf/dev/dev.nut,
	conf/arch/arch.nut, include/arch/arm/irqreg.h: Added TWI support 
	for the AT91SAM9260.


2008-09-22  Harald Kipp  <harald.kipp@egnite.de>

	* arch/arm/init/crtat91sam7sex_rom.S: Added generic AT91SAM7
	runtime initialization.

	* arch/arm/init/crtat91sam7s256_rom.S, 
	arch/arm/init/crtat91sam7se512_rom.S,
	arch/arm/init/crtat91sam7x256_rom.S: Make use of generic code.

	* arch/arm/init/crtat91sam7s128_rom.S,
	arch/arm/init/crtat91sam7s16_rom.S,
	arch/arm/init/crtat91sam7s32_rom.S,
	arch/arm/init/crtat91sam7s512_rom.S,
	arch/arm/init/crtat91sam7s64_rom.S,
	arch/arm/init/crtat91sam7x128_rom.S,
	arch/arm/init/crtat91sam7x512_rom.S,
	arch/arm/init/crtat91sam7se256_rom.S,
	arch/arm/init/crtat91sam7se32_rom.S,
	arch/arm/ldscripts/at91sam7x128_rom.ld,
	arch/arm/ldscripts/at91sam7x512_rom.ld,
	arch/arm/ldscripts/at91sam7se32_rom.ld,
	arch/arm/ldscripts/at91sam7se256_rom.ld,
	arch/arm/ldscripts/at91sam7s128_rom.ld,
	arch/arm/ldscripts/at91sam7s16_rom.ld,
	arch/arm/ldscripts/at91sam7s32_rom.ld,
	arch/arm/ldscripts/at91sam7s512_rom.ld,
	arch/arm/ldscripts/at91sam7s64_rom.ld: Added support for remaining
	familiy members.

	* arch/arm/ldscripts/at91sam7s256_rom.ld: Removed duplicate
	carriage returns and 16k reserved flash.

	* conf/arch/arch.nut: Added support for remaining AT91SAM7 familiy 
	members. Added support for AT91 SDRAM and reset controller.

	* conf/repository.nut: Added support for remaining AT91SAM7 familiy 
	members.

	* conf/arch/arm.nut: Made AT91 SDRAM settings configurable. 
	Simplified AT91 TWI configuration. Added AT91 reset controller module.

	* conf/eir10c.conf: Enable new SDRAM configuration.

	* conf/dev/dev.nut: Made early watchdog setting configurable.

	* arch/arm/ldscripts/at91sam7se512_rom.ld,
	arch/arm/ldscripts/at91sam7x256_rom.ld: Removed 16k reserved
	flash.

	* arch/arm/dev/at91_reset.c, include/arch/arm/at91_reset.h:
	Added AT91 specific reset functions.

	* dev/reset.c, include/dev/reset.h: Moved AT91 specific 
	initialization to arch/arm/.


2008-09-18  Harald Kipp  <harald.kipp@egnite.de>

	* crt/fgetc.c: Reading 0xFF returned EOF. Fixed.

	* net/udpin.c: All broadcasts were answered with ICMP unreachable.
	Due to this the ARP table grew fast in large networks. Fixed.


2008-09-08  Harald Kipp  <harald.kipp@egnite.de>

	* tools/linux/Makefile.am, tools/linux/eir1ocd.cfg, 
	tools/linux/eir1ocd.ini: Added Elektor Internet Radio config
	for OpenOCD. Contributed by Michael Fischer.

	* Makedefs.avr-icc7, Makedefs.avrext-icc7, conf/tools.nut,
	include/arch/avr/icc.h: The old Marv_XXX do no longer work with 
	ICCAVR 7.18B. This is a real nightmare.

	* appicc/basemon/basemon.prj, appicc/caltime/caltime.prj,
	appicc/canbus/canbus.prj, appicc/events/events.prj,
	appicc/ftpd/ftpd.prj, appicc/httpd/httpd.prj, appicc/inetq/inetq.prj,
	appicc/logtime/logtime.prj, appicc/nutpiper/nutpiper.prj,
	appicc/playmp3/playmp3.prj, appicc/portdio/portdio.prj,
	appicc/pppc/pppc.prj, appicc/rs232d/rs232d.prj, 
	appicc/simple/simple.prj, appicc/tcps/tcps.prj,
	appicc/threads/threads.prj, appicc/timers/timers.prj,
	appicc/uart/uart.prj: Adapted to ICCAVR 7.18B.

	* appicc/canbus/CANBUS.SRC: Had wrong source file.

	* appicc/snmpd/snmpd.prj, appicc/snmpd/SNMPD.SRC: Added missing
	project files.

	* conf/ethernut21b.conf, dev/vs10xx.c, dev/vscodec.c: Now using 
	the correct PORT macros.

	* tools/nutconf/nutcomponent.c: Version 2.0.6 fixes a few memory 
	holes and avoids empty macro definitions for items with "integer" 
	flavor.

	* tools/nutconf/nutconf.cpp: Ignore case when comparing
	the installation directory.

	* tools/nutconf/nutconf.h: GUI version 2.0.6.

	* tools/nutconf/nutconfdoc.cpp: Fixed memory holes. Corrected
	ICCAVR option value retrieval.


2008-09-02  Harald Kipp  <harald.kipp@egnite.de>

	* conf/arch/arm.nut: Added a new MCU family macro to avoid 
	these lengthy preprocessor conditionals. This is just a first 
	upgradable sample.

	* conf/arch/avr.nut, conf/dev/dev.nut: Disabled the old 
	vs1001k driver. We will now use the dev/vs10xx.c, available for 
	all targets with GPIO.

	* conf/dev/dev.nut, dev/reset.c, include/dev/reset.h:
	Added platform independent reset functions.

	* dev/vs10xx.c: Make it compile for targets without specific 
	configuration.

	* include/dev/watchdog.h: Includes stdint header.


2008-08-29  Harald Kipp  <harald.kipp@egnite.de>

	* configure.ac, os/version.c: Next beta will be 4.7.3.

	* tools/nutconf/nutcomponent.c, tools/nutconf/nutconf.h:
	Last change, which makes sure that all subcomponents of a
	disabled component are disabled as well, introduced a new
	bug. Now all components should be correctly enabled.


2008-08-28  Harald Kipp  <harald.kipp@egnite.de>

	* configure.ac, os/version.c: New beta 4.7.2.

	* conf/dev/dev.nut, include/dev/sbbif0.h, include/dev/sbbif1.h,
	include/dev/sbbif2.h, include/dev/sbbif3.h: Bitbanging SPI was 
	not configurable for ARM targets.

	* arch/arm/dev/at91_emac.c, arch/arm/dev/at91sam7x_emac.c,
	arch/arm/dev/ax88796.c, arch/arm/dev/cs8900a.c,
	arch/arm/dev/dm9000e.c, arch/avr/dev/eth0cs.c,
	arch/avr/dev/eth0rtl.c, arch/avr/dev/lanc111.c,
	arch/avr/dev/wlan.c, dev/ppp.c, include/net/if_var.h,
	include/net/if.h: Added interface flags, which will be required 
	to implement Ethernet ioctl functions.

	* conf/dev/dev.nut, dev/lan91.c, include/dev/lan91.h:
	Added platform independant driver for LAN91 chips. It has been
	derived from the AVR version and had been tested for the LAN91C111
	only. This is the first Ethernet driver with ioctl support.

	* net/ifconfig.c: Make use of ioctl if the driver supports this.

	* conf/repository.nut: Added Lua routines which dynamically 
	return GPIO ports and bits based on the selected target platform.

	* tools/nutconf/nutcomponent.c, tools/nutconf/nutconf.h:
	Added Lua extension to query specific provisions.


2008-08-28  Michal Olejniczak <m.olejniczak@propox.com>

    * nut/conf/MMnet03.conf 
    Created file for MMnet03. Added MMnet03 definition 
    * nut/conf/MMnet04.conf 
    Created file for MMnet04. Added MMnet04 definition 
    * nut/conf/MMnet103.conf 
    Created file for MMnet103. Added MMnet103 definition 
    * nut/conf/MMnet104.conf 
    Created file forn MMnet04. Added MMnet104 definition 
    
2008-08-26  Michal Olejniczak <m.olejniczak@propox.com>
    * nut/arch/avr/dev/hd44780_bus.c 
    Added support for MMnet03..04 and MMnet102..104
    * nut/arch/avr/os/nutinit.c 
    Added MMnet03..04 and MMnet102..104 CPLD initialization.
    * nut/fs/pnutfs.c
    Added bank support for MMnet03..04 MMnet102..104
    * nut/include/dev/board.h
    Added:
     - RTL     support for MMnet01..04
     - LANC111 support for MMnet101..104
     - RTC     support for MMnet02..04 and MMnet102..104
    *nut/include/sys/bankmem.h
    Added bank support for MMnet03..04 and Mmnet102..104
    Many thanks to Harald Kipp for Patience and Support 
    
2008-08-25  Harald Kipp  <harald.kipp@egnite.de>

	* configure.ac, os/version.c: New beta 4.7.1.

	* conf/MMnet01.conf, conf/MMnet02_03_04.conf, conf/MMnet101.conf,
	conf/MMnet102_103_104.conf: Added configuration files for MMnet
	modules. Many thanks to Michal Olejniczak.

	* net/ethdemux.c, net/ipdemux.c: Uninitialized pointers in
	protocol structure caused frozen system.

	* fs/phatfs.c: Append to existing files failed when file size
	was larger than one cluster.


2008-08-22  Ole Reinhardt <ole.reinhardt@thermotemp.de>
        * fs/phatfs.c: Check if filesystem is mounted when opening a file. 
          Prevents a system lockup because of a nullpointer access

2008-08-22  Harald Kipp  <harald.kipp@egnite.de>

	* arch/arm/dev/ostimer_at91.c, arch/arm/dev/ostimer_gba.c,
	arch/arm/dev/ostimer_lpc2xxx.c, arch/arm/dev/ostimer_s3c4510b.c,
	arch/avr/dev/ostimer.c, arch/unix/dev/ostimer.c,
	include/arch/timer.h, include/sys/timer.h, os/timer.c:
	Querying the clocks initiated a hardware access, which consumes
	too many CPU cycles on some platforms. We now cache the clock
	values, as suggested by Duane Ellis. NutGetCpuClock() moved from 
	target specific arch/target/dev/ostimer_target.c to os/timer.c.
	A new function NutArchClockGet provides hardware access and
	another new function NutClockSet() can be used to clear the
	cache. If more than one clock is available, the new function
	NutClockGet() can be used for retrieval.

	* pro/cgi.c, pro/ssi.c: GCC specific implementation removed.
	This fixes the missing alloca for older avr-libc versions.


2008-08-19  Harald Kipp  <harald.kipp@egnite.de>

	* conf/net/net.nut, include/netinet/ip.h, include/sys/sock_var.h,
	include/sys/socket.h, net/ipdemux.c, net/ipin.c, net/tcpin.c,
	net/tcpsock.c, net/udpin.c, net/udpsock.c: Added IP demultiplexer to 
	uncouple protocols. Note, that NutUdpInput() and NutTcpInput() use 
	different parameters and now return a value, which match other layers.

	* include/net/ether.h: Corrected C++ brackets and added 
	NutRegisterEthHandler() prototype.

	* include/dev/netbuf.h: Added a new flag to mark unicast packets. 
	This should later avoid repeating address tests.

	* tools/nutconf/nutcomponent.c, tools/nutconf/nutconf.h:
	Incremented build number. Nothing changed really, but we need this to
	distinguish the bad version packed in the Windows distribution.


2008-08-17  Ole Reinhardt <ole.reinhardt@thermotemp.de>	
	* nut/pro/ssi.c: Fixed a memory leak. A filename was 
          never freed again

2008-08-11  Thiago A. Correa <thiago.correa@gmail.com>

	* Preliminary Atmega2560 compile options, but not yet
	supported.

2008-08-11  Harald Kipp  <harald.kipp@egnite.de>

	* nut/net/ethdemux.c: First trial of a dynamic protocol 
	demultiplexer. This one works on the data link level and may
	be implemented on higher levels as well.

	* conf/net/net.nut: Added the Ethernet protocol demultiplexer.

	* net/ethin.c: Added the Ethernet protocol demultiplexer.

	* include/net/ether.h: Added a global pointer to the demultiplexer
	function. Replaced C++ brakets by indent-friendly macros.

	* include/netinet/if_ether.h: Updated the copyright notice.
	Removed the Liquorice part after all original code vanished.
	Replaced CVS 'Log' by 'Id', because the first one will not be
	supported by Subversion. Added more Ethernet length definitions.
	Note, that we now include the CRC length in some calculations.

	* BSD types replaced by stdint types (feature request #1282721).
	Hopefully this will not break any existing code, the BSD types
	are still available. If your runtime library does not provide
	C99 stdint types, you can use include/crt/iccavr/stdint.h.

	* include/sys/heap.h, os/heap.c: Corrected size type of
	NutHeapRealloc().


2008-08-09  Harald Kipp  <harald.kipp@egnite.de>

	* dev/netbuf.c, include/dev/netbuf.h: Simplified NETBUF 
	allocation and release. Note, that NutNetBufFree will
	no longer return an error.

	* include/sys/nutdebug.h: NUTASSERT added.


2008-08-06  Harald Kipp  <harald.kipp@egnite.de>

	* arch/arm/dev/at91_emac.c: First EMAC reset failed on power-up.
	Initialize EMAC clock and MII mode earlier. 

	* arch/arm/dev/at91_emac.c, arch/arm/dev/debug_at91.c,
	arch/arm/dev/hd44780_at91.c, arch/arm/dev/ostimer_at91.c,
	arch/arm/dev/spimmc_at91.c, arch/arm/dev/usart0at91.c,
	arch/arm/dev/usart1at91.c, arch/arm/os/nutinit.c,
	conf/arch/arch.nut, conf/arch/arm.nut, conf/repository.nut,
	conf/tools.nut, dev/at45db.c, include/arch/arm/at91.h,
	include/arch/arm/at91_pmc.h, include/arch/arm/irqreg.h,
	include/arch/arm/timer.h, include/arch/arm.h, include/dev/board.h,
	include/dev/debug.h, arch/arm/init/crtat91sam9xe512_ram.S,
	arch/arm/ldscripts/at91sam9xe512_iram.ld, conf/ethernut50c.conf,
	include/arch/arm/at91sam9xe.h: Added support for Ethernut 5 
	(AT91SAM9XE reference design).


2008-08-01  Ole Reinhardt <ole.reinhardt@thermotemp.de>
	* tools/nutconf/configitem.cpp: Added cast to char* 
	  in line 698 to avoid compiling bug on linux

2008-07-31  Harald Kipp  <harald.kipp@egnite.de>

	* app/canbus/candemo.c: Use the right device name to open.

	* arch/arm/dev/usart0at91.c, arch/arm/dev/usart1at91.c,
	arch/arm/dev/usartat91.c, include/arch/arm/at91x40.h: 
	Initializing peripheral control registers in a more general 
	way. Works now for AT91SAM9260 and fixes bug #2032960.

	* conf/at91sam9260-ek.conf: Added PHY address. Fixes bug
	#2032767.


2008-07-29  Harald Kipp  <harald.kipp@egnite.de>

	* configure.ac, os/version.c: New beta 4.7.

	* configure.ac, os/version.c: Last 4.5 beta.

	* conf/eir10b.conf, conf/eir10c.conf: Replaced the first by the
	latter.


2008-07-28  Harald Kipp  <harald.kipp@egnite.de>

	* os/heap.c: Nut/OS crashes on the Elektor Internet Radio. 
	After removing setBeef() from NutHeapAdd, it worked again.

	* os/timer.c: Late timer destroy, hopefully solves bug #2029411.

	* tools/nutconf/configitem.cpp: Honor editing of boolean
	settings.

	* tools/nutconf/mainframe.cpp, tools/nutconf/nutconf.h,
	tools/nutconf/nutconfdoc.cpp: Configurator 2.0.2 fixes missing 
	'make install', introduced in 2.0.1.

	* tools/nutconf/settings.cpp, tools/nutconf/settings.h:
	The default installation path is an empty string.

	* tools/nutconf/nutcomponent.c: Make sure that all children of 
	a disabled parent are disabled too.

	* conf/dev/dev.nut: Added VS1053B.

	* conf/arch/arm.nut: Re-enabled NUT_CONFIG_AT91EFC for the
	SAM7SE again. No idea why this had been removed.

	* tools/nutconf/bldoptdlg.cpp, tools/nutconf/nutcomponent.c,
	tools/nutconf/nutconf.h: Configurator version 2.0.1 accepts empty 
	install path for using the default lib/ within the build tree.

	* tools/nutconf/nutconfdoc.cpp: Temporarly removed unsupported 
	Eclipse project copying. We are testing a new setup for Eclipse.


2008-07-27  Harald Kipp  <harald.kipp@egnite.de>

	* conf/net/net.nut, net/tcpsm.c, net/tcputil.c: Number of 
	retransmissions and upper and lower bounds of timeouts made 
	configurable. Many thanks to Szemzo Andras for pointing out,
	that this is required on some networks (ADSL in his case).


2008-07-26  Harald Kipp  <harald.kipp@egnite.de>

	* pro/cgi.c, pro/ssi.c: Thanks to Ole for quickly fixing bugs
	#2026946 and #2026951. Unfortunately the bug report missed to
	mention, that strtok_r() isn't available as well. Finally I
	tried to fix this without breaking Ole's code. Sorry, if I did.

	* configure.ac, os/version.c: Preparing 4.5.7 beta.

	* arch/arm/dev/ih_at91adc.c, arch/arm/dev/ih_at91emac.c,
	arch/arm/dev/ih_at91fiq.c, arch/arm/dev/ih_at91pio.c,
	arch/arm/dev/ih_at91pioa.c, arch/arm/dev/ih_at91piob.c,
	arch/arm/dev/ih_at91pioc.c, arm/dev/ih_at91spi0.c,
	arm/dev/ih_at91spi1.c, arch/arm/dev/ih_at91ssc.c,
	arch/arm/dev/ih_at91tc0.c, arch/arm/dev/ih_at91tc1.c,
	arch/arm/dev/ih_at91tc2.c, arch/arm/dev/ih_at91twi.c,
	arch/arm/dev/ih_at91uart0.c, arch/arm/dev/ih_at91uart1.c:
	Added capability to set and retrieve the interrupt mode. 
	The default mode for the UART had been switched from
	edge triggered to level sensitive, as specified in the
	AT91 datasheet. Many thanks to Tim DeBaillie for reporting 
	these problems. And special thanks to Alain M. for tracking
	them.

	* dev/ihndlr.c, include/dev/irqreg.h: Allow to just query the 
	current interrupt mode by calling NutIrqSetMode(&sig_, 
	NUT_IRQMODE_NONE). Another new level specifier is
	NUT_IRQMODE_LEVEL, which is used to specify level sensitive
	interrupts for internal devices of the AT91 CPUs.


2008-07-25  Ole Reinhardt <ole.reinhardt@thermotemp.de>
	* app/httpd/httpserv.c: Fixed compiler bug for Imagecraft compilers
	  and added missing PSTR macro around prog_char strings

	* pro/cgi.c, pro/ssi.c: Imagecraft compilers does not support alloca
	  (to allocate memory from the stack). So we use 
          NutHeapAlloc / NutHeapClear instead for Imagecraft.

2008-07-24  Harald Kipp  <harald.kipp@egnite.de>

	* configure.ac, os/version.c: Preparing 4.5.6 beta.

	* conf/repository.nut: nutinfo brief demonstrates some Configurator
	capabilities.

	* tools/nutconf/nutconf.h, tools/nutconf/bitmaps/nutconf.xpm,
	tools/nutconf/bitmaps/nutconf.bmp: Configurator version 2.0 
	with new splash screen.

	* tools/nutconf/configitem.cpp, tools/nutconf/nutcomponent.c,
	tools/nutconf/nutcomponent.h, tools/nutconf/nutconfdoc.cpp,
	tools/nutconf/nutconfdoc.h: Allow dynamically changing configuration 
	items. Values are no longer read during initialization, but 
	retrieved from the repository when needed. You can even specify Lua 
	functions instead of strings. A number of Lua extensions had been 
	added to allow the script to retrieve values from the Configurator
	GUI. On the downside, the Configurator GUI has become very slow
	when values are changed. However, this should be acceptable for
	now, because items are seldom changed. I'm also sure, that this
	can be easily fixed later.

	* tools/nutconf/scrolledtree.cpp, tools/nutconf/scrolledtree.h,
	tools/nutconf/treecomp.cpp, tools/nutconf/treecomp.h: The component 
	tree stopped working on Linux and OS X after wxWidgets implemented 
	the wxScrollHelper. 
	Although not fully fixed, it works acceptable again. The main 
	problem is, that it seems to be impossible to have a scrolled 
	window without vertical scrollbar. For now ignore the bar in the 
	middle of the component tree.

	* tools/nutconf/mainframe.cpp: Reorganized window initialization 
	fixes bad client window after starting the Configurator on Linux 
	and OS X.

	* tools/nutconf/settings.cpp: Fixed a path separator bug, which 
	prevents the Configurator from automatically finding the repository 
	path. The best way is to create a new directory (e.g. ethernut), 
	where you should unpack and install the source package. When done, 
	create a link named nut/ to the unpacked directory ethernut-x.y.z. 
	This way you will get the same directory structure as on Windows.

	* tools/nutconf/nutconf.cpp: More reliable splash screen appearance 
	on Linux. Also tried to fix help file loading, but still not working.

	* tools/nutconf/configtree.cpp: Simplyfied mouse event handling. 
	Reporting dynamic script errors.

	* tools/nutconf/bitmaps/application.xpm,
	tools/nutconf/bitmaps/buildlibrary.xpm,
	tools/nutconf/bitmaps/buildlibrary_large.xpm,
	tools/nutconf/bitmaps/checked.xpm,
	tools/nutconf/bitmaps/checked_dis.xpm,
	tools/nutconf/bitmaps/closedfolder.xpm,
	tools/nutconf/bitmaps/closedfolder_dis.xpm,
	tools/nutconf/bitmaps/enumerated.xpm,
	tools/nutconf/bitmaps/enumerated_dis.xpm,
	tools/nutconf/bitmaps/help.xpm,
	tools/nutconf/bitmaps/help_large.xpm,
	tools/nutconf/bitmaps/integer.xpm,
	tools/nutconf/bitmaps/integer_dis.xpm,
	tools/nutconf/bitmaps/library.xpm,
	tools/nutconf/bitmaps/library_dis.xpm,
	tools/nutconf/bitmaps/module.xpm,
	tools/nutconf/bitmaps/module_dis.xpm,
	tools/nutconf/bitmaps/open.xpm,
	tools/nutconf/bitmaps/open_large.xpm,
	tools/nutconf/bitmaps/radiooff.xpm,
	tools/nutconf/bitmaps/radiooff_dis.xpm,
	tools/nutconf/bitmaps/radioon.xpm,
	tools/nutconf/bitmaps/radioon_dis.xpm,
	tools/nutconf/bitmaps/save.xpm,
	tools/nutconf/bitmaps/save_large.xpm,
	tools/nutconf/bitmaps/search.xpm,
	tools/nutconf/bitmaps/search_large.xpm,
	tools/nutconf/bitmaps/text.xpm,
	tools/nutconf/bitmaps/text_dis.xpm,
	tools/nutconf/bitmaps/unchecked.xpm,
	tools/nutconf/bitmaps/unchecked_dis.xpm: Avoid compiler warning.

	* tools/nutconf/appoptdlg.cpp, tools/nutconf/bldoptdlg.cpp:
	Use correct ifdefs for path separators.

	* tools/nutconf/valuewindow.cpp: Use method IsOk() instead of 
	simply checking the item handle.


2008-07-18  Thiago A. Correa <thiago.correa@gmail.com>

	* conf/arch/avr.nut: Fix LCD size configuration for AVR.
	  Previously, LCD Bus config settings would be used instead
	  of the actual LCD Driver config settings.

2008-07-17  Ole Reinhardt <ole.reinhardt@thermotemp.de>

	* pro/auth.c: Allow Authentication for subdirectories
	
	* pro/cgi.c: 
	  - Check for unique cgi names
	  - Alloc local copy of cgi name. Allows dynamicaly generated cgi 
            names
	  - Function to register a different cgi-bin path. Multiple path 
	    allowed. See httpd demo for an example
	
	* pro/httpd.c pro/httpd_p.c pro/httpd_p.h pro/ssi.c:
          - Implemented feature request #1667498
	  - Moved some functions used in httpd.c as well as in ssi.c into
	    httpd_p.c
	  - Implemeted $QUERY_STRING parameter in for CGIs included by a 
	    ssi file
	
	* include/pro/httpd.h: Added prototype for new functions in cgi.c

	* dev/at49bv.c, include/dev/at49bv.h: Added function
	  AT49bvReadProtectionRegister to read factory or user id

	* app/httpd/httpserv.c, app/httpd/sample/form.html,
	  app/httpd/sample/include.inc, app/httpd/sample/index.html,
	  app/httpd/sample/ssi.shtml:
	  Updated the webserver demo to show new webserver functions
	  (different cgi pathes with seperate authentication, 
	  $QUERY_STRING parameter for ssi included CGIs)


2008-07-15  Henrik Maier  <hwmaier@users.sourceforge.net>

	* conf/xnut-105.conf: Renamed to xnut-105d.conf. 
        
        * conf/xnut-105d.conf, conf/xnut-100.conf: Added configuration item 
        for DTR which is now supported by usart driver.


2008-07-14  Harald Kipp  <harald.kipp@egnite.de>

	* arch/arm/init/crtat91_boot.S, arch/arm/init/crtat91_rom.S,
	boot/bootmon/start_rom.S, tools/win32/enut3ocd.ini,
	tools/linux/enut3ocd.ini: Ethernut 3 chip selects and wait
	states had been set inconsistently. We are now running
	with minimum waits. You may have to add additional delays in 
	your existing applications.

	* arch/arm/init/crtat91_bootcrom.S, conf/repository.nut, 
	arch/arm/ldscripts/at91_bootcrom.ld, conf/tools.nut:
	New link option for Ethernut 3. After power up, the code
	is copied from Flash to RAM similar to at91_boot, but the
	the constant data remains in Flash memory. This way the
	code runs much faster than with at91_rom, but applications 
	with large constant data areas like a big UROM filesystem
	will still fit.

	* dev/mmcard.c, include/fs/dospart.h: Small MMC cards may
	be formatted with FAT12 and without partition table. The
	driver will now detect this and skip partition table read.
	However, the file system type (FAT12) and the total number
	of sectors (65536) are hard coded. Any idea how to determine
	these values automatically?

	* boot/bootmon/bootmon.c, boot/bootmon/config.c,
	boot/bootmon/config.h, boot/bootmon/ether.c,
	boot/bootmon/utils.c: Ethernut 3 boot loader version 1.0.6.
	Re-read configuration on failures. Link wait time increased.
	Delay time increased because of reduced wait states.

	* include/netinet/if_ether.h: Added macros to determine
	Ethernet address types.


2008-07-11  Harald Kipp  <harald.kipp@egnite.de>

	* os/version.c: New build 4.5.5.2.

	* pro/httpd.c: Added file length check to avoid loading directories
	when using PHAT. Thanks to Michael Fischer.

	* dev/nplmmc.c: Added delays to make slow cards working.
	Fixed and tested by Michael Fischer.


2008-07-10  Harald Kipp  <harald.kipp@egnite.de>

	* configure.ac, os/version.c: Preparing beta version 4.5.5.

	* pro/httpd.c: Wrong mime type was returned for default files
	within subdirectories. Thanks to Michael Fischer for this fix.
	Put duplicate code in a new static function GetMimeEntry.


2008-07-09  Harald Kipp  <harald.kipp@egnite.de>

	* conf/dev/dev.nut, dev/x12rtc.c: Made EEPROM_PAGE_SIZE configurable. 
	I'm not convinced whether this makes sense, but it won't hurt.

	* pro/cgi.c: Bug #1799374 fixed, without adding any code, as suggested
	by Jason. I like these kind of code-size-aware enhancements.

	* crt/getf.c: Added support for length modifier h. According
	to C99, F, G and X type specifiers should work like f, g, and x.
	Thanks to Martin Ludwig for his suggestions. Fixes bugs
	#1711107 and #2003064.

	* arch/arm/init/crtat91sam7se512_ram.S, conf/tools.nut, 
	arch/arm/ldscripts/at91sam7se512_ram.ld, conf/repository.nut: 
	Added capability to load the code directly into RAM for easier 
	debugging. Contributed by Michael Fischer.


2008-07-08  Harald Kipp  <harald.kipp@egnite.de>

	* conf/pro/pro.nut, include/cfg/http.h, pro/httpd.c: Several HTTP 
	server options are now configurable. Keepalive is now disabled by 
	default to maintain backward compatibility. Fixes bug #1968754.

	* crt/putf.c: Starting from avr-libc 1.6.0 (WinAVR-20071221 and 
	newer) declaration of dtostrf has changed. Many thanks to
	Andrzej Lawrynowicz. Fixes bug #1871390.

	* arch/arm/dev/ostimer_at91.c, arch/arm/dev/ostimer_gba.c,
	arch/arm/dev/ostimer_lpc2xxx.c, arch/arm/dev/ostimer_s3c4510b.c,
	arch/avr/dev/ostimer.c, arch/unix/dev/ostimer.c, conf/os/os.nut,
	include/arch/timer.h, include/sys/timer.h, os/timer.c:
	Architecture specific implementations of NutDelay replaced by
	a more general one, which tries to automatically determine the
	required number of loops during NutTimerInit. Alternatively this 
	number is configurable. A new function NutMicroDelay has been added.
	Somehow fixes bug #1567794.


2008-07-07  Harald Kipp  <harald.kipp@egnite.de>

	* arch/arm/os/context.c, conf/os/os.nut, include/arch/arm/atom.h,
	os/thread.c: Three optional ways of handling critical sections are
	now available for ARM targets. For fastest interrupt response,
	critical section nesting should be disabled. This is the default
	and compatible with version 4.4. Alternatively the nesting level
	is trackes by either using the stack (fast, but may crash with
	some compilers and optimization settings) or by using a global
	variable (slow, but safe).

	* os/heap.c: Throws data abort exception on ARM. Function checkBeef()
	removed for 32 bit targets.


2008-07-01  Thiago A. Correa  <thiago.correa@gmail.com>

	* crt/malloc.c: Add realloc to override libc's realloc using 
	NutHeapRealloc.


2008-06-28  Harald Kipp  <harald.kipp@egnite.de>

	* os/heap.c: ImageCraft doesn't support inline. Replaced this keyword
	by macro INLINE.


2008-06-27  Harald Kipp  <harald.kipp@egnite.de>

	* crt/sbrk.c, conf/crt/crt.nut, conf/tools.nut, crt/putf.c:
	Added floating point support for stdio running on ARM. This
	is a dirty implementation and hadn't been tested very well.


2008-06-25  Matthias Ringwald <mringwal@inf.ethz.ch>
        * include/sys/heap.h, os/heap.c: Added NutHeapRealloc contributed
        by Moritz 'Monty' Struebe. 
        * include/arch/unix.h: escape realloc in unix emulation
        * include/arch/icc.h:  escape realloc for icc

2008-06-23  Harald Kipp  <harald.kipp@egnite.de>

	* boot/bootmon/Makedefs, boot/bootmon/bootmon.c, 
	boot/bootmon/npluled.h: Version 1.5.0. User LED support added.

	* boot/bootmon/tftp.c: Reduced retry time to become more responsive 
	to space input via RS-232.


2008-06-16 Matthias Ringwald <mringwal@inf.ethz.ch>
        * os/semaphore.c: fix bug in NutSemTryWait. It would block
        if sem->value == 0 instead of returning -1.


2008-06-16  Harald Kipp  <harald.kipp@egnite.de>

	* arch/arm/dev/at91_spi.c: Fixes #1963841. Many thanks to Eric 
	Haver (very sharp eyes).

	* conf/arch/avr.nut, arch/Makefile: Temporarily removed wlandrv.c
	from build due to GCC 4.3 warning.

	* include/arch/avr/gcc.h: Added Thiago's patch to fix
	_SLEEP_MODE_MASK problem, which is no longer public in
	the latest avrlibc. 


2008-06-15  Harald Kipp  <harald.kipp@egnite.de>

	* arch/avr/os/context_gcc.c, arch/avr/os/context_icc.c,
	crt/malloc.c, include/sys/heap.h, include/sys/thread.h,
	os/heap.c, os/thread.c: Rolled back all changes done
	after 2008-06-05. Parts of Moritz' code hadn't been well
	tested and his contribution was meant as an RFC.


2008-06-10  Matthias Ringwald <mringwal@inf.ethz.ch>
    * include/sys/heap.h: added missing include for C99 type usage


2008-06-09  Thiago A. Correa
    * arch/avr/os/context_gcc.c, arch/avr/os/context_icc.c,
	crt/malloc.c, include/sys/heap.h, include/sys/thread.h,
	os/heap.c, os/thread.c: NutHeapRealloc code
    contributed by Moritz Struebe.
    Add realloc to override libc's realloc using NutHeapRealloc

2008-06-05  Harald Kipp  <harald.kipp@egnite.de>

	* arch/arm/dev/st7036_at91.c, conf/arch/arm.nut, 
	conf/at91sam7x-ek-radio.conf, conf/at91sam7x-ek.conf,
	conf/at91sam9260-ek-radio.conf, conf/at91sam9260-ek.conf,
	conf/eir10b.conf: The port ID is now individually
	configurable for each signal line. Thus, there is no need to set 
	board specific defaults in the driver's source file. Settings had 
	been moved to the configuration files. This change may break your 
	existing LCD configuration.


2008-05-25  Ole Reinhardt <ole.reinhardt@embedded-it.de>
	* net/icmpin.c: Fixed size comparision in NutIcmpUnreach

2008-04-21  Ole Reinhardt <ole.reinhardt@embedded-it.de>
	* pro/ssi.c: Nicer implement query string feature and save some
          memory
	
	* os/condition.c, include/sys/condition.h: Implemented condition
	  variables to use with NutOS as an application candy

	* doc/gen/nutdoc_en.txt: Added description of condition variables 

	* conf/os/os.nut: Added configuration options for condition variables

	* os/Makefile: Added condition.c


2008-04-18  Harald Kipp  <harald.kipp@egnite.de>

	* configure.ac, os/version.c: Beta version 4.5.4.

	* net/ipin.c, net/udpin.c: Use fast ints.

	* Makedefs.avr-icc7, Makerules.avr-icc7, app/Makedefs.avr-icc7, 
	app/Makerules.avr-icc7, Makedefs.avrext-icc7, Makerules.avrext-icc7, 
	app/Makedefs.avrext-icc7, app/Makerules.avrext-icc7: Added new 
	Makefiles for ICCAVR V7. Since V7.15 Imagecraft gave up that 
	incompatible interpretation of the const keyword. Not sure, 
	how long we will be able to support ICCAVR V6.

	* crt/putf.c, crt/sprintf_p.c, crt/sscanf_p.c, fs/uromfs.c:
	Added type casts to fix ICCAVR V7.16 compile errors.

	* pro/ssi.c: Fixed ICCAVR compile errors. No chance to implement
	GCC's PSTR().

	* Makedefs.avr-icc, include\crt\iccavr\stdint.h: New include 
	directory adds support for stdint types to ICCAVR.

	* arch/arm/dev/usart0at91.c, arch/arm/dev/usart1at91.c,
	arch/arm/dev/usartat91.c, conf/arch/arm.nut, conf/arch/arch.nut,
	include/arch/arm/at91_us.h, include/dev/usartat91.h:
	Added Szemzo Andras' RS485 patch. Many thanks for this.

	* arch/arm/dev/at91_ahdlc.c, include/dev/at91_ahdlc.h:
	Thanks to Szemzo Andras for this first ARM implementation.
	Hope I didn't forget anything.

	* include/arch/arm/at91sam7se.h, include/arch/arm/at91_pwmc.h:
	Missing PWM hardware support added.

	* dev/netbuf.c, include/dev/netbuf.h, include/netinet/ipcsum.h,
	include/sys/sock_var.h, include/sys/socket.h, net/ipcpout.c,
	net/ipcsum.c, net/netdebug.c, net/papout.c, net/tcpsock.c,
	net/udpout.c, net/udpsock.c, net/papout.c: Changed size parameter 
	from u_short to int, which is easier to handle for 32-bit targets. 
	You need to recompile your ARM code. No impact on AVR expected, 
	except possible sign warnings. I changed u_int to int at some 
	places to avoid warnings during compilation of the Nut/Net 
	libs.

	* include/arch/arm/at91_ssc.h: Corrected definitions of clock 
	selection bits. The new naming is required, but may break existing 
	code.


2008-04-16  Harald Kipp  <harald.kipp@egnite.de>

	* app/snmpd/Makefile, app/snmpd/mib2if.c, app/snmpd/mib2if.h,
	app/snmpd/mib2sys.c, app/snmpd/mib2sys.h, app/snmpd/snmpd.c:
	SNMP agent sample. Be careful, this is alpha code.


2008-04-15  Henrik Maier  <hwmaier@users.sourceforge.net>

        * pro/httpd.c: Fixed compilation error with avr-gcc 3.4.6
        
	* app/basemon/basemon.c: Removed error message when compiling for
        AT90CAN128 CPU. Since the AT90CAN128 RevD silicon became 
        available, basemon can be used with this CPU.
        
	* conf/xnut-105.conf: Renamed to xnut-105c.conf. Added new version of
        xnut-105.conf with settings for AT90CAN128 RevD silicon.
        

2008-04-02  Harald Kipp  <harald.kipp@egnite.de>

	* net/tcpout.c, net/tcpsm.c: With unreliable connections or
	high traffic networks connections may suddenly freeze. The
	problem is, that during overflows (happening every 65s)
	the retransmission timer may be loaded with 0, which in
	turn disables all outstanding retransmission. Many thanks
	to Erik Lindstein and Henrik Maier for spending a lot of time
	to trace this nasty bug. Finally Henrik came up with the
	solution.


2008-04-02  Harald Kipp  <harald.kipp@egnite.de>

	* configure.ac, os/version.c: Beta version 4.5.3.

	* fs/phatfs.c: Fixing the last error exposed another hidden
	one. After setting the file pointer had been corrected and
	works, all open functions on existing files moved the file
	pointer to the end. This one fixes it.


2008-04-01  Harald Kipp  <harald.kipp@egnite.de>

	* configure.ac, os/version.c: Beta version 4.5.2.

	* configure.ac: Bug #1892070 fixed. Indeed wxWidgets 2.8 is
	required at least. Thanks to Moritz Struebe.

	* conf/pro/pro.nut, pro/Makefile, pro/httpd.c, pro/httpopt.c:
	Added the new, enhanced httpd API library. Includes the fixes 
	from Piotr Szlachta, #1839026 and #1839029.

	* conf/repository.nut: Added missing at91sam7s entries.

	* conf/tools.nut: Beautified target list.

	* crt/fmode.c: Code re-design. Fixes bug #1903303.

	* include/netinet/ppp_fsm.h: Bug #1902993 fixed. XCPOPT must
	be declared packed to work on 32-bit targets. Thanks to
	Nicholas Preyss.

	* fs/phatfs.c: Fixes bug #1903303. Still not fully correct,
	because fopen(name, "a+") should set the read pointer at
	position 0 while all writes should go to the end of the
	file. But setting the write pointer at the end will work
	for now.

	* dev/vscodec.c: VS10xx ioctl() returned -1 on success. Fixed.

	* fs/pathops.c, include/unistd.h: Implemented access().

	* include/sys/stat.h, pro/ftpd.c: Added S_ISDIR and S_ISREG macro.


2008-03-19  Harald Kipp  <harald.kipp@egnite.de>

	* arch/arm/ldscripts/at91_httprom.ld,
	arch/arm/ldscripts/at91_rom.ld: Added .ramfunc segment.
	Thanks to Matthias Wilde.


2008-03-17  Harald Kipp  <harald.kipp@egnite.de>

	* arch/arm/init/crtat91_boot.S: Reduced wait states for
	Flash access from 8 to 4.

	* include/arch/arm/atom.h: Added memory and cc clobbers to 
	NutEnter/ExitCritical. This keeps compiler optimizations
	inside and outside of critical sections seperated. Many
	thanks to Duane Ellis. Probably required for AVR too,
	but not tested yet.

	* tools/nutconf/nutcomponent.h, tools/nutconf/nutconf.h:
	Tool version 1.5.0. Starts working on OS X, though, still
	problems with scrolling the split tree.

	* tools/nutconf/appoptdlg.cpp, tools/nutconf/appoptdlg.h,
	tools/nutconf/bldoptdlg.cpp, tools/nutconf/bldoptdlg.h,
	tools/nutconf/configitem.cpp, tools/nutconf/configitem.h,
	tools/nutconf/mainframe.cpp, tools/nutconf/scrolledtree.h:
	Added more comments.

	* tools/nutconf/configtree.cpp, tools/nutconf/configtree.h,
	tools/nutconf/treecomp.cpp, tools/nutconf/treecomp.h:
	Removed dispensable scroll handlers.

	* tools/nutconf/nutcomponent.h: Do not re-declare 
	__BEGIN_DECLS. Avoids compiler warning on Mac OS X.

	* tools/nutconf/nutconf.cpp: Splash screen must be destroyed, 
	not deleted. Thanks to Steffen Ritter.

	* tools/nutconf/nutconfdoc.cpp: Added Eclipse project file 
	copying (experimental).

	* tools/nutconf/scrolledtree.cpp: Get it run on OS X.

	* tools/nutconf/settings.cpp: FindAbsoluteDir() now returns an 
	empty string on failure. Previous versions returned the current 
	directory (dot) without any chance for the caller to recognize 
	the error condition. This should fix the forgotten path problem
	on Linux, but not sure if it works under all conditions.

	* tools/nutconf/splitscroll.cpp: OS X uses a different window 
	hierarchy, so we need to search for the scrollbar instead of 
	simply taking the first one.

	* tools/nutconf/valuewindow.cpp: Fix OS X scrolling.


2008-02-15  Harald Kipp  <harald.kipp@egnite.de>

	* arch/Makefile, crt/Makefile, dev/Makefile, fs/Makefile,
	net/Makefile, os/Makefile, pro/Makefile: Added missing files.
	I missed to commit them in time. Hopefully I didn't break
	anything.


2008-02-13  Harald Kipp  <harald.kipp@egnite.de>

	* configure.ac, os/version.c: Second beta, version #4.5.1.

	* crt/nut_io.h: Serious bug fix. Reconfigured FOPEN_MAX was 
	not honored by all modules.

	* dev/vscodec.c, include/dev/vscodec.h, conf/dev/dev.nut:
	The old VS1001K support routine had been done in 2002 for the 
	4MHz ATmega. In order to handle high bitrates, decoder feeding 
	was done in interrupt context. With today's 16MHz AVRs, this
	complicated processing is no longer required. Here we present a 
	new character device driver for the VLSI decoders. Note, that 
	most things are still hard coded for the AT91SAM7SE and the 
	VS1033 or VS1053. The part we are missing most is a general SPI 
	driver. Stay tuned.

	* pro/uxmlparse.c, pro/uxmlstream.c, pro/uxmltree.c,
	include/pro/uxml.h, conf/pro/pro.nut: Micro XML parser added. 
	This is a very limited and probably incomplete parser. However, 
	it allows to parse relatively large XML files on tiny systems.

	* arch/arm/dev/at91_twi.c, arch/arm/dev/debug_at91.c,
	arch/arm/dev/hd44780_at91.c, arch/arm/dev/ostimer_at91.c,
	arch/arm/dev/spimmc_at91.c, arch/arm/dev/st7036_at91.c,
	arch/arm/dev/usart0at91.c, arch/arm/dev/usart1at91.c,
	arch/arm/dev/usartat91.c, arch/arm/os/nutinit.c,
	conf/at91sam7se-ek.conf, conf/tools.nut, dev/twbbif.c,
	include/arch/arm/at91.h, include/arch/arm/at91_ebi.h,
	include/arch/arm/at91_pmc.h, include/arch/arm/at91_sdramc.h,
	include/arch/arm/at91_smc.h, include/arch/arm/irqreg.h,
	include/arch/arm.h, include/cfg/arch.h, include/dev/debug.h,
	arch/arm/init/crtat91sam7se512_rom.S, include/arch/arm/at91sam7se.h,
	arch/arm/ldscripts/at91sam7se512_rom.ld: AT91SAM7SE512 support added.

	* conf/repository.nut, conf/arch/arch.nut, conf/arch/arm.nut:
	AT91SAM7SE512 support added. Global MCU list simplifies exclusivity 
	attribute. HW_EBI_AT91 added for MCUs with external bus interface.

	* pro/resolv.c, include/netdb.h: Added NutDnsGetConfig2() to query 
	DNS IP entries. Btw. all this network initialization stuff had 
	become souu rotten over the time. Blame me for not providing a 
	cleaner design in the early beginning.

	* os/bankmem.c: Calling the initialization routine more than once 
	is now possible. By default, half of the available memory will be 
	allocated. Previous versions eat all free memory above 8k.

	* pro/ssi.c: Quick hack provided by Niels. No idea what this is 
	for, but according to the author it is a dirty solution. We 
	urgently need it to get the Elektor Radio working. Sorry in 
	advance for any trouble this change may cause.

	* arch/arm/dev/dm9000e.c, include/dev/board.h, conf/eir10b.conf:
	Added support for the Elektor Internet Radio.

	* dev/at45db.c, include/dev/at45db.h: At45dbPageErase selected 
	the wrong bank. Fixed. Parameter pgn (page number) of 
	At45dbPageWrite() changed from unsigned int to unsigned long. 
	New routines At45dbPages() and At45dbPageSize() allow to 
	determine the chip's layout.

	* pro/snmp.c, pro/snmp_agent.c, pro/snmp_api.c, pro/snmp_auth.c, 
	pro/snmp_config.c, pro/snmp_mib.c: Added missing SNMP code files. 
	SET command is still buggy and will crash.

	* pro/rfctime.c: Missing code for RFC date and time conversion 
	added.

	* conf/arch/arch.nut, include/arch/arm/at91sam7s.h: Line endings 
	fixed and TABs converted.

	* c/stdlib/atoi.c, c/stdlib/atol.c, c/stdlib/strtol.c, 
	c/stdlib/strtoul.c, c/string/memcpy.c, c/string/strcat.c, 
	c/string/strchr.c, c/string/strncmp.c, c/string/strtok.c,
	crt/strtok_r.c, include/pro/asn1.h, include/pro/snmp_auth.h,
	include/pro/snmp_config.h: Replaced const with CONST. Some compilers 
	for embedded systems use this attribute in a different way.


2008-02-08  Ole Reinhardt <ole.reinhardt@embedded-it.de>
        * arch/Makefile: Added ih_at91spi for sam7x, Support for 
          at91sam7s added
        * conf/arch/arm.nut: Added ih_at91spi for sam7x


2008-01-31  Harald Kipp  <harald.kipp@egnite.de>

	* app/Makedefs.npl-xc95: Re-use existing macro names.

	* app/Makerules.npl-xc95: XSTSCRIPT and IMPSCRIPT are created
	dynamically. Macro PROJ renamed to NPL_PROJ. This way the XSVF
	File and the XSVF Executor can be created in a single Makefile.

	* conf/crt/crt.nut, crt/environ.c, crt/getenv.c, crt/putenv.c,
	crt/setenv.c, include/sys/environ.h: Added stdlib environment.

	* conf/repository.nut, conf/tools.nut,
	arch/arm/init/crtat91_httprom.S, arch/arm/ldscripts/at91_httprom.ld:
	Added ability to upload AT91 flash image via HTTP. Many thanks to 
	Matthias Wilde for this cool feature.

	* include/arch/arm/at91_twi.h: Removed duplicate Log tag. Ole is
	getting old, isn't he? :-)

	* include/unistd.h: Added sleep() prototype.

	* arch/arm/dev/spimmc_at91.c: Failed to compile for SAM7S. Added
	some default settings.

	* configure.ac, tools/nutdisc/Makefile.am: Added build of Nut 
	Discoverer.

	* tools/nutdisc/nutdisc.cpp, tools/nutdisc/udpthread.cpp:
	Added *nix socket support.

	* tools/nutdisc/mainframe.cpp, tools/nutdisc/mainframe.h: Added 
	autoscan and window hiding.

	* tools/nutdisc/nutdisc.h: Make frame window public.

	* tools/nutdisc/nutdisc.rc, tools/nutdisc/version.h: Version 2.2.

	* tools/nutdisc/taskbaricon.cpp, tools/nutdisc/taskbaricon.h:
	Taskbar added.

	* conf/arch/arm.nut, conf/arch/avr.nut, include/arch/arm/irqreg.h,
	arch/arm/dev/gpio_at91.c, arch/arm/dev/gpioa_at91.c,
	arch/arm/dev/gpiob_at91.c, arch/arm/dev/gpioc_at91.c,
	arch/avr/dev/gpio_avr.c, include/dev/gpio.h: Added first version 
	of platform independent GPIO routines. Consider the AVR version 
	untested.

	* arch/arm/dev/ih_at91pioa.c, arch/arm/dev/ih_at91piob.c,
	arch/arm/dev/ih_at91pioc.c: Added PIO interrupt handling for 
	devices with more than one port.

	* include/pro/httpd.h: Expanded REQUEST structure to handle
	HTTP/1.1. Added MIMETYPES structure.

	* include/pro/rfctime.h: RFC date and time conversion added.

	* include/pro/asn1.h, include/pro/snmp_agent.h, 
	include/pro/snmp_api.h, include/pro/snmp_auth.h,
	include/pro/snmp_config.h, include/pro/snmp_mib.h,
	include/pro/snmp.h: Added first SNMP support, still incomplete, 
	possibly buggy.

	* conf/repository.nut, include/cfg/arch/avr.h: Added ports H up 
	to L.

	* app/portdio/portdio.c: Now makes use of general GPIO routines 
	to work on all platforms. Pre-configured for Ethernut 1, 2 and 3 
	as well as Atmel's SAM7X and SAM9260 Evaluation Kits. Note, that 
	the AVR version had been moved from PORTD to PORTB. This had been 
	done to get the same expansion port pins on Ethernut 1/2 and 
	Ethernut 3 without disturbing the TWI/I2C port. Removed system 
	specific commands to keep it simple.

	* include/arch/arm/at91sam9260.h: Removed PIO_BASE definition, 
	which conflicts with general GPIO.

	* app/canbus/candemo.c, app/events/events.c, app/ftpd/ftpserv.c,
	app/logtime/logtime.c, app/pppc/pppc.c, app/rs232d/rs232d.c,
	app/simple/simple.c, app/tcps/tcps.c, app/threads/threads.c,
	app/timers/timers.c, app/uart/uart.c: Added return statement in 
	main to avoid warnings with latest GCC.


2008-01-16 Ole Reinhardt <ole.reinhardt@embedded-it.de>
	* arch/arm/init/crtat91sam9260_ram.S, arch/arm/init/crtat91_rom.S:
	  Changed backslash to slash in include path names 

2007-12-09 Ole Reinhardt <ole.reinhardt@embedded-it.de>
	* include/arch/arm/at91sam7x.h, include/arch/arm/at91sam9260.h,
	  include/arch/arm/at91sam7s.h, include/arch/arm/irqreg.h: 
	  Added adc support
	* conf/arch/arm.nut: Added config options for at91 adc driver
	* arch/arm/dev/at91_twi.c: Added doxygen tags
	* arch/arm/dev/at91_adc.c, arch/arm/dev/ih_at91adc.c,
	  include/arch/arm/at91_adc.h, include/dev/at91_adc.h:
	  Initial checkin of at91_adc driver
	* arch/Makefile: Support for at91_adc driver added

2007-11-16 Henrik Maier  <hwmaier@users.sourceforge.net>

	* app/canbus/candemo.c: Added delay after send to avoid bus overflow
        
        * arch/avr/dev/atcan.c: Updated bit timing values for a sample 
        point of 87.5% and a SJW of 2. Required for maximum bus 
        length as per CiA DS-102.


2007-11-15 Henrik Maier  <hwmaier@users.sourceforge.net>

        * eboot/flash.s: Uses avr/io.h include file for register definitions
        so it works for ATmega128, AT90CAN128 and AT90CAN128 
        
        * eboot/eboot.c: Include wdt.h was missing to compile for ATmega2561.
        
	* eboot/ether.c: Added support for AT90CAN128 MCU. Fixed using SRE 
        bit on MCUCR register for ATmega2561, must be XMCRA like AT90CAN128.
        

2007-10-12  Harald Kipp  <harald.kipp@egnite.de>

	* Makedefs.arm-gccdbg, app/Makedefs.arm-gccdbg: Compiler option
	-fomit-frame-pointer confuses gdb. Removed.

	* app/canbus/candemo.c: Several portability issues fixed.

	* arch/arm/init/crtat91sam7x256_rom.S: When using a bootloader,
	applications may freeze while re-programming the PLL. The PLL
	will now be switched to slow clock first before changing the
	PLL settings. Thanks to Andrew Zacharias, who provided this
	patch.

	* conf/arch/arm.nut: Removed ADC interface configuration,
	because the source code file is not yet available.


2007-10-08 Henrik Maier  <hwmaier@users.sourceforge.net>

        * app/canbus/candemo.c: Compiles now also for SJA1000 based designs
        * include/dev/board.h: Added RTC DS1307 for XNUT-100 and XNUT-105 
          units
        

2007-10-04 Ole Reinhardt <ole.reinhardt@embedded-it.de>

	* include/arch/arm/at91sam7s.h, conf/at91sam7s.conf, 
	  arch/arm/ldscripts/at91sam7s256_rom.ld, 
	  arch/arm/init/crtat91sam7s256_rom.S: Initial checkin, Support for
	  SAM7S256

	* conf/arch/arch.nut, conf/arch/arm.nut, include/dev/debug.h,
	  include/dev/board.h, include/cfg/arch.h, include/arch/arm.h,
	  include/arch/arm/irqreg.h, include/arch/arm/at91_pmc.h,
	  include/arch/arm/at91.h, dev/twbbif.c, conf/tools.nut, 
	  arch/arm/os/nutinit.c, arch/arm/dev/usartat91.c,
	  arch/arm/dev/usart0at91.c, arch/arm/dev/usart1at91.c,
	  arch/arm/dev/st7036_at91.c, arch/arm/dev/ostimer_at91.c,
	  arch/arm/dev/hd44780_at91.c, arch/arm/dev/debug_at91.c,
	  arch/arm/dev/at91_twi.c: Support for SAM7S256 added

	* arch/arm/dev/at91_spi.c: small bugfix for cpu with only one spi
          channel

	* conf/arch/avr.nut, arch/avr/dev/sja1000.c
	  SJA_BASE (base address for sja1000 driver) can now be set in
	  configurator

2007-09-18 Henrik Maier  <hwmaier@users.sourceforge.net>

        * app/Makeburn.avr-dude: Using $(MCU) variable instead of hardcoded
        processor.

2007-09-11  Harald Kipp  <harald.kipp@egnite.de>

	* dev/ds1307rtc.c: 24/12 hour mismatch fixed (bug #1786271).
	Thanks to Helmut Holbach.

	* configure.ac, os/version.c: Branch 4.4 created. Head is now 4.5.

	* include/arch/avr/atom.h: NutEnter/ExitCritical destroyed R0.
	Many thanks to Jean Pierre Gauthier for tracking this hidden bug.

	* Makedefs.avrext-icc, app/Makedefs.avrext-icc: Updated compiler 
	options for ATmega256.

	* conf/arch/avr.nut: Typo corrected.

	* conf/at91sam9260-ek.conf: Added missing LCD port definitions.

	* conf/ethernut21b-256.conf, conf/repository.nut, conf/tools.nut:
	Configurable startup file for ICCAVR.

	* conf/tools.nut: Misleading GCC_DEBUG option removed.

	* tools/nutconf/nutconf.h: New Configurator version 1.4.3.

	* tools/nutconf/nutcomponent.c, tools/nutconf/settings.cpp: Now 
	avr-dude is the default.

	* tools/nutconf/nutconf.cpp, tools/nutconf/nutconfdoc.cpp,
	tools/nutconf/settings.h: Top installation directory will be used 
	for ICCAVR project configuration. Re-building the application tree 
	will no longer override existing project files. Probably no longer 
	in use, but _MCU_enhanced will be replaced by _MCU_extended for 
	ATmega256.

	* tools/nutconf/settings.cpp: When multiple configurations is
	enabled, the repository name is now still stored in the root.
	This seems to solve a lot of problems with lost configurations.


2007-09-08 Henrik Maier  <hwmaier@users.sourceforge.net>

        * dev/can_dev.c, include/dev/can_dev.h: Changes to support RX time-out, 
        CAN_SetRxTimeout() added.
        
	* arch/avr/dev/sja1000.c: Optional time-out for receiving added
        
        * arch/avr/dev/atcan.c: Optional time-out for receiving added, 
        more robust handling of error interrupts. 
        
	* arch/avr/dev/atcan.c, include/dev/atcan.h: AtCanGetBusState() added.
        
        * include/cfg/xnut.h: Wrapped LED macros in braces. Corrected serial 
        port control macros.


2007-09-06  Ole Reinhardt <ole.reinhardt@embedded-it.de>
	* arch/avr/dev/sja1000.c:
        Corrected handling of 11bit standard IDs
	* arch/Makefile: Added at91_twi driver
        * arch/arm/dev/at91_twi.c, arch/arm/dev/ih_at91twi.c: First checkin
        * conf/arch/arch.nut: Added HW_PDC_AT91 to AT91SAM7X256 platform
        * conf/arch/arm.nut: Added support for AT91 TWI driver
        * include/arch/arm/at91sam7x.h: Added support for AT91 TWI driver
        * include/arch/arm/irqreg.h: Added interrupt definitions for SPI/TWI
        * conf/olimex-sam7-ex256.conf: First checkin
        * conf/repository.nut: 
        Added ld script selection for eb40a_redboot_ram (EB40A Eval board 
        with redboot bootloader running, changed load address)
        * conf/at91eb40a_redboot.conf: First checkin, New config for
	AT91EB40A eval board with redboot bootloader running
	* arch/arm/ldscrips/eb40a_redboot_ram.ld: First checkin, support for
	AT91EB40A eval board with redboot bootloader running
	* arch/arm/dev/at91_emac.c: Changed phy detection and added support
	for micel phy (SAM7-EX256 Board). Still needs work: Make phy id 
        configurable in configurator.


2007-08-30  Harald Kipp  <harald.kipp@egnite.de>

	* dev/mmcard.c, include/cfg/mmci.h, conf/dev/dev.nut:
	Timing configuration added. Fixes bug #1723331. Thanks to
	Marti Raudsepp.


2007-08-29  Harald Kipp  <harald.kipp@egnite.de>

	* os/version.c, configure.ac: Announcing release branch 4.4.

	* arch/avr/include/atom.h: Removed. Had been replaced by
	include/arch/avr/atom.h some time ago.

	* fs/pathops.c, include/fs/fs.h, include/stdio.h: Added missing 
	rename() function call, kindly provided by Andrew Zacharias.

	* Makefile.am: New boot directory for bootloader code.

	* doc/gen/nut_en.cfg.in: Removed non-existing ostracer app.


2007-08-28  Harald Kipp  <harald.kipp@egnite.de>

	* arch/arm/dev/at91_emac.c, arch/arm/dev/uartgba.c,
	arch/avr/dev/ace.c, arch/avr/dev/usart0avr.c, 
	arch/avr/dev/usart1avr.c, c/stdlib/abs.c, c/string/strrchr.c, 
	include/dev/ace.h, include/dev/hd44780.h, include/dev/hd44780_bus.h, 
	include/dev/sbbif3.h, include/fs/phatfs.h, include/netinet/igmp.h,
	include/sys/mutex.h, include/sys/semaphore.h, include/sys/sock_var.h, 
	doc/gen/nutdoc_en.txt, doc/gen/nut_en.cfg.in: Moved to Doxygen 1.5.3. 
	Several documentation typos fixed.


2007-08-17  Harald Kipp  <harald.kipp@egnite.de>

	* include/arch/arm/atom.h: Fixes a long existing and severe 
	porting bug (#1757410). NutEnter/ExitCritical destroyed r0! 
	While this is a temporary register on avr-gcc, arm-elf-gcc
	uses it for passing the first function parameter. This new
	version now also allows nesting by saving the current status 
	register on the stack.

	* arch/arm/include/atom.h: Removed. Had been replaced by
	include/arch/arm/atom.h some time ago.

	* arch/arm/dev/ostimer_at91.c, arch/arm/dev/ostimer_lpc2xxx.c,
	arch/arm/dev/ostimer_s3c4510b.c, include/arch/arm/timer.h:
	Timer enable/disable macro replaces previous global interrupt
	enable/disable or function calling (LPC).

	* dev/at45db.c: Documentation updated.

	* dev/chat.c: Default timeout value specifies seconds, but sets
	timeout in milliseconds. Missing factor 1000 added. Thanks to
	Alex from brumer.com.

	* arch/arm/dev/dm9000e.c: Enable multicast. Thanks to Joerg Krein.

	* boot/bootmon: Checked in Ethernut 3 boot loader.


2007-08-14  Matthias Ringwald <mringwal@inf.ethz.ch>
	* arch/unix/dev/unix_devs.c: fixed check if socket address is given

2007-07-30  Ole Reinhardt <ole.reinhardt@embedded.it.de>
	* eboot/eboot.c: Unlike ATMega128 the ATMega2561 does not
          disable the watchdog after a reset, so we need to do this 

2007-07-30  Ole Reinhardt <ole.reinhardt@embedded.it.de>
	* eboot/Makedefs: Added support for ATMega2561. Needs to be enabled
        by uncommenting LDFLAGS line and commenting out the one for
 	ATMega128
        * eboot/arp.c: Added korrekt arp response code
        * eboot/eboot.c, eboot/ether.c, eboot/tftp.c eboot/util.c 
          eboot/tftpc: Added ATMega2561 support

2007-07-26  Matthias Ringwald <mringwal@inf.ethz.ch>
	* arch/avr/dev/twif.c: Reduced critical section in TwSlaveListen

2007-07-18  Harald Kipp  <harald.kipp@egnite.de>

	* configure.ac, tools/nutconf/Makefile.am: Automatically
	determine Lua header directory.


2007-07-17  Harald Kipp  <harald.kipp@egnite.de>

	* app/httpd/httpserv.c: Server thread names not unique on SAM7X.
	Fixed by Marti Raudsepp.

	* arch/arm/dev/at91_spi.c: At91SpiTransfer2() documentation added.

	* arch/unix/dev/ostimer.c, arch/unix/os/nutinit.c: Added 'noreturn'
	attribute to NutTimerEmulation() and NutInterruptEmulation()
	to avoid compiler warnings. Thanks to Michael Mueller for his
	Ubuntu Emulation How-To.

	* net/netdebug.c, include/net/netdebug.h: Output strings must be
	signed characters. Fixed provided by Michael Mueller.

	* dev/ppp.c: Fixed bug #1369171, memory leak in NutPppClose().
	Thanks to Sergey Danilov.

	* nutsetup, arch/Makefile, include/cfg/arch.h: 
	Building in the source tree should work again for AT91 devices.


2007-07-16  Harald Kipp  <harald.kipp@egnite.de>

	* configure.ac: Supports latest autoconf.

	* dev/Makefile: RTC support was missing.

	* include/arch/arm/at91sam9260.h: Default PIO_BASE added.

	* include/cfg/twi.h: Missing default delay added.

	* pro/Makefile: Missing discovery support added.


2007-07-13  Ole Reinhardt <ole.reinhardt@embedded-it.de>
	* include/arch/arm/at91sam7x.h: Added UDP support
        * include/arch/arm/at91_udp.h: Defines for arm7 UDP controller

2007-07-09  Ole Reinhardt <ole.reinhardt@embedded-it.de>
	* net/Makefile:	Commented in igmp_in.c and igmp_out.c again 
        * net/ipin.c: igmp support reenabled

2007-07-09  Ole Reinhardt <ole.reinhardt@embedded-it.de>
	* dev/twbbif.c: Added default TWI_DELAY for avr architecture 
        to allow in-tree compilation
	* net/Makefile:	Commented out igmp support as long as it does 
        not exists to allow in-tree compilation
        * net/ipin.c: Commented out igmp support as long as it does not compile

2007-08-06  Ole Reinhardt <ole.reinhardt@embedded-it.de>
	* arch/arm/init/crtat91sam7x256_rom.S: 
        Corrected inlude path names. Changed backslash to slash

2007-06-14  Matthias Ringwald <mringwal@inf.ethz.ch>
	* include/sys/thread.c, arch/avr/os/nutinit.c: NutThreadSetSleepMode
	now returns previous sleep mode
    
	* arch/avr/os/nutinit.c: Disable ADC and buskeeper during idle thread
	sleep, if IDLE_THREAD_ADC_OFF and IDLE_THREAD_BUSKEEPER_OFF are defined.
     
2007-06-01  Harald Kipp  <harald.kipp@egnite.de>

	* app/caltime/caltime.c, app/caltime/Makefile, app/Makefile:
	New application sample demonstrates calendar functions.

	* conf/ethernut30d.conf: Rev-D boards failed to work with latest
	Nut/OS release.

	* crt/time.c: Bug #1724015 fixed. Thanks to Andreas Helmcke.
	Simplified code in time().

	* dev/x12rtc.c: Automatic detection of X1226 or X1286. Fixed
	wrong century determination for X1226. Debugging output added.

	* include/dev/board.h: RTC_CHIP definition now visible for
	ETHERNUT3 and MMNET02 only. 

	* include/dev/x12rtc.h: Wrong watchdog mode bit fixed.


2007-05-24  Harald Kipp  <harald.kipp@egnite.de>

	* arch/avr/dev/irblast.c, include/dev/irblast.h: New driver from 
	Przemyslaw Rudy sends modulated infrared remote control codes 
	using a simple IR LED. Cool.


2007-05-23  Harald Kipp  <harald.kipp@egnite.de>

	* arch/avr/dev/ace.c: Added two more interfaces. Thanks to
	Przemyslaw Rudy.

	* arch/avr/dev/tlc16c550.c, include/dev/tlc16c550.h: Update 
	provided by Przemyslaw Rudy.


2007-05-22  Harald Kipp  <harald.kipp@egnite.de>

	* arch/arm/dev/dm9000e.c: Added some delay befor reading the status 
	of the received packet. Fixes bug #1672527, thanks to Andreas Helmcke.

	* dev/npluled.c: NplUledStatus was looking at the MMC line not the 
	LED line when returning the status. Fixes bug #1711622, thanks to
	Douglas Pearless.


2007-05-02  Matthias Ringwald <mringwal@inf.ethz.ch>
        * include/stdio_nut_wrapper: Removed mapping of _write_P to _write
        for non Harvard architectures (is now already done in include/io.h)

2007-05-02  Harald Kipp  <harald.kipp@egnite.de>

	* configure.ac, os/version.c: Pre-release 4.3.3 alpha.

	* Makedefs.avr-gccdbg, Makerules.avr-gccdbg, 
	app/Makedefs.avr-gccdbg, app/Makerules.avr-gccdbg: Enables AVR 
	debugging. Same ugly solution which I already used for the ARM.

	* arch/avr/dev/ih_usart0_udre.c: ATmega256x used wrong interrupt 
	handler.

	* arch/avr/os/context_gcc.c: Minor typo with big impact.
	Extended PC never set in context switch frame. Additionally
	replaced __AVR_ATmega2561__ by __AVR_3_BYTE_PC__ and removed
	unused local variable paddr.

	* include/stdio.h: Added GCC format attributes to program space
	variants to enable compiler warnings at format/argument mismatch.
	Added mapping to standard functions for non Harvard architectures.

	* include/io.h: Added mapping of _write_P to _write for non Harvard 
	architectures.

	* include/arch/arm.h: Mapping of Harvard specific stdio functions
	removed.

	* arch/arm/dev/at91_emac.c: Pull-up enable/disable simplified.
	Added multicast table entry.

	* arm/dev/at91sam7x_emac.c, arch/arm/dev/ax88796.c,
	arch/arm/dev/cs8900a.c, arch/arm/dev/dm9000e.c, 
	arch/avr/dev/eth0cs.c, arch/avr/dev/eth0rtl.c, 
	arch/avr/dev/lanc111.c, arch/avr/dev/wlan.c, dev/ppp.c, 
	include/net/if_var.h: Added multicast table entry.

	* include/net/if.h: Socket ioctl functions added. More
	had to be done to make it work.
	
	* include/sys/sockio.h: Socket ioctls.

	* net/igmp.c, net/igmpin.c, net/igmpout.c,
	conf/net/net.nut, include/netinet/in.h, net/ipin.c,
	net/ipout.c, include/netinet/igmp.h: IGMP template added. 
	Not working yet.

	* dev/x12rtc.c: Failed to store more than one EEPROM page.
	Removing NutSleep() from X12WaitReady() fixes this. Why?

	* conf/ethernut13h-256gcc.conf, conf/ethernut21b-256gcc.conf:
	Configuration files for Ethernut 1 and 2 with mega2561 MCU.


2007-04-25  Harald Kipp  <harald.kipp@egnite.de>

	* tools/nutconf/nutcomponent.c, tools/nutconf/nutconf.h:
	Version 1.4.2 had been tested with wxWidgets 2.8.3.

	* tools/nutconf/pathvalidator.cpp, tools/nutconf/pathvalidator.h:
	New path validator class allows to check file and directory paths.
	It further provides automatic slash / backslash translation.

	* tools/nutconf/appoptdlg.cpp, tools/nutconf/bldoptdlg.cpp,
	tools/nutconf/repoptdlg.cpp, tools/nutconf/tooloptdlg.cpp:
	Path entry validator added. Transfer functions return actual result.

	* tools/nutconf/mainframe.cpp: Adding 3D style to sash in component 
	tree fixes repaint problems. Further added live update and sash 
	gravity attributes for easier resizing.

	* tools/nutconf/nutconfdoc.cpp: Configurator failed to create
	application directories containing subdirs. Fixed.

	* tools/nutconf/settingsdlg.cpp, tools/nutconf/settingsdlg.h: 
	Transfer functions return the accumulated result of the pages. 
	New validation routine switches to the page and the field with 
	invalid contents.


2007-04-20  Harald Kipp  <harald.kipp@egnite.de>

	* arch/arm/dev/at91_emac.c: Previous change failed on SAM7X-EK.
	We are now using PHY address 0 by default and disable all pull-ups
	during PHY reset.


2007-04-11  Harald Kipp  <harald.kipp@egnite.de>

	* os/version.c: 4.3.2 beta mainly adds SPI support, including
	AVR device programming and VS1011E MP3 decoder implementation.
	Further, this version compiles fine with avr-gcc 4.1.1 and includes
	first ATmega2561 support for the GNU compiler.

	* conf/dev/dev.nut, dev/vs10xx.c, include/cfg/audio.h,
	include/dev/vs10xx.h: New VS10XX decoder support. It will replace 
	the old VS1001K driver, but hasn't been tested for this chip yet. 
	For the time being, please add the vs10xx.c to your application
	code when using the VS1011E.

	* conf/dev/dev.nut, dev/avrtarget.c, include/cfg/progif.h,
	include/dev/avrtarget.h: New API added, which allows to program 
	external AVR devices via SPI.

	* conf/ethernut21b.conf, conf/ethernut30e.conf: Added 
	default setting for configurable SPI.

	* arch/arm/dev/ostimer_at91.c: Adjusted the miserable delay
	routine to make sure that the delay time is at least the
	specified number of milliseconds on a 72 MHz CPU with no
	wait states.

	* arch/arm/ldscripts/at91_rom.ld: Reverted Matthias' change,
	which created additional code in the RAM section. Matthias
	came up with a new solution, but I do not have the time
	right now to check it, sorry.

	* conf/arch/avr.nut, conf/dev/dev.nut, arch/avr/dev/sppif0.c,
	dev/sbbif0.c, include/dev/sbbif1.h, include/dev/sbbif2.h,
	include/dev/sbbif3.h, include/dev/sppif0.h: Configurable SPI support 
	added. Polled hardware SPI only, which is currently limited to AVR.
	Header files are available for up to 4 software SPI devices, but
	the API routines had been implemented for device 0 only.

	* conf/os/os.nut, include/sys/bankmem.h, os/bankmem.c: 
	Segmented buffer now runs on ARM too. Note, that several
	parameters had been changed from u_short to size_t. Hopefully
	this will not cause problems with existing software.

	* conf/repository.nut: Allow to select empty entry for AT91 ports.

	* crt/fgetc.c: Support for feof() and ferror() was missing. Added.

	* include/cfg/arch/avr.h: PORTH added.

	* Makedefs.arm-gccdbg, Makerules.arm-gccdbg, app/Makedefs.arm-gccdbg,
	app/Makerules.arm-gccdbg: Not optimal, but simple. Allows to compile
	for ARM targets with debug information included.

	* arch/arm/dev/at91_emac.c: PHY initialization may fail with
	pull-ups enabled. Fixed. Thanks to Atmel France.

	* app/cppdemo/cppdemo.cc, boot/appload/ip.c, boot/eboot/Makedefs,
	boot/eboot/dhcp.c, boot/eboot/ip.c, boot/eboot/tftp.c:
	Now compiles on avr-gcc 4.1. Unfortunately eboot doesn't fit
	in 8k anymore.

	* arch/avr/dev/ih_timer0_comp.c, arch/avr/dev/ih_timer2_comp.c,
	arch/avr/dev/ih_usart0_rx.c, arch/avr/dev/ih_usart0_tx.c,
	arch/avr/dev/ih_usart0_udre.c, arch/avr/dev/ih_usart1_rx.c, 
	arch/avr/dev/ih_usart1_tx.c, arch/avr/dev/ih_usart1_udre.c: 
	ATmega2561 uses different interrupt vector names. One day we should 
	switch to the new names used by avr-libc.

	* arch/avr/os/context_gcc.c: Added extended program counter byte
	for the ATmega2561.

	* conf/arch/arch.nut, conf/tools.nut: ATmega2561 no longer bound to 
	ICCAVR.

	* include/arch/avr/gcc.h: Added new register bit names for the
	ATmega2561.

	* include/cfg/arch.h: Added ATmega2561 definitions for Ethernut 1
	and 2.


2007-03-23  Harald Kipp  <harald.kipp@egnite.de>

	* net/ipin.c: ARP method wasn't actually disabled by default. Fixed.

	* conf/net/net.nut: Added more detailed information about the ARP
	method.


2007-03-17  Harald Kipp  <harald.kipp@egnite.de>

	* dev/usart.c: Workaround for AVRGCC 4.1.1 bug, which failed
	to compile UsartIOCtl().


2007-03-08  Matthias Ringwald <mringwal@inf.ethz.ch>
    * arch/avr/dev/usartavr.c: moved Exit Tracer event to end of IRQ
 
2007-02-15  Harald Kipp  <harald.kipp@egnite.de>

	* os/version.c: Beta release 4.3.1.

	* net/tcpsm.c: Serious bug in the TCP state machine froze socket
	connection on 32-bit platforms.

	* arch/arm/dev/at91_emac.c, conf/arch/arm.nut: Configurable buffer 
	usage and link timeout.

	* arch/arm/dev/hd44780_at91.c, conf/arch/arm.nut: Port usage is 
	now configurable. Data bits no longer need four consecutive port bits. 
	Added delays in read for better reliability with some slow displays.

	* arch/arm/dev/st7036_at91.c, include/dev/st7036.h, conf/arch/arm.nut:
	Added support for ST7036 based displays. Tested with EA DOG-M LCDs.

	* conf/arch/arm.nut, include/arch/arm/at91sam7x.h, 
	include/arch/arm/at91sam9260.h, arch/arm/dev/ih_at91sys.c,
	include/arch/arm/irqreg.h: Support for system controller interrupts 
	added.

	* arch/arm/dev/ostimer_at91.c, include/arch/arm/at91_pit.h,
	conf/arch/arch.nut, conf/arch/arm.nut, conf/at91sam7x-ek.conf, 
	include/arch/arm/at91sam7x.h: Now the periodic interrupt timer 
	may be used for the system clock.

	* conf/dev/dev.nut, conf/ethernut30e.conf, conf/ethernut30d.conf, 
	dev/twbbif.c, include/cfg/twi.h: Configurable port bits for 
	bit-banging I2C. Should work now on all AT91 MCUs. Make sure to 
	update your configuration file.

	* arch/arm/init/crtat91sam7x256_rom.S, conf/arch/arm.nut,
	arch/arm/init/crtat91sam9260_ram.S: Configurable runtime 
	initialization.

	* arch/avr/dev/usart0avr.c, arch/avr/dev/usart1avr.c: PORTG
	was rejected for half duplex control. Thanks to Andreas Siebert.

	* conf/repository.nut: PIO ID list added.

	* include/arch/arm/at91_ssc.h: Wrong SSC clock broke external clock
	feeding. Fixed.

	* tools/nutconf/mainframe.cpp, tools/nutconf/nutcomponent.c,
	tools/nutconf/nutconf.h, tools/nutconf/nutconf.cpp,
	tools/nutconf/repoptdlg.cpp, tools/nutconf/settings.cpp:
	Version 1.4.1 works with wxWidgets 2.8.0. Wide character issues 
	fixed.

	* tools/nutconf/settingsdlg.h: Missing notebook.h added.

	* tools/nutconf/nutconfdoc.cpp: Wide character issues fixed.
	Mkdir no more creates the full path without trailing separator.


2006-12-20  Matthias Ringwald <mringwal@inf.ethz.ch>
    * arch/avr/dev/ostimer.c: corrected millisecond to nut ticks
    calcuation. Same bug as fixed at 2006-09-05.

2006-11-08  Harald Kipp  <harald.kipp@egnite.de>

	* Bugfix, kindly provided by Steve Venroy. Already released request 
	structure was passed to NutHttpSendError().


2006-10-21  Christian Welzel <christian.welzel@welzel-online.ch>
	* tools/nutconf/nutconf.cpp, tools/nutconf/nutconfdoc.cpp,
	tools/nutconf/repoptdlg.cpp, tools/nutconf/repoptdlg.h,
	tools/nutconf/settings.cpp, tools/nutconf/settings.h,
	tools/nutconf/settingsdlg.cpp: Added support for multiple
	configurations / settings
	

2006-10-17  Harald Kipp  <harald.kipp@egnite.de>

	* configure.ac, os/version.c: Branch created for version 4.2.

	* arch/arm/dev/at91_emac.c: Number of loops waiting for links
	increased to 10000 and NIC resets reduced. This will help to
	link to auto MDIX via direct cable. Thanks to Dany Nativel for
	all the testing.

	* net/ipout.c: Failed ARP requests are no longer classified
	as fatal transmission errors.


2006-10-07 Henrik Maier  <hwmaier@users.sourceforge.net>

        * arch/avr/os/nutinit.c: include of sys/heap.h added.

        * include/sys/heap.h: Added an include statement for cfg/memory.h
        so the macro NUTMEM_STACKHEAP is found when compiling for the
        AT90CAN128.


2006-10-07  Harald Kipp  <harald.kipp@egnite.de>

	* Fixed problems with Doxygen tags in a large number of files.

	* dev/ds1307rtc.c: Corrected range check in DS1307RamRead().
	Thanks to Helmut Holbach.

	* conf/arch/avr.nut, conf/repository.nut, arch/avr/dev/hd44780.c:
	Many thanks to Thiago Correa for adding LCD port configuration.

	* arch/arm/ldscripts/at91_rom.ld: Matthias Wilde's enhancements
	for C++ support should allow to run C++ programs in ROM/FLASH.

	* arch/arm/dev/at91_emac.c, conf/arch/arm.nut: PHY address and
	power down bit are now configurable.

	* fs/phatdir.c, fs/phatfs.c, fs/phatvol.c, include/fs/phatdir.h,
	include/fs/phatfs.h, include/fs/phatvol.h: Not optimal, but
	simple and reliable exclusive access implemented. Fixes bug
	#1486539. Furthermore, bug #1567790, which had been rejected,
	had been reported correctly and is now fixed.

	* pro/auth.c, include/pro/httpd.h: Authentication info
	depended on static memory kept by the caller. Now a
	local copy is held and NutClearAuth (which should have been
	named NutHttpAuthClear, btw.) works correctly.


2006-10-05  Harald Kipp  <harald.kipp@egnite.de>

	* os/version.c: 4.1.99.

	* tools/nutconf: Heavily revised and updated the Configurator.
	Radiobutton type of selections are now supported by using the
	new attribute 'exclusivity'. Search function implemented.
	Simple 'About Dialog' added. Additional log output reports
	current working directory and path to the make tool. The
	default action on failures is now not to continue. Modified
	source files in the sample directory are no more overwritten.
	On startup, the Configurator will now check for a path
	mismatch, which typically appears after upgrading or
	downgrading the Nut/OS release. The user will be warned and
	a change to relative paths is offered. A few more cosmetics
	had been done, like early start of the splash screen or
	adding some more source code comments.
	The most important enhancement is probably the implementation
	of active Lua scripts. Values may now be evaluated by Lua
	functions. As a sample demo the configuration tree will now
	show the Nut/OS version number, which is extracted from
	os/version.c. Lua may also call C functions provided by the
	Configurator. For now, only a single function (l_repo_path) is
	available, which returns the path to the current repository.
	All Lua standard libraries are now registered.
	The new Configurator version is 1.3.1.

	* conf/arch/arch.nut, conf/arch/avr.nut, conf/tools.nut:
	Added exclusivity attribute.

	* conf/repository.nut: Added script, which extracts version
	information from C source file. This demonstrates the new
	scripting capabilities of the Configurator.

	* crt/time.c: Standard C functions now support hardware RTC.
	Ugly type conversion replaced.

	* include/dev/rtc.h, conf/dev/dev.nut, dev/ds1307rtc.c,
	dev/pcf8563.c, include/dev/board.h, include/dev/ds1307rtc.h,
	include/dev/pcf8563.h, include/dev/x12rtc.h: Hardware
	independant RTC layer added.

	* dev/x12rtc.c, include/dev/x12rtc.h: Hardware specific functions
	marked deprecated. Hardcoded register addresses and values
	replaced by macros.

	* os/heap.c: Fixes bug #1567729. Thanks to Ashley Duncan.

	* arch/avr/dev/ostimer.c: Fixes bug #1567730. The problem had
	been reported by several people. Lars Andersson provided the
	most complete solution, IMHO.

	* net/arpcache.c: On ARP transmit errors the incomplete cache
	entry is not removed. Subsequent queries will never send out
	new ARP requests. Many thanks to Michael Jones for providing
	a first solution. I added a check, which avoids to remove an
	already completed entry. Fixes bug #1567783.

	* arch/arm/dev/hd44780_at91.c: Fixes bug #1567813. Should
	now work after power on and after reset without power loss.
	Many thanks to Klaus-Dieter Sohn.

	* net/tcpsm.c, net/pppin.c, net/pppdebug.c, net/ipcsum.c:
	Avoid possible alignment errors. Fixes bug #1567748. Many
	thanks to Ben Hoyt.

	* fs/pathops.c: Fixes bug #1281167. Thanks to Jukka Holappa.

	* arch/arm/dev/at91_emac.c: Link detection was unreliable.
	This also caused bug #1567785. Now NutRegisterDevice will
	return an error, if there is no link available. Applications
	may then call NutRegisterDevice again.

	* arch/arm/init/crtat91_boot.S, arch/arm/init/crtat91_ram.S,
	arch/arm/init/crtat91_rom.S, arch/arm/init/crteb40a_ram.S:
	Bug #1497065 fixed.

	* dev/usart.c: Added a comment to warn the user about ioctl()
	functions, that may not be supported.

	* fs/phatdir.c: Fixes bug #1571269. Thanks to Dirk Boecker for
	reporting this.


2006-09-29  Harald Kipp  <harald.kipp@egnite.de>

	* os/version.c: Zombies never pass away. 4.1.9.10.

	* app/basemon/basemon.c, app/basemon/dataflash.c,
	app/basemon/realtek.c, app/basemon/webdemo.c,
	app/basemon/xmemtest.c, app/basemon/xmemtest.h,
	arch/avr/os/nutinit.c,: Added support for ATmega2561.

	* conf/at91sam9260-ek.conf: Corrected memory size.

	* include/arch/avr/icc.h: Corrected internal RAM size and check
	compiler environment for ATmega2561.

	* os/thread.c, arch/avr/os/context_gcc.c, arch/avr/os/context_icc.c,
	include/sys/heap.h: All code should use dedicated stack allocation
	routines. For targets allocating stack from the normal heap the API
	calls are remapped by preprocessor macros.

	* os/heap.c, os/thread.c, include/sys/heap.h, include/sys/thread.h:
	Stack allocation code moved from thread module to heap module.

	* os/heap.c: Adding static attribute to variable 'available' will
	avoid interference with application code. The ugly format macros
	had been replaced by converting all platform specific sizes to
	unsigned integers.



2006-09-25  Harald Kipp  <harald.kipp@egnite.de>

	* arch/arm/dev/at91_emac.c: Several fixes to make it running
	reliably on the AT91SAM9260.

	* arch/arm/dev/at91_spi.c, arch/arm/dev/ih_at91spi0.c,
	arch/arm/dev/ih_at91spi1.c, conf/arch/arm.nut,
	include/arch/arm/irqreg.h, include/dev/at91_spi.h:
	Basic AT91 SPI support added.

	* arch/arm/dev/ih_at91ssc.c: Default interrupt priority
	changed from 4 to 5. Usually this is used for high speed links.

	* arch/arm/dev/ih_at91tc0.c: Default interrupt priority
	changed from 4 to 0. As this is typically used by the system
	timer, lowest priority is fine.

	* arch/arm/dev/ostimer_at91.c: Now working correctly, if the
	CPU is running on the second PLL.

	* arch/arm/os/nutinit.c: Spurious interrupt handling on all
	supported AT91 devices.

	* conf/arch/arch.nut: PDC provision added for AT91 devices.

	* conf/at91sam9260-ek.conf: Configuration stored in serial
	Dataflash.

	* conf/dev/dev.nut, dev/at45db.c, dev/nvmem.c,
	include/dev/at45db.h: Added support for AT45 serial DataFlash
	memory chips. Currently limited to AT91 builds.

	* include/arch/arm/at91_pio.h: Register offsets added, which
	are quite useful for assembler programming. Added some
	special PIO features, which are available on the AT91SAM92xx
	series.

	* include/arch/arm/at91_pmc.h: Excluded second PLL from
	SAM7X builds. Corrected USB divider names.

	* include/arch/arm/at91_spi.h: Register offsets added.

	* include/arch/arm/at91_ssc.h: Just sorted lines a bit.

	* include/arch/arm/at91sam7x.h, include/arch/arm/at91sam9260.h:
	Added PIO features and SPI peripheral selections.

	* include/arch/arm/timer.h: Include clock configuration.


2006-09-11  Ole Reinhardt <ole.reinhardt@embeddet-it.de>
        * arch/avr/dev/hd44780.c: Added another LCD timing patch from Uwe Bonnes

2006-09-08  Harald Kipp  <harald.kipp@egnite.de>

	* conf/arch/arm.nut, include/arch/arm/irqreg.h: For some
	reason the SSC driver for SAM7X had not been included.

	* fs/phatdir.c: Directory entries honor daylight saving
	time. Thanks to Dirk Boecker for this fix.

2006-09-07  Ole Reinhardt <ole.reinhardt@embeddet-it.de>
        * arch/avr/dev/hd44780.c: Added LCD timing patch from Uwe Bonnes

2006-09-07  Harald Kipp  <harald.kipp@egnite.de>

	* arch/arm/init/crtat91sam9260_ram.S: Instruction cache is
	now enabled. Many thanks to Dany Nativel for providing this
	patch.

	* conf/pro/pro.nut, pro/discover.c, include/pro/discover.h,
	tools/nutdisc/discovery.h, tools/nutdisc/mainframe.cpp,
	tools/nutdisc/mainframe.h, tools/nutdisc/nutdisc.cpp,
	tools/nutdisc/nutdisc.h, tools/nutdisc/nutdisc.rc,
	tools/nutdisc/propdialog.cpp, tools/nutdisc/propdialog.h,
	tools/nutdisc/resource.h, tools/nutdisc/setup.cpp,
	tools/nutdisc/setup.h, tools/nutdisc/udpthread.cpp,
	tools/nutdisc/udpthread.h, tools/nutdisc/version.h,
	tools/nutdisc/bitmaps/nutdisc.ico: Discovery service added.
	A new GUI tool nutdisc will allow to scan the local network
	for Nut/OS nodes. You can even change the network configuration
	remotely. Note, that the GUI tool is GPL'ed. It had been tested
	on Win32 only, but should work on Linux as well with a few
	modifications.

	* app/ftpd/ftpserv.c: Discovery registration added. Enabled
	by default on ARM targets only to avoid blowing up AVR code.

	* app/httpd/httpserv.c: Discovery registration added.
	re-arranged network interface setup to exclude DHCP code
	from ICCAVR builds and make it work with the demo compiler.
	Added PHAT file system support. Still untested and unfinished.

	* conf/arch/arm.nut: Corrected descriptions. SAM7X and SAM9260
	are both using the same driver source. at91sam7x_emac.c will
	become obsolete. SSC driver added to SAM7X.

	* include/arch/arm/irqreg.h: sig_SSC added to SAM7X declarations.

	* include/arch/arm/at91sam7x.h: Added missing definitions for
	peripheral multiplexing. Now following the same naming
	conventions like those for the SAM9260 (using copy and paste
	from the datasheet ;-)).


2006-09-05  Harald Kipp  <harald.kipp@egnite.de>

	* os/version.c: Release candidate 8.

	* app/ftpd/ftpserv.c: Added support for ARM9 MMC. DHCP enabled
	by default.

	* arch/arm/dev/ostimer_at91.c: PLL clock calculation re-arranged
	to prevent 32-bit overflow. NutTimerMillisToTicks() returned
	wrong result. Shane Buckham reported this long time ago. Many
	thanks. Needs to be fixed for other platforms too.

	* arch/arm/dev/spimmc_at91.c: Added support for the AT91SAM9260.

	* arch/arm/init/crtat91sam9260_ram.S: Dedicated loops for
	each exception allows to determine its type. Applications
	fail to run when laoded via SAM-BA fro two reasons. First,
	internal RAM was not mapped to address 0x00000000. Second,
	interrupts were disabled.

	* conf/arch/arch.nut, conf/arch/arm.nut: SPI and MCI support
	added for SAM9260.

	* conf/repository.nut, conf/tools.nut: Added missing linker
	script for SAM9260 applications running in external RAM.

	* include/arch/arm/at91_mci.h: Timeout multiplier settings
	renamed to follow Atmel's convention. 4-bit bus SDC
	setting corrected. Several comments added or corrected.

	* include/arch/arm/at91sam9260.h: MIC base address corrected.

	* include/arch/arm/irqreg.h, arch/arm/dev/ih_at91ssc.c:
	SSC interrupt handler added.

	* include/dev/at91_mci.h, arch/arm/dev/at91_mci.c:
	Support for hardware MultiMedia Card interface added.
	SD Cards are currently not supported.

	* include/dev/mmcard.h: Added commands for native MMC interface.

	* conf/net/net.nut, include/cfg/ip.h, net/ipin.c:
	DHCP servers may probe an IP/MAC relationship by sending an
	ICMP request. This triggered the Nut/Net ARP method and
	terminated the DHCP client, leaving the system with default
	configurations of the network mask (255.255.255.0) and
	default gateway (none). The rarely used ARP method is now
	disabled by default.

	* conf/ethernut30e.conf: Default configuration added for
	Ethernut 3.0 Rev-E.


2006-08-31  Harald Kipp  <harald.kipp@egnite.de>

	* arch/arm/dev/at91_emac.c, include/dev/at91_emac.h: More
	general AT91 MAC driver replaces the SAM7X specific version.
	This had been tested on the SAM9260, but loses Ethernet
	packets for a yet unknown reason.

	* arch/arm/dev/ostimer_at91.c, include/arch/arm/timer.h:
	Added support for the AT91SAM9260. We now determine between
	processor and master clock. A new API function
	At91GetMasterClock() had been added to query the latter.

	* arch/arm/dev/debug_at91.c, include/dev/board.h,
	include/dev/debug.h: Using devDebug2 for the DBGU output
	was a bad idea. Some AT91 chips provide more than two UARTs.
	We now use devDebug to specify the DBGU device. Baudrate
	calculations failed on CPUs running on a processor clock, which
	differs from a futher divided main clock. This had been
	fixed.

	* arch/arm/dev/usartat91.c:
	Using the processor clock for baud rate calculations failed
	on the SAM9, if the master clock is further divided. This
	had been fixed.

	* arch/arm/dev/hd44780_at91.c: Added support for AT91SAM9260.
	Some displays fail after reset. An additional nibble sent
	during 4-bit initialization seems to fix this. However,
	a user reported that his 3.3V driven LCD now fails during
	power on.

	* conf/arch/arch.nut, conf/arch/arm.nut, conf/at91sam9260-ek.conf,
	include/arch/arm/at91.h, include/arch/arm/at91sam9260.h,
	include/arch/arm/irqreg.h, include/arch/arm.h, include/dev/board.h,
	at91sam9260_ram.ld: Added support for the AT91SAM9260 and Atmel's
	AT91SAM9260 Evaluation Kit.

	* include/arch/arm/at91_aic.h, include/arch/arm/at91_pmc.h:
	Defining register offsets simplifies assembly programming.

	* include/arch/arm/at91_ccfg.h, include/arch/arm/at91_matrix.h,
	include/arch/arm/at91_mci.h, include/arch/arm: at91_sdramc.h,
	include/arch/arm/at91_smc.h: New peripheral register definitions
	for the AT91SAM9260.

	* include/arch/arm/at91_pio.h: Added register definitions for
	PIOC.

	* include/arch/arm/at91_spi.h: Bits per transfer definitions added.

	* include/arch/arm/at91_ssc.h: Frame sync definitions added.

	* include/arch/arm/at91_us.h: Added additional registers found
	on the AT91SAM9260.

	* include/arch/arm/at91_rstc.h: Wakeup bit and LSB of external
	reset length added.

	* include/arch/arm/at91_wdt.h: Added LSB definitions for counter
	and delta values.

	* app/basemon/basemon.c, app/canbus/candemo.c,
	app/nutpiper/nutpiper.c, app/playmp3/playmp3.c: Not all platforms
	do have devDebug0. Use board.h to determine the correct driver.

	* app/ftpd/ftpserv.c: Dummy file system name added to SAM9260
	to let it pass the compiler. The application will not run on
	this platform.


2006-08-24  Ole Reinhardt <ole.reinhardt@embedded-it.de>
	* dev/ds1307rtc.c: avr-gcc 3.4 does not understand binary
          representation of numbers, changed to hex
	* pro/auth.c, include/pro/httpd.h: added NutClearAuth(void);
	  Thanks to Peter Sondermanns

2006-08-23  Matthias Ringwald  <mringwal@inf.ethz.ch>
        * dev/usart.c: UsartResetBuffer() cleared rbf_que without reason.
	This fixes bug #1541139. Thanks to Kevin Martin for fixing.

2006-08-05  Harald Kipp  <harald.kipp@egnite.de>

	* arch/avr/dev/usartavr.c: Half duplex flow control used the
	wrong buffer. Many thanks to Andrej Taran for fixing this bug.

	* arch/arm/dev/debug_at91.c, arch/arm/dev/usartat91.c: Special
	register functions should not be based on MCU definitions but on
	register definitions.

	* include/arch/arm/at91_dbgu.h, include/arch/arm/at91_spi.h:
	PDC registers added.

	* include/arch/arm/at91_us.h, include/arch/arm/at91sam7x.h,
	include/arch/arm/at91x40.h: PDC registers are now configurable
	in the parent header file.

	* include/arch/arm/at91x40.h: Old SAM7X leftovers finally removed.

	* include/arch/arm.h: Missing brackets may result in unexpected
	expansion of the _BV() macro.

	* include/arch/arm/at91sam7x.h, include/arch/arm/at91_ssc.h:
	Added register definitions for synchronous serial controller.

	* include/arch/arm/at91_pmc.h: Wrong PMC register offsets fixed.

	* arch/arm/dev/ostimer_at91.c: NUT_CPU_FREQ did not override
	AT91_PLL_MAINCK or NUT_PLL_CPUCLK. Fixed.

	* conf/dev/dev.nut: Added clock settings for Ethernut 3.0E.

	* dev/nplmmc.c: Hard coded PLL selections replaced by
	configurable definitions.


2006-07-31  Harald Kipp  <harald.kipp@egnite.de>

	* os/version.c: Release candidate 7. I'm really sick of this.
	Will we ever reach 4.2?

	* conf/repository.nut, conf/tools.nut, arch/arm/init/crtat91_rom.S,
	arch/arm/ldscripts/at91_rom.ld: New linker script and new startup
	file support applications running in flash memory.

	* Makerules.arm-gcc: Include paths added to ASM flags. Now the
	preprocessor handles constants and configuration items in
	assembly files.

	* include/arch/arm/at91.h, include/arch/arm/at91x40.h,
	include/arch/arm.h: Exclude function prototypes when
	included by assembler.

	* app/Makeburn.arm-jom: Added support for all four flash memory
	sections, which can be moved by S2. Default application section
	is now the one that negates A20 and A21. This preserves the boot
	loader. The traditional 'make burn' should work now for Ethernut 3.

	* conf/ethernut30d.conf: Default to 6 PHAT sector buffers.


2006-07-30  Harald Kipp  <harald.kipp@egnite.de>

	* pro/dhcpc.c: DHCP client failed because of alignment errors.
	Removed the dispensable 'packed' attribute from the dyn_cfg
	structure.

	* include/sys/event.h: Missing typecast in NutEventPostFromIrq()
	fixed. Thanks to Matthias Wilde.

	* net/ether_addr.c, include/netinet/if_ether.h, conf/net/net.nut:
	New functions ether_aton() and ether_ntoa() added. They convert
	the ASCII representation of an Ethernet MAC address to its
	binary form and vice versa.

	* fs/basename.c, fs/dirname.c, include/libgen.h, conf/fs/fs.nut:
	New functions extract last component and parent directory from
	pathnames.

	* fs/pnutfs.c: PNUT file system failed after some modifications
	done previously for the PHAT file system. During directory open,
	the NUTFILE structure must be allocated in the file system
	driver. PnutDirRead() must return -1 if the end of a directory
	is reached. Reading unused directory entries must update the
	file position pointer.

	* fs/dirent.c: Already disabled NUTFILE structure allocation
	finally removed from opendir().


2006-07-28  Harald Kipp  <harald.kipp@egnite.de>

	* configure.ac: Additional spaces at some line ends let Autoconf on
	Windows fail with 'already registered with AC_CONFIG_FILES'. Thanks
	to Andras Albert, who detected and fixed it.


2006-07-26  Harald Kipp  <harald.kipp@egnite.de>

	* os/version.c: Release candidate 6.

	* os/timer.c: NutSleep() doesn't take the difference between
	timer creation time and last timer elapsed processing into
	account. This may resulted in shorter sleep time. Thanks to
	Andras Albert for this fix.

	* arch/arm/dev/ostimer_at91.c, arch/arm/os/nutinit.c,
	conf/arch/arch.nut, conf/arch/arm.nut, conf/at91sam7x-ek.conf:
	Defining AT91_PLL_MAINCK will automatically determine SAM7X
	clock by reading PLL settings.

	* arch/arm/dev/spimmc_at91.c, conf/arch/arch.nut, conf/arch/arm.nut,
	conf/at91sam7x-ek.conf, include/dev/spimmc_at91.h:
	Added MMC/SD-Card support for AT91SAM7X Evaluation Kit.

	* arch/arm/dev/at91_efc.c, dev/nvmem.c, include/arch/arm/at91_efc.h:
	Added non-volatile configuration memory support for SAM7X,
	using upper 16k region of on-chip flash.

	* include/arch/arm/at91_mc.h: Made it usable for assembler.

	* include/arch/arm/at91_pmc.h: Added shift values for multi-bit
	parameters.

	* include/arch/arm/at91_spi.h: Added missing bit definitions.

	* app/ftpd/ftpserv.c: Added support for AT91SAM7X-EK.


2006-07-17  Harald Kipp  <harald.kipp@egnite.de>

	* app/Makedefs.arm-gcc, app/Makedefs.avr-gcc, app/basemon/Makefile,
	app/canbus/Makefile, app/cppdemo/Makefile, app/events/Makefile,
	app/ftpd/Makefile, app/httpd/Makefile, app/inetq/Makefile,
	app/isp2/Makefile, app/logtime/Makefile, app/nutpiper/Makefile,
	app/playmp3/Makefile, app/portdio/Makefile, app/pppc/Makefile,
	app/rs232d/Makefile, app/simple/Makefile, app/tcps/Makefile,
	app/threads/Makefile, app/timers/Makefile, app/uart/Makefile:
	Added creation of *.elf for 'make all'.

	* Makedefs.avr-icc, Makedefs.avrext-icc: Added current directory
	to include path.

	* app/Makefile: All samples must be build for all platforms.
	Running the targets is a different story.

	* app/Makerules.arm-gcc: Added start-group and end-group to solve
	circular reference issue with libraries.

	* app/basemon/basemon.c, app/basemon/dataflash.c,
	app/basemon/realtek.c, app/basemon/smsc.c, app/basemon/uart.c,
	app/basemon/webdemo.c, app/basemon/xmemtest.c,
	app/basemon/xmemtest.h, app/canbus/candemo.c, app/nutpiper/config.c,
	app/nutpiper/nutpiper.c, app/nutpiper/player.c,
	app/playmp3/playmp3.c: Exclude AVR specific parts from building
	for other platforms. This does not imply, that they are
	working on these platforms.

	* app/events/events.c, app/ftpd/ftpserv.c: Use dev/board.h to
	determine output device.

	* app/inetq/inetq.c: Fixed warnings about wrong signedness.

	* app/pppc/pppc.c: Use devAhdlc0 instead of devUart0. The latter
	will not work.

	* include/arch/arm.h: Map puts_P to puts and _write_P to _write
	for non-Harvard architectures.

	* include/dev/atcan.h: Excluded function prototypes for non-AVR
	targets. Parameter types are unknown to GNUARM.

	* include/arch/arm/at91sam7x.h, include/arch/arm/at91_spi.h:
	Added SPI support, kindly contributed by Andras Albert.


2006-07-16  Harald Kipp  <harald.kipp@egnite.de>

	* Makedefs.arm-gcc: Create listing in target directory, so
	'make clean' will work properly.

	* Makerules.arm-gcc: Cleaning ImageCraft output is not required.
	Also clean up listings of OBJ1 and OBJ2 entries.

	* arch/arm/dev/at91sam7x_emac.c: Transmitter buffer handling
	was buggy and delayed any second packet. Added handling
	of receiver overflow events.

	* arch/arm/init/crtat91sam7x256_rom.S, arch/arm/os/nutinit.c:
	Low level hardware initialization moved from nutinit.c to
	crtat91sam7x256_rom.S. This avoids the ugly jump from C code
	back into the runtime initialization.

	* arch/arm/init/crtat91sam7x256_rom.S: All segment entry labels
	moved into the specific segment. Still not sure how the linker
	assembles segments. Possibly we need additional empty segments,
	which may be filled from C code.

	* include/arch/arm/at91_mc.h: Base address removed. Should be
	specified in the upper level header.

	* include/arch/arm/at91_pmc.h: Changed coding style to follow
	existing headers.

	* include/arch/arm/at91_wdt.h: Changed coding style to follow
	existing headers. Removed old lines, which had been derived from
	at91_wd.h. Corrected register addresses, thanks to Jix.
	Register names changed, now following the datasheet. This
	may break your existing application.

	* arch/arm/os/nutinit.c: Watchdog reset (tiger bell) removed
	from idle thread.


2006-07-15  Harald Kipp  <harald.kipp@egnite.de>

	* arch/arm/dev/at91sam7x_emac.c: PHY initialization disabled user
	reset. Packet receiver routine filled wrong buffer and always
	returned an error. Many thanks to Andras Albert for fixing this.

	* arch/arm/init/crtat91sam7x256_rom.S, arch/arm/os/nutinit.c:
	CPU ran into the data pool of Sam7xLowLevelInit(). Temporarily
	fixed by Andras Albert with an additional global label in the
	startup code. Furthermore Andras changed the clock initialization.
	The CPU is now running at 47.9232 MHz and the MAC starts working.
	Great, TCP/IP is now running on the SAM7X.

	* conf/at91sam7x-ek.conf: Corrected memory settings to reflect
	the real RAM of the SAM7X and adapted CPU clock setting to
	Andras' changes.

	* include/arch/arm/at91sam7x.h: Missing base addresses and
	peripheral IDs added.

	* arch/arm/dev/hd44780_at91.c: Initialization flag removed. It
	is not required because the driver doesn't poll the busy flag
	during initialization. Bug fixed, which let the driver fail
	to properly initialize displays with two lines.


2006-07-13 Henrik Maier  <hwmaier@users.sourceforge.net>

	* arch/avr/dev/ih_usart0_rx.c, arch/avr/dev/ih_usart0_tx.c,
	arch/avr/dev/ih_usart1_tx.c:
	Fixed typing error for NUT_PERFMON counter variables.


2006-07-11  Harald Kipp  <harald.kipp@egnite.de>

	* fs/phatio.c, fs/phatvol.c, include/fs/phatvol.h: PHAT file system
	failed when accessed from multiple threads. A mutual exclusion
	semaphore fixes this.

	* fs/phatfs.c: Added mutual exclusion protection during flush.
	Honor Nut/OS file flushing, which uses a NULL pointer on read/write.


2006-07-10  Harald Kipp  <harald.kipp@egnite.de>

	* os/version.c: Release candidate 4.1.9.4. C++ support added.
	These patches had been kindly contributed by Matthias Wilde.
	Linking for pure virtual functions is not yet supported.

	* Makedefs.arm-gcc: Added which compiler to use for cc files, added
	compiler and linker flags for cc files especially fno-exceptions and
	-fno-rtti for C++.

	* Makefile: C++ libs added to ARM build.

	* Makerules.arm-gcc: Added rule to compile objects from *.cc files.

	* app/Makerules.avr-icc, app/Makerules.avrext-icc: Dirty hack
	to skip C++ with ICCAVR.

	* app/Makeburn.avr-jtagice, app/Makeburn.avr-jtagicemkii: Do not use
	absolute path for programmer executable.

	* app/Makefile: C++ demo added to ARM build.

	* app/cppdemo/Makefile: C++ lib added.

	* app/cppdemo/cppdemo.cc: Header files replaced by platform
	independent variants.

	* arch/arm/ldscripts/at91_ram.ld: Adapted to support C++
	requirements, with help of Martin Thomas (WinArm).

	* arch/arm/os/nutinit.c, include/arch/arm.h: C++ will use main
	instead of NutAppMain.

	* include/cpp/nutcpp.h: Defined functions for new and delete
	operator.

	* conf/tools.nut: Added ARM C++ support.


2006-07-09  Harald Kipp  <harald.kipp@egnite.de>

	* os/version.c: Release candidate 4.1.9.3.

	* Makedefs.avrext-icc, Makerules.avrext-icc, app/Makedefs.avrext-icc,
	app/Makerules.avrext-icc: New ImageCraft Makefiles for extended AVR
	devices like the ATmega2561.

	* app/Makedefs.avr-icc: Cleaned up from ATmega256 tests.

	* arch/avr/init/area.s: Added efunc_lit segment for extended AVR.

	* arch/avr/os/context_icc.c: Properly set 3 byte return address
	for extended AVR.

	* conf/tools.nut, include/arch/avr/icc.h: Distinguish between
	enhanced and extended AVR.

	* fs/phatvol.c: Automatically detect FAT12 and FAT16 volumes
	when no partition table is provided.

	* net/ipin.c: Do not respond to broadcasts with unknown protocols.
	Many thanks to Jan from Quantentunnel and sorry for missing your
	earlier report.

	* appicc/canbus/canbus.prj, appicc/canbus/CANBUS.SRC,
	appicc/events/events.prj, appicc/events/EVENTS.SRC:
	Missing ImageCraft projects added.


2006-07-05  Harald Kipp  <harald.kipp@egnite.de>

	* fs/phatdir.c: Two bugs fixed. Renaming a file's path (including
	directory change) failed. Thanks to Dirk Boecker, who reported this.
	The second bug was a memory hole, which had been discovered by
	Ralf Spettel.

	* fs/phatfs.c: Additionally check for NUTFILE_EOF before closing
	a file.


2006-07-04  Harald Kipp  <harald.kipp@egnite.de>

	* os/version.c: Release candidate 4.1.9.2.

	* arch/arm/dev/at91sam7x_emac.c, include/dev/at91sam7x_emac.h:
	New Ethernet driver for the AT91SAM7X EMAC and the Davicom DM9161A.
	This driver is not yet finished. Ethernet link auto-negotiation works
	and receive interrupts are generated when sending packets to the
	board. But transmitting packets fails, nothing is sent out.

	* ih_at91emac.c: Ethernet interrupt handler for the AT91SAM7X.

	* arch/arm/os/nutinit.c: Daidai's support for AT91SAM7X added.
	Possibly taken from Atmel. May require new coding from ground
	up in order to not conflict with original source. Nevertheless,
	many thanks to Daidai for providing his adaption.

	* arch/arm/init/crtat91sam7x256_rom.S,
	arch/arm/ldscripts/at91sam7x256_rom.ld: AT91SAM7X256 startup code
	and linker script, contributed by Daidai.

	* arch/arm/dev/debug_at91.c, arch/arm/dev/usart0at91.c,
	arch/arm/dev/usart1at91.c, arch/arm/dev/usartat91.c:
	Daidai's support for AT91SAM7X added.

	* arch/arm/dev/ih_at91irq2.c, arch/arm/dev/ih_at91pio.c,
	arch/arm/dev/ih_at91swirq.c, arch/arm/dev/ih_at91wdi.c:
	Interrupt handler will be included only, if the related interrupt
	ID is defined in the platform specific header file.

	* arch/arm/dev/ostimer_at91.c: Daidai's support for AT91SAM7X
	added.

	* conf/arch/arch.nut: SAM7 EMAC attribute added.

	* conf/arch/arm.nut: SAM7X interrupt and EMAC support added.

	* conf/at91sam7x-ek.conf: Set fixed main clock. Changed
	ARM_LDSCRIPT to at91sam7x256_rom.

	* dev/mmcard.c: Bugfix. Trailing slash in mount path not
	properly handled. Thanks to Michael Fischer.

	* dev/nvmem.c, include/dev/at91_efc.h:
	Added Daidai's version of using the AT91SAM7X
	on-chip flash for storing configuration data.

	* include/arch/arm/at91.h, include/arch/arm/at91_aic.h,
	include/arch/arm/at91_dbgu.h, include/arch/arm/at91_ebi.h,
	include/arch/arm/at91_emac.h, include/arch/arm/at91_mc.h,
	include/arch/arm/at91_pio.h, include/arch/arm/at91_pmc.h,
	include/arch/arm/at91_ps.h, include/arch/arm/at91_rstc.h,
	include/arch/arm/at91_sf.h, include/arch/arm/at91_tc.h,
	include/arch/arm/at91_us.h, include/arch/arm/at91_wd.h,
	include/arch/arm/at91_wdt.h, include/arch/arm/at91sam7x.h,
	include/arch/arm/at91x40.h
	Split on-chip interface definitions.

	* include/arch/arm/irqreg.h: Added more SAM7X interrupts.
	Thanks to Daidai.

	* include/arch/arm.h: RAMFUNC macro added for specifying
	routines running in RAM. Thanks to Daidai.

	* include/dev/board.h: DBGU interface added. Thanks to Daidai.

	* include/dev/debug.h: Daidai's SAM7X debug devices added.

	* include/dev/nvmem.h: Added Daidai's routines for un-/locking
	flash memory.


2006-07-04 Henrik Maier  <hwmaier@users.sourceforge.net>

        * arch/avr/os/nutinit.c: Changed binary constants to hex
        constants in XNUT board initialization code.


2006-06-30  Christian Welzel <christian.welzel@welzel-online.ch>

	* dev/ds1307rtc.c, include/dev/ds1307rtc.h: RTC and RAM routines
	for the Dallas DS1307 real time clock chip.

	* conf/dev/dev.nut: DS1307 Driver included.


2006-06-29 Henrik Maier  <hwmaier@users.sourceforge.net>

        * include/sys/thread.h: Added an include statement for cfg/memory.h
        so the macro NUTMEM_STACKHEAP is found when compiling for the
        AT90CAN128.


2006-06-28  Harald Kipp  <harald.kipp@egnite.de>

	* os/version.c: Release candidate 4.1.9.

	* include/dev/board.h: Added initial support for Atmel's
	AT91SAM7X-EK.

	* arch/arm/dev/at91init.c, arch/arm/dev/ax88796.c,
	arch/arm/dev/dm9000e.c, arch/arm/dev/ih_at91fiq.c,
	arch/arm/dev/ih_at91irq0.c, arch/arm/dev/ih_at91irq1.c,
	arch/arm/dev/ih_at91irq2.c, arch/arm/dev/ih_at91pio.c,
	arch/arm/dev/ih_at91swirq.c, arch/arm/dev/ih_at91tc0.c,
	arch/arm/dev/ih_at91tc1.c, arch/arm/dev/ih_at91tc2.c,
	arch/arm/dev/ih_at91uart0.c, arch/arm/dev/ih_at91uart1.c,
	arch/arm/dev/ih_at91wdi.c, arch/arm/dev/ostimer_at91.c,
	dev/twbbif.c: Include header arch/arm.h instead of
	arch/arm/at91.h.

	* arch/arm/dev/debug_at91.c, arch/arm/dev/usartat91.c:
	Temporarly exclude AT91R40008 specific register settings from
	building for AT91SAM7X.

	* conf/arch/arch.nut, conf/arch/arm.nut, arch/arm/os/nutinit.c,
	conf/dev/dev.nut, dev/sbimmc.c, include/arch/arm/at91.h,
	include/arch/arm/irqreg.h, include/arch/arm.h,
	include/dev/at91sam7x_mac.h, conf/at91sam7x-ek.conf: Make it compile
	for AT91SAM7X256. Just that. Nothing works so far.

	* arch/arm/dev/hd44780_at91.c: Significantly extend delay time
	to allow running slow 3.3V LCDs with fast CPUs. Not a nice fix,
	but it works.

	* dev/pcf8563.c: Bugfix. PcfRtcGetClock() returned wrong century.

	* fs/phatdir.c: Bugfix. Directories with long filename entries may
	not expand while crossing cluster boundaries.

	* os/event.c, os/thread.c, os/timer.c, include/sys/event.h,
	include/sys/timer.h, include/sys/thread.h:
	Event and timer handling re-design, again. This fixes a bug, which
	possibly existed since version 3.9.8 and freezes threads under heavy
	load. After several people reported this problem, Michael Jones and
	Henrik Maier finally detected the cause and came up with a solution.
	However, this fix let interrupt latency times depend on the number
	of running threads again and a new solution was implemented, which
	not only avoids this problem but further decreases interrupt latencies
	by adding an event post counter to the THREADINFO structure. This
	counter frees the interrupt routines from dealing with linked lists
	and frees the kernel from dealing with linked lists concurrently
	modified by interrupts. Furthermore, timeout timers are now released
	early. Michael Jones reported, that previous versions suffer from low
	memory situations while processing many events within short periods.
	The timer list is now double linked to reduce removal time. Internally
	timeout condition is now flagged by setting the timer handle to
	SIGNALED.
	Unfortunately new bugs were introduced with this re-design. Special
	thanks to Michael Jones, who located the "exact spot of the crime" and
	proofed, that his final fixes let Nut/OS behave quite well under heavy
	traffic storms. This new version will probably help also, if you
	experienced long term instability.
	Last not least the documentation had been updated.

	* include/sys/event.h: A new macro NutEventPostFromIrq() replaces
	the routine with the same name. In opposite to the previous routine,
	no result will be returned by this macro, which may break your
	existing code.
	The SIGNALED definition had been replaced by a less platform
	dependent variant.

	* include/sys/thread.h: Code indention corrected. Volatile attribute
	removed from THREADINFO link pointer.

	* os/thread.c, os/timer.c: NUTDEBUG code requires some updates.
	Temporarly removed.

	* os/event.c, os/timer.c: LGPL copyright removed after all the initial
	sources had been finally replaced by BSDL'ed code.

	* os/timer.c: Variable nut_ticks_resume is used in
	NutTimerProcessElapsed() only. Moved there.

	* arch/avr/dev/lanc111.c: Post to the event queue on overflow
	interrupts. Transmit event queue removed, because no one is listening.

	* arch/avr/dev/twif.c: NutEventPostFromIrq() doesn't return a result
	anymore. We directly inspect the queue's root. I'd say, that the whole
	code needs to be reviewed.

	* conf/dev/dev.nut: Null device added to Configurator build.


2006-06-27 Henrik Maier  <hwmaier@users.sourceforge.net>

	* arch/avr/dev/nicrtl.c: Fixed bug related to edge triggered interrupt
	mode (RTL_IRQ_RISING_EDGE) in ISR.


2006-06-18  Harald Kipp  <harald.kipp@egnite.de>

	* fs/phatdir.c: No need to set errno after GetParentPath() returns
	an error.

	* fs/phatutil.c: File modification date changed from GMT to local
	time for Windows compatibility.

	* fs/phatdir.c, fs/phatfs.c, fs/phatutil.c, fs/phatvol.c:
	No need to set errno after malloc failed.

	* fs/phatdir.c: New local helper function PhatOpenParentPath()
	reduces code size.

	* fs/phatdir.c, fs/phatfs.c, fs/phatutil.c, include/fs/phatdir.h,
	 include/fs/phatfs.h: Support for long filenames (VFAT) added.

	* fs/phatdir.c, fs/phatfs.c, include/fs/phatdir.h: New function
	PhatDirReleaseChain() simplifies code.

	* fs/phatdir.c, include/fs/phatdir.h: Static function
	PhatDirOpenParentPath() replaced by global PhatDirOpenParent().
	Added const attribute to path parameter of PhatDirOpen().

	* fs/phatdir.c: Now PhatDirEntryUpdate() clears the dirty flag
	for the root directory. Calls to PhatFilePosSet() with position
	zero replaced by calls to PhatFilePosRewind().

	* fs/phatfs.c, fs/phatutil.c: Fixed positioning bug, which caused
	several problems like limiting directories to one cluster.

	* crt/malloc.c: Set errno to ENOMEM if heap allocation fails.

	* dev/mmcard.c: Mutex deadlock fixed.


2006-05-24  Harald Kipp  <harald.kipp@egnite.de>

	* arch/arm/dev/cs8900a.c, dev/nvmem.c, include/arch/arm/at91.h,
	include/dev/ace.h, include/dev/nvmem.h, include/dev/tlc16c550.h,
	include/sys/confnet.h, include/sys/confos.h, net/confnet.c,
	os/confos.c, doc/gen/nutdoc_en.txt: API documentation updated or
	corrected.

	* arch/arm/dev/wdt_at91.c, conf/arch/arm.nut: Replaced platform
	independent functions by AT91 specific.

	* include/dev/watchdog.h: Platform dependent function prototypes
	added.

	* arch/avr/dev/wdt_avr.c, conf/arch/avr.nut: Watchdog API for
	AVR added.

	* dev/watchdog.c, conf/dev/dev.nut: Platform independent watchdog
	API added.

	* include/arch/avr/icc.h: Watchdog routines for ICCAVR added.

	* dev/at49bv.c: Bugfix. At49bvParamWrite() returned an error
	when flash sector contents was equal to the contents to write.

	* dev/mmcard.c: Added mutual exclusion lock for multithreaded
	access.

	* include/sys/confnet.h: Allow configuration of location used in
	non-volatile memory.

	* app/Makedefs.npl-xc95, app/Makerules.npl-xc95: New. For
	building XSVF files from Verilog sources.

	* lib/Makefile: Include UserConf.mk to determine architecture.

	* app/Makefile: Exclude those applications from ARM build, which
	do not support this architecture.

	* arch/Makefile: ICCAVR context switch replaced with the one for
	GCC. Imagecraft users will most likely use GUI tools. Added
	all AT91 specific sources to support building for ARM in the
	source tree. Corrected a typo, which checked for unix, but
	should check for arm.

	* crt/Makefile: Incomplete source list results in a bunch of
	linker errors when building in source tree.

	* dev/Makefile, fs/Makefile: Latest sources added, so building in
	the source tree will create complete libraries.

	* app/Makedefs.arm-gcc: Include UserConf.mk for correct building
	in source tree.

	* dev/npl.c, dev/twbbif.c: At least compiles for AVR now.

	* include/arch/arm.h, include/arch/avr/icc.h: Dummy macros added
	to support the avr-libc special function register definitions.

	* include/dev/npl.h: Use the AVR way of defining memory mapped I/O.

	* include/cfg/arch.h: The PLATFORM definition broke source tree
	building. Fixed for Ethernut Boards.

	* nutsetup: Mainly fixed ARM support and PLATFORM macro.


2006-05-15  Matthias Ringwald  <mringwal@inf.ethz.ch>
        * crt/getf.c: Take care of first character after integer, too.


2006-05-15  Harald Kipp  <harald.kipp@egnite.de>

	* configure.ac, os/version.c: Prepare pre-release 4.1.6.

	* net/tcpsm.c: ICCAVR doesn't accept void pointer calculation.

	* arch/arm/dev/hd44780_at91.c: Added delays for more reliable
	initialization.

	* arch/avr/dev/vs1001k.c, include/dev/vs1001k.h: Bug
	corrected, which stopped player on flush. Now flushing plays
	the remaining bytes in the buffer.
	VS1001 ports are now fully configurable.
	Several changes had been added to adapt the code to newer
	Nut/OS style, like replacing outp with outb and using API
	routines for interrupt control.

	* arch/avr/os/nutinit.c: Added heartbeat port bit, which is
	regularly toggled by the idle thread. Helps to develop on
	boards with external watchdog hardware that can't be disabled.

	* fs/phatfs.c: Added support for file seek.

	* fs/phatfs.c, include/fs/phatfs.h: A second PHAT file system
	instance enables us to concurrently mount a second volume.

	* fs/phatvol.c: Added support for media formats without partition
	table like USB sticks, AKA super floppies.

	* app/basemon/basemon.c, app/basemon/smsc.c, app/basemon/uart.c,
	app/basemon/utils.c, app/basemon/utils.h: Will run on boards with
	external watchdog hardware.

	* app/playmp3/Makefile: Network libraries not used. Removed from the
	library list.

	* app/playmp3/playmp3.c: Bugfix. Instead of waiting for player
	not running, wait for buffer empty. Now all sound samples are
	completely transferred to the decoder.


2006-04-28  Matthias Ringwald  <mringwal@inf.ethz.ch>
	* crt/vsscanf.c, crt/vsscanf_P.c: Made _sgetb aware of string delimiter.
	This fixes bug #1477658

	* crt/getf.c: Take care of first character after whitespace.
	This fixes bug #1477676

2006-04-07  Harald Kipp  <harald.kipp@egnite.de>

	* configure.ac, os/version.c: Pre-release 4.1.5.4.

	* arch/arm/dev/ih_at91fiq.c: Fast interrupts are now enabled
	correctly. Mode set/get ioctl added and priority set/get removed.
	Interrupt entry will no longer push R8-R12 on stack.

	* arch/arm/at91.h: Fast interrupt doesn't require to store R8-R12.

	* dev/twbbif.c: Data had not been forced to high before switching
	to output as claimed in the last change log. Now it is. Added
	additional delays in TwAck.

	* arch/avr/dev/hd44780.c, include/dev/hd44780.h: Target specific
	delay defaults moved from global header to AVR specific file.

	* include/cfg/lcd.h: Added for platform independent LCD
	configurations.

	* arch/arm/dev/hd44780_at91.c, conf/arch/arm.nut: ARM driver for
	HD44780 LCD controller added.

	* conf/dev/dev.nut: Removed requirement for non-volatile hardware
	solves link problem if no such hardware is available.

	* dev/at49bv.c, conf/dev/dev.nut, dev/nvmem.c, include/dev/at49bv.h:
	AT49BV flash memory support added. A single sector may be used to
	store system configurations in case there is no EEPROM available.

	* include/cfg/arch/armpio.h, include/cfg/arch/gpio.h:
	Added port configuration header file for ARM.

	* conf/dev/dev.nut, dev/pcf8563.c, include/dev/pcf8563.h:
	PCF8563 RTC driver added.

	* conf/dev/dev.nut: Added description of SD Card Pins. Added
	settings for MMC card change detect and write protect.

	* include/dev/blockdev.h: Added ioctl(NUTBLKDEV_MEDIAAVAIL).

	* arch/arm/dev/ih_at91irq0.c: Fixed wrong setting of high level
	sense.

	* arch/arm/dev/ih_at91irq1.c, arch/arm/dev/ih_at91irq1.c:
	Added missing IRQ sense settings.

	* dev/sbimmc.c: Port configuration is now honored.

	* nut/dev/mmcard.c: Number of read retries increased. Memory
	hole fixed. Added ioctl(NUTBLKDEV_MEDIAAVAIL). Card change
	ioctl() will also return 1 if no card is available.

	* fs/dirent.c: Memory hole fixed.

	* fs/phatdir.c: Memory hole fixed. Flag for normal / directory
	files now set correctly.

	* fs/phatvol.c: Several memory holes fixed.

	* dev/twbbif.c: Clock and data forced to high before switching to
	input gives better waveforms. Additional delay added to set
	clock to 50% duty cycle. The PCF8563 seems to fail, if the
	clock's high time is much longer than the low time.

	* dev/genchar.c, include/dev/genchar.h: Generic character driver
	sample added.


2006-03-29  Ole Reinhardt <ole.reinhardt@embedded-it.de>
        * include/sys/tracer.h, os/tracer.c, fs/fat.c: Signednes of strings
	* net/papout.c, net/pppdebug.c, dev/ppp.c: Signedness of strings

2006-03-27  Matthias Ringwald  <mringwal@inf.ethz.ch>
	* include/sys/type.h: added u_longlong and longlong for emulation

2006-03-21  Oliver Schulz  <olischulz@web.de>

	* Enhancement made to TCP state machine. Now TCP options  are read from peer
	and at least the maximum segment size is stored.


2006-03-16  Harald Kipp  <harald.kipp@egnite.de>

	* arch/arm/os/context.c, arch/avr/os/context_gcc.c,
	arch/unix/os/thread.c, crt/open.c, fs/dirent.c, fs/pathops.c,
	include/arch/arm.h, include/arpa/inet.h, include/dev/chat.h,
	include/net/netdebug.h, include/pro/httpd.h, include/pro/wins.h,
	include/sys/confnet.h, include/sys/confos.h, include/sys/device.h,
	include/sys/thread.h, net/inet.c, net/netdebug.c, os/thread.c,
	pro/asp.c, pro/dencode.c, pro/dencode.h, pro/ftpd.c, pro/httpd.c,
	pro/resolv.c, pro/ssi.c, pro/wins.c: Mainly all human readable
	strings like names of threads, devices or files had been changed
	from u_char to char. They are now compatible with standard C
	string functions and stop GCC 4 from nagging about signedness.

	* arch/arm/dev/debug_at91.c: Added ioctl to set baudrate.

	* arch/arm/dev/dm9000e.c: Adding a short delay before reading
	the status word makes it work with compiler optimization.
	On receiver overflow interrupts the chip is declared insane.
	The output routine will no more enter NutEventWait() on
	insane chips.

	* Makedefs.arm-gcc, app/Makedefs.arm-gcc: Compiler optimization
	-Os enabled.

	* arch/arm/include/atom.h: Removed. This had been a left over,
	the correct one is in include/arch/arm/.

	* arch/arm/os/context.c: Use link register to jump into thread
	and use dedicated routine to jump into the idle thread. The
	way we did start the idle thread before, jumping into the middle
	of NutThreadSwitch(), doesn't work with optimized code. We
	should correct this for the AVR target as well.

	* dev/sbimmc.c: No idea why the inline assembly routine for
	ARM bit banging SPI stopped working. Disabled.


2006-03-03 Henrik Maier  <hwmaier@users.sourceforge.net>

        * os/thread.c: Fixed bug NutStackHeap* functions. The availabe
        variable was not taken into account.

        * conf/arch/avr.nut: NUT_THREAD_NICRXSTACK entry added.

        * arch/avr/dev/nicctrl.c: Include cfg/dev.h added


2006-03-02  Harald Kipp  <harald.kipp@egnite.de>

	* conf/tools.nut, conf/arch/arm.nut: First attempt to compile
	with ICCARM. All compile errors fixed, but not a finished
	port yet. Many things are missing.

	* crt/vsprintf.c, dev/x12rtc.c, fs/phatutil.c, fs/uromfs.c,
	net/tcpout.c: ICCARM insists on a (void *) typecast for the
	second parameter of memcpy().

	* dev/sbimmc.c: Too lazy to port the inline assembly to
	ICCARM.

	* include/arch/arm/at91.h: Added ICCARM interrupt entry
	code. Probably not working, because excluded an immediate
	load.

	* include/arch/arm/atom.h: Added ICCARM inline assembly
	for NutEnter/ExitCritical(). Also fixed SF 1440949 (FIQ
	never enabled).

	* include/arch/arm.h: Added a few macros to allow compilation
	with ICCARM. These are well known from the AVR target.
	Wish we could have a more general include file for compiler
	related macros.

	* include/sys/types.h: ICCARM doesn't know __PTRDIFF_TYPE__.

	* arch/arm/dev/at91init.c, arch/arm/os/nutinit.c,
	conf/arch/arm.nut, include/arch/arm/at91.h: Added MCU specific
	hardware initialization routine. This should be done later for
	all MCUs to avoid contaminating NutInit() with MCU specific
	stuff. For the AT91 the spurious interrupt handler has
	been added, which fixes SF 1440948.

	* arch/arm/dev/ax88796.c: Replaced inline assembly nops
	with their portable counterparts.

	* arch/arm/dev/dm9000e.c: Replaced GCC specific inline
	specifications with their portable counterparts.

	* arch/arm/dev/ostimer_at91.c: Bugfix. The system timer
	configuration was based on a fixed MCU clock of 66.6 MHz.
	Now it uses the actual frequency.

	* fs/phatfs.c, fs/pnutfs.c: Added implementation of dev_size
	makes _filelength() work, which in turn enables the use of
	these file systems in pro/httpd.c.

	* app/httpd/httpserv.c: Can use MMC.


2006-03-01 Henrik Maier  <hwmaier@users.sourceforge.net>

        * nut/app/Makerules.avr-gcc: -Wl,--start-group and -Wl,--end-group
        options added to solve circular reference issue with libraries.
        With these option it is not necessary to list them multiple times
        or order them in some magic way.

        * arch/avr/dev/atcan.c: Error check for NutHeapAlloc added


2006-02-28 Henrik Maier  <hwmaier@users.sourceforge.net>

        * app/canbus/candemo.c, doc/gen/nut_en.cfg.in: Added CAN example
        for AT90CAN128 MCU.

        * arch/avr/dev/ih_ovrit.c, arch/avr/dev/ih_canit.c: Added
        implementation for IrqCtl function.

        * dev/sbimmc.c: Added macro definition MCU_AT90CAN128

        * include/dev/atcan.h: Prototype for AtCanEnableRx added.


2006-02-22  Harald Kipp  <harald.kipp@egnite.de>

	* arch/arm/include/atom.h: Typo corrected.

	* arch/arm/dev/wdt_at91.c, include/dev/watchdog.h,
	conf/arch/arm.nut: Added support for AT91 watchdog timer.

	* dev/sbimmc.c, conf/dev/dev.nut: MMC low level bit banging SPI
	added. Compiles on all platforms, but tested with AT91 only.

	* conf/dev/arch.nut: GPIO provision added for all MCUs except
	Gameboy Advance.

	* dev/mmcard.c: Timeout value increased. Some cards have
	long write latencies.

	* fs/phatfs.c, fs/phat12.c, fs/phat16.c, fs/phat32.c,
	fs/phatdir.c, fs/phatvol.c, fs/phatio.c, include/fs/phatvol.h,
	include/fs/phatio.h, include/cfg/fs.h, conf/fs/fs.nut:
	PHAT file system now supports configurable number of sector
	buffers. This dramatically increased write rates of no-name
	cards.

	* include/cfg/dev.h: Including this one may have exclude
	cfg/os.h. Preprocessor macro corrected.

	* fs/phatdir.c, fs/phatfs.c, fs/phatutil.c, fs/phatutil.h,
	fs/phatvol.h: AVR compile errors corrected.

	* pro/ftpd.c: Added missing file truncation flag for
	overriding existing files.

	* conf/repository.nut: Added choice for 32 bit ports.

	* arch/arm/os/nutinit.c, arch/arm/dev/cs8900a.c,
	arch/arm/dev/debug_lpc2xxx.c, arch/arm/dev/ihndlr_lpc2xxx.c,
	arch/arm/dev/ostimer_lpc2xxx.c, include/dev/board.h,
	include/dev/cs8900a.h, include/dev/debug.h, include/arch/arm.h,
	include/arch/arm/lpc2xxx.h, include/arch/arm/irqreg.h,
	include/arch/arm/timer.h: Added Michael Fischer's support for
	the Philips LPC2xxx Family and the LPC-E2294 Board from Olimex.


2006-02-08  Harald Kipp  <harald.kipp@egnite.de>

	* os/version.c: Pre-release 4.1.4 with limited support for
	the ATmega256. This is for the ImageCraft Compiler only
	and had been tested with V7.05BETA2 on a modified Ethernut 2.1
	Board, replacing the ATmega128 by an ATmega2561. It is
	unknown, if code will run in upper 128kB Flash Memory.
	Not all ATmega256 interrupts are support yet. A big thank
	you to Henrik Maier. His port for the AT90CAN128 made this
	one very easy.

	* app/Makedefs.avr-icc: LDFLAGS comment added for ATmega2561.

	* arch/avr/dev/ostimer.c: Timer support for ATmega2561.

	* arch/avr/dev/usart0avr.c, arch/avr/dev/usart1avr.c:
	USART support for ATmega2561 (ICCAVR only).

	* arch/avr/init/area.s: ICCAVR upgrade included.

	* arch/avr/init/crtnutm256.s, arch/avr/init/extramm256:
	ICCAVR runtime initialization for ATmega256 added.

	* arch/avr/os/context_icc.c: Now supports ATmega2561 context
	switching for 3 byte program counter.

	* conf/arch/arch.nut: ATmega2561 requires ICCAVR compiler.

	* conf/arch/avr.nut: Added ATmega2561 initialization for
	ICCAVR runtime.

	* conf/tools.nut, conf/os/os.nut: ATmega2561 support (ICCAVR
	only).

	* include/arch/avr/icc.h, include/arch/avr/irqreg.h,
	include/arch/avr/timer.h, include/arch/avr.h: ATmega2561
	added.

	* os/thread.c: Removed unused ICCAVR header file.

	* arch/avr/dev/ih_adc.c, arch/avr/dev/ih_analog_comp.c,
	arch/avr/dev/ih_canit.c, arch/avr/dev/ih_ee_ready.c,
	arch/avr/dev/ih_int0.c, arch/avr/dev/ih_int1.c,
	arch/avr/dev/ih_int2.c arch/avr/dev/ih_int3.c,
	arch/avr/dev/ih_int4.c, arch/avr/dev/ih_int5.c,
	arch/avr/dev/ih_int6.c, arch/avr/dev/ih_int7.c,
	arch/avr/dev/ih_ovrit.c, arch/avr/dev/ih_spi_stc.c,
	arch/avr/dev/ih_spm_ready.c, arch/avr/dev/ih_timer0_comp.c,
	arch/avr/dev/ih_timer0_ovf.c, arch/avr/dev/ih_timer1_capt.c,
	arch/avr/dev/ih_timer1_compa.c, arch/avr/dev/ih_timer1_compb.c,
	arch/avr/dev/ih_timer1_compc.c, arch/avr/dev/ih_timer1_ovf.c,
	arch/avr/dev/ih_timer2_comp.c, arch/avr/dev/ih_timer2_ovf.c,
	arch/avr/dev/ih_timer3_capt.c, arch/avr/dev/ih_timer3_compa.c,
	arch/avr/dev/ih_timer3_compb.c, arch/avr/dev/ih_timer3_compc.c,
	arch/avr/dev/ih_timer3_ovf.c, arch/avr/dev/ih_twi.c,
	arch/avr/dev/ih_usart0_rx.c, arch/avr/dev/ih_usart0_tx.c,
	arch/avr/dev/ih_usart0_udre.c, arch/avr/dev/ih_usart1_rx.c,
	arch/avr/dev/ih_usart1_tx.c, arch/avr/dev/ih_usart1_udre.c,
	arch/Makefile: Using the vector number as a file name hasn't
	been a good idea. ivect01.c to ivect36.c had been moved to the
	proper name of the interrupt handler.


2006-02-02  Ole Reinhardt <ole.reinhardt@embedded-it.de>
	* dev/Makefile:	Added nvmem.c to target list
	* arch/Makefile: Added eeprom.c to avr target list



2006-01-27  Matthias Ringwald  <mringwal@inf.ethz.ch>
	* arch/unix/eeprom.c: added #include <sys/types.h>

2006-01-26  Urs Zurbuchen  <going_nuts@myredirect.net>
	* arch/unix/dev/ostimer.c, arch/unix/os/nutinit.c,
	arch/unix/os/thread.c, arch/unix/Makefile,
	include/arch/unix/atom.h, include/arch/unix/irqreg.h,
	include/arch/unix/timer.h, os/timer.c, os/thread.c:
	adapted to new interrupt handling scheme for unix emulation
	now uses Unix timer and runs without interrupts unless you
	emulate other hardware
	arch/os/thread.c separated from os/thread.c, compiles as
	its own module now

2006-01-25  Matthias Ringwald  <mringwal@inf.ethz.ch>
    * arch/avr/dev/uartavr: minimized critical section in UartAvrFlush()
    * arch/avr/dev/adc.c, include/dev/adc.h: added explicit off mode

2006-01-25  Harald Kipp  <harald.kipp@egnite.de>

	* arch/avr/dev/ivect01.c, arch/avr/dev/ivect02.c,
	arch/avr/dev/ivect03.c, arch/avr/dev/ivect04.c,
	arch/avr/dev/ivect05.c, arch/avr/dev/ivect06.c,
	arch/avr/dev/ivect07.c, arch/avr/dev/ivect08.c,
	arch/avr/dev/ivect09.c, arch/avr/dev/ivect10.c,
	arch/avr/dev/ivect11.c, arch/avr/dev/ivect12.c,
	arch/avr/dev/ivect13.c, arch/avr/dev/ivect14.c,
	arch/avr/dev/ivect15.c, arch/avr/dev/ivect16.c,
	arch/avr/dev/ivect17.c, arch/avr/dev/ivect18.c,
	arch/avr/dev/ivect19.c, arch/avr/dev/ivect20.c,
	arch/avr/dev/ivect21.c, arch/avr/dev/ivect22.c,
	arch/avr/dev/ivect23.c, arch/avr/dev/ivect24.c,
	arch/avr/dev/ivect25.c, arch/avr/dev/ivect26.c,
	arch/avr/dev/ivect27.c, arch/avr/dev/ivect28.c,
	arch/avr/dev/ivect29.c, arch/avr/dev/ivect30.c,
	arch/avr/dev/ivect31.c, arch/avr/dev/ivect32.c,
	arch/avr/dev/ivect33.c, arch/avr/dev/ivect34.c,
	arch/avr/dev/ivect35.c, arch/avr/dev/ivect36.c:
	Applied Thiago A. Correa's patch to fix ICC warnings.

	* app/Makeburn.arm-jom, app/Makerules.arm-gcc: Old 'make burn'
	should now work with the jtagomat.

	* fs/phatdir.c: PhatDirEntryRead() returns -1 if the end of
	the directory is reached. This fixes the wrong implementation
	of readdir() and simplifies the code. Thanks to Jesper Hansen.

	* pro/ftpd.c: No need to specially handle the directory end.


2006-01-24  Harald Kipp  <harald.kipp@egnite.de>

	* dev/npluled.c, include/dev/npluled.h: Controls the green
	LED on Ethernut 3. Kindly provided by Kroum Vassilev.

2006-01-23  Harald Kipp  <harald.kipp@egnite.de>

	* app/basemon/Makefile, app/events/Makefile, app/httpd/Makefile,
	app/inetq/Makefile, app/nutpiper/Makefile, app/pppc/Makefile,
	app/rs232d/Makefile, app/simple/Makefile, app/tcps/Makefile,
	app/threads/Makefile, app/timers/Makefile, app/uart/Makefile:
	The boring game with GCC libraries continues, sigh! Note, that
	this version may also break your application build. Please
	add another -lnutarch at the end of your LIBS list in the
	Makefile.

	* arch/avr/dev/eeprom.c: Wrong parameters in ImageCraft call
	corrected.

	* arch/avr/dev/vs1001k.c, fs/phat12.c, fs/phat16.c, fs/phat32.c,
	pro/dhcpc.c, pro/resolv.c: Added required typecasts before
	left shift.

	* conf/arch/arch.nut, os/confos.c: Dummy NVMEM configuration
	for GBA added.

	* os/version.c: Build number incremented. Twice.

	* os/confos.c, net/confnet.c, dev/nvmem.c, include/dev/nvmem.h:
	Platform independant routines added, which provide generic
	access to non-volatile memory.

	* arch/avr/dev/eeprom.c: AVR specific routines for EEPROM access
	added.

	* arch/arm/dev/ax88796.c: Previous hack to fix missing network
	configuration routines disabled non-volatile memory access for
	ARM.

	* conf/arch/arch.nut, conf/arch/avr.nut: HW_NVMEM is now provided
	by a specific module.

	* conf/dev/dev.nut: X1226/X1286 EEPROM can be enabled for system
	configuration storage.

	* conf/ethernut30d.conf: Ethernut 3 uses X1226 EEPROM to store
	system configuration.

	* conf/net/net.nut: Configurable offset into non-volatile memory
	for network parameters added.

	* conf/os/os.nut: Dependency added to system configuration.

	* conf/repository.nut: Enhanced description of dev library.

	* dev/cy2239x.c: Including stdio header removed to avoid
	hang-ups caused by debug leftovers.

	* dev/twbbif.c: Automatic initialization added.

	* arch/arm/dev/dm9000e.c: Possible memory alignment problem
	may start network interface too early.

	* fs/phat16.c, fs/phat32.c, net/tcpout.c, pro/resolv.c: Avoid
	memory alignment errors.

	* include/sys/confnet.h, include/sys/confos.h: Added attribute
	'packed' to configuration structures.

	* net/confnet.c, os/confos.c: Using new routines for non-volatile
	memory access.

	* pro/dhcpc.c: Attribute 'packed' added to BOOTP (new typedef)
	and DYNCFG structures.
	Fixed memory alignment bug, which retrieved wrong values from
	DHCP options.


2006-01-22  Harald Kipp  <harald.kipp@egnite.de>

	* bin/arm7tdmi: Target directory added.

	* tools/nutconf/bitmaps/buildlibrary.bmp,
	tools/nutconf/bitmaps/buildlibrary_large.bmp,
	tools/nutconf/bitmaps/closedfolder.ico,
	tools/nutconf/bitmaps/help.bmp,
	tools/nutconf/bitmaps/help_large.bmp,
	tools/nutconf/bitmaps/library.ico,
	tools/nutconf/bitmaps/module.ico,
	tools/nutconf/bitmaps/module_dis.ico,
	tools/nutconf/bitmaps/nutconf.bmp,
	tools/nutconf/bitmaps/nutconf.ico,
	tools/nutconf/bitmaps/save.bmp,
	tools/nutconf/bitmaps/search.bmp,
	tools/nutconf/bitmaps/search_large.bmp: Artwork updated.

	* configure.ac, os/version.c: Pre-release 4.1.3.

	* fs/phatvol.c: If mounting fails, the occupied resources are
	no longer released in PhatVolMount(). Instead the caller,
	PhatIOCtl() in this case, must call PhatVolUnmount(). This
	reduces the code size and makes sure, the all resources are
	released in all cases. A similar result could have been
	achieved by using goto statements, but I try to avoid them.

	* fs/phat12.c, fs/phat16.c, fs/phat32.c: Deleting files
	results in writing to a wrong sector, which probably corrupted
	the volume.

	* fs/phatdir.c: Added _O_EXCL to open call in PhatDirCreate()
	to let mkdir() fail if the directory exists already.

	* fs/phatdir.c: The loop that checks wether a directory is
	empty or was buggy. Now rmdir() correctly returns an error
	when trying to delete subdirectories, which are not empty.

	* pro/ftpd.c: CreateFullPathName() partly returned double
	slashes or empty paths. This had been corrected.

	* fs/phatdir.c: PhatDirEntryStatus() set wrong errno value
	if out of memory.

	* pro/ftdp.c: Corrected failure to change to root directory.

	* conf/dev/dev.nut, conf/ethernut30d.conf, conf/repository.nut:
	Baudrate calculation for Ethernut 3 failed if MCU Clock was not
	specified.

	* dev/mmcard.c: Some cards need more time to enter idle state.
	Loop time is now increased by adding NutSleep(). Furthermore
	card access returns an error after card change detection.
	A re-mount is now required.

	* fs/phatfs.c: Requests to delete a file entry will now
	return an error if used on directory entries.

	* fs/phatio.c: Just two more comments added.

	* include/fs/phatfs.h: ICCAVR fails to find local header files.

	* app/ftpd/Makefile: Library list corrected.

	* app/ftpd/ftpserv.c: Added support for Ethernut 3, PHAT file
	system and realtime clock.


2006-01-19  Harald Kipp  <harald.kipp@egnite.de>

	* os/version.c: Pre-release 4.1.2.

	* dev/mmcard.c: Timeouts increased and long time sleeps
	decreased for better performance.

	* dev/nplmmc.c: MMC clock rate now uses the CY2239x driver
	routines to calculate a configurable value. Additional
	NOPs had been added to the SPI I/O, which seems to make
	the driver more stable.

	* dev/x12rtc.c: Bugfix. The driver used binary instead of
	BCD format to verify the year 1900 or 2000. Even worse,
	it didn't read the upper register values, So the year
	calculation was completely broken.

	* include/dev/x12rtc.h: time.h is now included in case the
	application won't do it for us.


2006-01-15 Henrik Maier  <hwmaier@users.sourceforge.net>

       * app/Makedefs.avr-gcc: Changed linker option from -Tdata= to
       --section-start=.data= as -Tdata is broken in binutils 2.16
       for the AVR target (refer to posts in avr-gcc mailing list)


2006-01-11  Matthias Ringwald  <mringwal@inf.ethz.ch>
        * arch/avr/dev/adc.c: ADCInit can be called multiple times

2006-01-11 Henrik Maier  <hwmaier@users.sourceforge.net>

        * include/arch/avr/gcc.h: Support for avr-libc >= 1.4.x

        * app/httpd/httpserv.c: Added explicit type casts to silence
        a few avr-gcc 3.4.3 warning messages.

        * arch/avr/dev/nicctrl.c: Changes to make receiver thread's stack
        size configurable and honour the NUT_THREAD_NICRXSTACK configuration
        setting.


2006-01-08  Harald Kipp  <harald.kipp@egnite.de>

	* doc/gen/nutdoc_en.txt, doc/gen/nutfoot.html, os/version.c:
	Version information changed.


2006-01-06  Harald Kipp  <harald.kipp@egnite.de>

	* doc/gen/nutdoc_en.txt: Version information changed.

	* nut/pro/httpd.c: NutHttpURLEncode() no longer encodes
	everything that isn't alphanumeric. See RFC2396. Thanks
	to Lloyd Bailey for this update.


2006-01-05  Harald Kipp  <harald.kipp@egnite.de>

	* fs/phat12.c, fs/phat16.c, fs/phat32.c, fs/phatdbg.c,
	fs/phatdir.c, fs/phatfs.c, fs/phatio.c, fs/phatutil.c,
	fs/phatvol.c, include/fs/phat12.h, include/fs/phat16.h,
	include/fs/phat32.h, include/fs/phatdbg.h, include/fs/phatdir.h,
	include/fs/phatfs.h, include/fs/phatio.h, include/fs/phatutil.h,
	include/fs/phatvol.h, conf/fs/fs.nut: PHAT file system driver
	added. This is a FAT12/16/32 compatible file system with read
	and write access. The code is in alpha stage.

	* crt/fmode.c: Files opened with mode 'a' or 'w' will be
	created, if they didn't exist. Files opened with 'w' will be
	truncated, if they exist.

	* fs/dirent.c, include/dirent.h, fs/pnutfs.c, fs/uromfs.c:
	The NUTFILE structure is now dynamically allocated. This
	change is required to seperate the file system from the
	block device driver code.

	* include/fs/uromfs.h: Changed the type of the size and file
	position values in the directory entry from u_short to u_int
	in order to better support 32 bit targets.

	* fs/pathops.c, fs/pnutfs.c: The argument for the FS_STATUS
	ioctl now uses an individual structure.

	* include/fs/fs.h: Added ioctl functions to mount volumes,
	rename files, remove files and create or remove directories.

	* dev/mmcard.c, dev/nplmmc.c, conf/dev/dev.nut,
	include/dev/blockdev.h, include/dev/mmcard.h,
	include/dev/nplmmc.h, include/fs/dospart.h: Mulimedia Card
	Block Device Driver added.

	* include/sys/device.h: Added a new driver type IFTYP_FS.

	* dev/npl.c, conf/dev/dev.nut, include/dev/npl.h: Nut
	Programmable Logic Device added, which supports the CPLD
	implementation of the Ethernut 3 design.

	* conf/dev/dev.nut: New options added for CY2239x support.

	* dev/cy2239x.c, include/dev/cy2239x.h: Several new functions
	added to query and modify the clock settings.

	* conf/ethernut30d.conf: New default values added for
	the PLL clock chip. Option NUT_CPU_FREQ removed.

	* arch/arm/dev/ostimer_at91.c, include/cfg/clock.h:
	Added support for CY22393 programmable clock chip.

	* arch/arm/dev/debug_at91.c, arch/arm/dev/usart0at91.c,
	arch/arm/dev/usart1at91.c, include/arch/arm/at91.h:
	Baudrate calculation is now based on NutGetCpuClock().
	The AT91_US_BAUD macro had been marked deprecated.

	* dev/ihndlr.c, include/dev/irqreg.h: NutIrqSetPriority() didn't
	correctly return the previous priority. This bug has been fixed.
	New function NutIrqSetMode() allows to modify the interrupt
	mode.

	* arch/arm/dev/ih_at91irq0.c: Implemented configuration of edge
	and level trigger modes.

	* conf/arch/arch.nut: ATmega2561 CPU added, but not yet supported.

	* conf/repository.nut: Added choices for PLL clock.

	* doc/gen/nutdoc_en.txt: File system docs added. NPL docs added.


2005-12-22  Matthias Ringwald  <mringwal@inf.ethz.ch>
        * include/sys/mutex.h: added missing prototype for NutMutexDestroy.

2005-12-06 Henrik Maier  <hwmaier@users.sourceforge.net>

        * arch/avr/dev/ivect09.c, arch/avr/dev/ivect11.c, arch/avr/dev/ivect15.c,
        arch/avr/dev/ivect24.c, arch/avr/dev/ivect25.c, arch/avr/dev/ivect26.c,
        arch/avr/dev/ivect27.c, arch/avr/dev/ivect28.c, arch/avr/dev/ivect29.c:
        Changes to make register and flag names compatible with AT90CAN128 MCU.


2005-12-02  Harald Kipp  <harald.kipp@egnite.de>

	* os/version.c: Release 4.0 scheduled.


2005-11-25  Harald Kipp  <harald.kipp@egnite.de>

	* app/Makeburn.arm-jom: Programming template for ARM using
	jtag-o-mat.


2005-11-24  Harald Kipp  <harald.kipp@egnite.de>

	* configure.ac: Linker flags -lm and -ldl needed by lualib are
	not automatically applied by configure. Checks added. This
	and the following two patches had been kindly contributed
	by Torben Mikael Hansen.

	* pro/wins.c: Function definition for toupper in conflicts
	with GCC 4.0.2. Changed u_char types to int.

	* tools/nutconf/appoptdlg.cpp, tools/nutconf/bldoptdlg.cpp,
	tools/nutconf/configitem.cpp, tools/nutconf/mainframe.cpp,
	tools/nutconf/nutconf.cpp, tools/nutconf/nutconfdoc.cpp,
	tools/nutconf/propertylist.cpp, tools/nutconf/settings.cpp,
	tools/nutconf/settingsdlg.cpp: wxWidget failed to built with
	unicode support, which results in a number of compile errors.
	Fixed.

	* arch/avr/dev/ace.c, arch/avr/dev/tlc16c550.c,
	include/dev/ace.h, include/dev/tlc16c550.h,
	nut/conf/arch/avr.nut: Added driver for external 16550 UART.
	Initially contributed by William Basser and later enhanced by
	Przemyslaw Rudy. Only available for ATmega128 and GCC.


2005-11-22  Harald Kipp  <harald.kipp@egnite.de>

	* app/httpd/httpserv.c, app/inetq/inetq.c,
	app/logtime/logtime.c, app/logtime/logtime.c,
	app/rs232d/rs232d.c, app/tcps/tcps.c, app/uart/uart.c:
	Replaced specific device names by generalized macros.

	* app/logtime/Makefile: Added missing library nutarch.

	* app/portdio/Makefile: Library list re-ordered.

	* app/portdio/portdio.c: Replaced specific device names by
	generalized macros. Casting size_t to int to avoid compiler
	warnings about printf format specifiers. Excluded hardware
	specific statements for non-AVR targets. This way it will
	not work on other targets, but at least compile without
	error.

	* app/threads/threads.c, app/timers/timers.c: Replaced
	specific device names by generalized macros. Thread stack
	size increased to get it running on ARM CPUs.

	* conf/ethernut30d.conf: By default applications are
	loaded in RAM.

	* conf/wolf.conf: PLATFORM variable added.

	* include/dev/board.h: Include condition corrected.

	* tools/nutconf/nutcomponent.c: Prepending ../.. to a
	relative top_blddir path broke my test configuration.
	Can't think of any reason, why relative paths are modified.
	If there is one, sorry for breaking your configuration.

	* conf/arch/avr.nut: ICCAVR 7.03C Beta2 fixes the compile
	problem. I've enabled AHDLC and the old UART driver again.


2005-11-20  Harald Kipp  <harald.kipp@egnite.de>

	* os/version.c: Version 4 release candidate is 3.9.9.1.

	* app/Makedefs.avr-icc: Command line compilation failed with
	ICCAVR V7. Fixed.

	* appicc/basemon/basemon.prj, appicc/ftpd/ftpd.prj,
	appicc/httpd/httpd.prj, appicc/inetq/inetq.prj,
	appicc/logtime/logtime.prj, appicc/nutpiper/nutpiper.prj,
	appicc/playmp3/playmp3.prj, appicc/portdio/portdio.prj,
	appicc/pppc/pppc.prj, appicc/rs232d/rs232d.prj,
	appicc/simple/simple.prj, appicc/tcps/tcps.prj,
	appicc/threads/threads.prj, appicc/timers/timers.prj,
	appicc/uart/uart.prj: Architecture library added.

	* arch/arm/dev/usartat91.c, arch/arm/dev/usart0at91.c,
	arch/arm/dev/usart1at91.c, conf/arch/arm.nut,
	include/dev/usartat91.h: Interrupt driven UART driver for
	AT91 added.

	* conf/arch/avr.nut: AHDLC driver and deprecated AVR UART
	driver temporarely removed from ICCAVR build. Will look
	into this later.

	* conf/ethernut30d.conf: PLATFORM variable added.

	* include/arch/arm/at91.h: Register offsets added.

	* include/arch/arm.h: Compatibility macro printf_P added.

	* include/dev/dm9000e.h: All other Ethernet drivers include
	if_var header. Add it here too.

	* include/dev/board.h: New include file simplifies target
	independant applications. Right now devDebug, devEther and
	devUart are supported.


2005-11-03  Harald Kipp  <harald.kipp@egnite.de>

	* nut/appload/appload.c, nut/appload/Makedefs,
	nut/appload/Makefile, nut/appload/Makerules,
	nut/appload/appload.h, nut/appload/arp.c,
	nut/appload/debug.c, nut/appload/debug.h,
	nut/appload/dhcp.c, nut/appload/ether.c, nut/appload/ether.h,
	nut/appload/ip.c, nut/appload/tftp.c, nut/appload/types.h,
	nut/appload/config.c, nut/appload/config.h,
	nut/appload/start.S, nut/appload/utils.c,
	nut/appload/utils.h: Newer GCC versions change the
	order of routines within modules. This breaks our code,
	which depends on main() located at the very first
	beginning. To avoid these problems in the future, I
	created a specific startup file for the boot loader
	and moved the runtime initialization to this assembly
	language file.
	Another problem was, that new compiler versions created
	larger binaries, which didn't fit in 4 kBytes. I added
	some optimizations and removed a few inline specifiers.
	Finally I ended up with 4058 bytes.
	Also GCC spits out a deprecated warning on casted lvalues.
	I changed the prototype for DhcpSetOption(), but the
	warning remains for IpChkSum().
	Configurable EEPROM locations had been added and the
	previous inline assembly code had been replaced by pur
	C code. A new EEPROM configuration had been added to
	setup the TFTPD IP address and the name of the boot
	image without DHCP.
	Some global variables had been removed. The configuration
	structures are used instead.
	memcpy() and memset() clones had been added. Actually
	they didn't save that much space.
	The optional debug output is now done with macros to
	avoid all these #ifdefs within the code. A debug output
	routine for longs had been added.
	The TFTPD32 hack had been removed (disabled). Newer
	versions of Philippe Jounin doesn't require it anymore.
	Btw. appload had been tested with TFTPD32 2.80.
	In general the code had been seperated in additional
	modules.

	* nut/appload/confnet.h: Replaced with config.h.


2005-10-24  Harald Kipp  <harald.kipp@egnite.de>

	* arch/arm/dev/debug_gba.c, arch/arm/dev/ihndlr_gba.c,
	arch/arm/dev/ostimer_gba.c, arch/arm/dev/uartgba.c:
	Include arm.h instead of gba.h.

	* arch/avr/dev/adc.c: REFSx flags for ADMUX are not available
	for ATmega103. I also moved local variable sleep_mode into
	the __AVR_ENHANCED__ block to avoid a warning with non-
	enhanced devices.

	* arch/avr/dev/ivect01.c, arch/avr/dev/ivect02.c,
	arch/avr/dev/ivect03.c, arch/avr/dev/ivect04.c:
	ATmega103 cannot modify interrupt sensitivity for the
	four high priority external interrupts.

	* arch/avr/dev/ivect05.c, arch/avr/dev/ivect06.c,
	arch/avr/dev/ivect07.c, arch/avr/dev/ivect08.c,
	arch/avr/dev/ivect18.c, arch/avr/dev/ivect19.c,
	arch/avr/dev/ivect20.c, arch/avr/dev/ivect21.c,
	arch/avr/dev/ivect23.c, arch/avr/dev/lanc111.c,
	arch/avr/dev/sja1000.c: Use generic port and flag names
	to allow compilation for ATmega103.

	* include/arch/arm.h: Header file for GameBoy added.

	* include/arch/avr/icc.h: Duplicate macro definitions removed
	and parameter order of cstrcmp() corrected. Thanks to Michael
	Fischer. Also added a few generic port and flag names.

	* nut/dev/ihndlr.c, include/dev/irqreg.h: New API functions
	NutIrqEnable(), NutIrqDisable() and NutIrqSetPriority() added.
	Hopefully this will help to create platform independant drivers.
	Interrupt counter removed when NUT_PERFMON is undefined, which
	will speed up interrupt handling.

	* dev/cy2239x.c, include/dev/cy2239x.h: Simple support for
	Cypress CY22393/4/5 clock chips.

	* dev/twbbif.c: Bit banging two wire interface (I2C).

	* arch/avr/dev/twif.c, include/dev/twif.h: Added const modifier
	to transmit data pointer in TwMasterTransact().

	* dev/x12rtc.c, include/dev/x12rtc.h: RTC and EEPROM routines
	for the Intersil/Xicor X1226 and X1286 real time clock chips.

	* arch/arm/init/crtat91_boot.S, arch/arm/init/crtat91_ram.S,
	arch/arm/ldscripts/at91_boot.ld, arch/arm/ldscripts/at91_ram.ld:
	New startup files and linker scripts for AT91 apps stored in
	ROM (boot) or directly loaded into RAM.

	* arch/arm/dev/ih_at91fiq.c, arch/arm/dev/ih_at91irq0.c,
	arch/arm/dev/ih_at91irq1.c, arch/arm/dev/ih_at91irq2.c,
	arch/arm/dev/ih_at91pio.c, arch/arm/dev/ih_at91swirq.c,
	arch/arm/dev/ih_at91tc0.c, arch/arm/dev/ih_at91tc1.c,
	arch/arm/dev/ih_at91tc2.c, arch/arm/dev/ih_at91uart0.c,
	arch/arm/dev/ih_at91uart1.c, arch/arm/dev/ih_at91wdi.c,
	conf/arch/arm.nut, include/arch/arm/irqreg.h:
	New AT91 interrupt handler routines.

	* arch/arm/dev/dm9000e.c, include/dev/dm9000e.h,
	conf/arch/arm.nut: New Ethernet driver for Ethernut 3 board.

	* arch/arm/os/context.c: Switch frame reduced and NutThreadEntry
	included in the execution path. The 'cc' globber had been
	removed from the context switching asm macro, after Michael
	Fischer found out that this fixes a problem with optimized
	compilation. Unfortunately, compiler optimized binaries
	still seem to run unreliable.

	* arch/arm/os/nutinit.c: Default idle thread stack size
	increased from 384 to 512 bytes. Default main thread stack
	size increased from 768 to 1024.

	* arch/arm/dev/ostimer_at91.c, arch/arm/dev/ostimer_s3c4510b.c,
	arch/arm/os/nutinit.c, include/arch/arm/at91.h,
	include/arch/arm/at91eb40a.h, include/arch/arm/gba.h:
	Moved family specific header files to arch subdirectory.

	* include/arch/arm.h: Port I/O macros added.

	* arch/arm/dev/ostimer_at91.c: New IRQ API added to allow
	platform independant interrupt configuration.

	* arch/arm/dev/debug_at91.c: Now uses AT91 header and enables
	both USARTs.

	* conf/repository.nut, conf/tools.nut: New linker scripts added for
	AT91 apps running in RAM and ROM.

	* conf/ethernut30d.conf: New configuration file for Ethernut 3.

	* arch/avr/dev/ivect01.c, arch/avr/dev/ivect02.c,
	arch/avr/dev/ivect03.c, arch/avr/dev/ivect04.c,
	arch/avr/dev/ivect05.c, arch/avr/dev/ivect06.c,
	arch/avr/dev/ivect07.c, arch/avr/dev/ivect08.c,
	arch/avr/dev/ivect09.c, arch/avr/dev/ivect10.c,
	arch/avr/dev/ivect11.c, arch/avr/dev/ivect12.c,
	arch/avr/dev/ivect13.c, arch/avr/dev/ivect14.c,
	arch/avr/dev/ivect15.c, arch/avr/dev/ivect16.c,
	arch/avr/dev/ivect17.c, arch/avr/dev/ivect18.c,
	arch/avr/dev/ivect19.c, arch/avr/dev/ivect20.c,
	arch/avr/dev/ivect21.c, arch/avr/dev/ivect22.c,
	arch/avr/dev/ivect23.c, arch/avr/dev/ivect24.c,
	arch/avr/dev/ivect25.c, arch/avr/dev/ivect26.c,
	arch/avr/dev/ivect27.c, arch/avr/dev/ivect28.c,
	arch/avr/dev/ivect29.c, arch/avr/dev/ivect30.c,
	arch/avr/dev/ivect31.c, arch/avr/dev/ivect32.c,
	arch/avr/dev/ivect33.c, arch/avr/dev/ivect34.c,
	arch/avr/dev/ivect35.c, arch/avr/dev/ivect36.c:
	New interrupt control function added, which should allow platform
	independant drivers in the future.

	* include/arch/avr.h, include/arch/avr/gcc.h, include/arch/avr/icc.h:
	Compiler specific definitions moved from avr.h to new header files
	avr/icc.h and avr/gcc.h.

	* conf/os/os.nut: Generalized description for NUT_CPU_FREQ.

	* conf/arch/avr.nut: NUT_CPU_FREQ option removed. This is
	handled in os.nut.

	* crt/fwrite.c, net/tcpsock.c, pro/httpd.c: Integer division hack
	for ARM without CRT removed.

	* doc/gen/nutdoc_en.txt: Documented AT91 support.


2005-10-21 Ole Reinhardt <ole.reinhardt@embedded-it.de>
	* nutsetup
	Added some new configuration parameters to nutsetup and made
	necessary additions to support at90can128 cpu


2005-10-19 Henrik Maier  <hwmaier@users.sourceforge.net>

        * arch/h8300/dev/scih8.c: Changed doxygen group to xgUartH8 so it doesn't
        overload arch/avr/dev/usartavr.c's documentation


2005-10-17 Ole Reinhardt <ole.reinhardt@embedded-it.de>
	* arch/Makefile
	Added compilation of atcan.c if MCU=at90can128 is set


2005-10-17 Henrik Maier  <hwmaier@users.sourceforge.net>

	* arch/avr/dev/debug0.c, arch/avr/dev/debug1.c:
        Setting baudrate function changed: For CPUs w/ 12 and 16 MHz xtal
        double rate mode is now used (only if set by NUT_CPU_FREQ).

        * arch/avr/dev/uartavr.c: Fixed compilation issue regards U2X
        macro with Imagecraft.

        * nutinit.c: All platform specific initialisation (CPLD, IO pins etc.)
        has been consolidated using the new PLATFORM macro into a new function
        called NutCustomInit().

        * app/httpd/httpserv.c: Removed unreferenced nutconfig.h include statement

        * app/pppc/pppc.c: Commented out unreferenced include statement hd44780.h

        * app/basemon/basemon.c: TestPorts() only executed for Ethernut 1/2
        boards. Other platforms/boards will use I/O ports differently and
        executing TestPorts will then fail or even cause damage.
        Due to basemon's special init routine, AT90CAN128 CPUs can at this
        stage not be supported by basemon without major changes. Hence we
        introduced an error message if compiled for this CPU.

        * apps/basemon/uart.c: Added 9600 baudrate setting for 12 MHz boards


2005-10-08 Henrik Maier  <hwmaier@users.sourceforge.net>

        * uartavr.c, uartavr.h: Obsolete dcb_baudSelect removed.

        * uartavr.c: Support for double speed (U2X) added
        (using same method as in usartavr.c)

        * arch/avr/dev/debug1.c, arch/avr/dev/twi.c, sys/thread.h,
        arch/avr/dev/usartavr.c, arch/avr/dev/usart1avr.c:
        Using __AVR_ENHANCED__ macro instead of __AVR_ATmega128__ to
        support also AT90CAN128 MCU

        * include/dev/sja1000.h, include/dev/can_dev.h: include/dev/atcan.h:
        Moved CAN baudrate constants to can_dev.h as they are now considered
        generic across different CAN hardware.
        CAN_SPEED_MANUAL renamed to CAN_SPEED_CUSTOM.

        * dev/can_dev.c, include/dev/can_dev.h: CAN_SetSpeed function added.

        * tools/nutconf/nutcomponent.c, tools/nutconf/nutcomponent.h,
        tools/nutconf/nutconfdoc.cpp: Changed method for inclusion of
        header files for the samples; previous method did not add
        the build dir path correctly and potentially wrong header files
        were included. Added bld_dir parameter to CreateSampleDirectory.

        * tools/nutconf/nutcomponent.c: Changed LoadComponents to parse
        options in root level. Removed generation of -DETHERNUT2 entry
        for UserConf.mk as this can now accomplished by the PLATFORM macro.

        * arch/avr/include/irqreg.h, include/dev/irqreg_avr.h:
        Removed test for __ATmega64__

        * conf.arch.nut: Changed HWDEF= to HWDEF+= so more defs can be added
        to this macros from other LUA scripts.

        * conf/repository.nut: Added support for PLATFORM macro (Requires
        new nutconf executable w/ above changes applied)

        * ethernut*.conf, charon2.conf, arthernut1.conf, mmnet02.conf,
        stk501.conf: PLATFORM entry added (Requires new nutconf executable
        w/ above changes applied)


2005-10-04 Henrik Maier  <hwmaier@users.sourceforge.net>

        * arch/avr/dev/atcan.c, include/dev/atcan.h: Added AT90CAN128 CAN
        driver

        * ivect35.c, ivect36.c: Updated interrupt hooks to reflect
        new CAN interrupt names of avr-lib 1.2.3.

        * include/arch/avr.h: Added TIFR definition for AT90CAN128.

        * os/thread.c: NutThreadDestroy calls NutStackFree instead
        NutHeapFree if NUTMEM_STACKHEAP is defined. This solution is
        considered a temporary measure until a better approach has been
        found, but for now it helps to run Nut/OS on an AT90CAN128 MCU
        which can only use internal memory for stack.

        * arch/avr/os/context_gcc.c, arch/avr/os/context_icc.c: NutThreadCreate
        calls NutStackAlloc instead of NutHeapAlloc if NUTMEM_STACKHEAP is
        defined.

        * arch/avr/os/nutinit.c: NutInitHeap calls NutStackAdd if
        NUTMEM_STACKHEAP is defined.

       * net/confnet.c: Removed preprocessor warning message for AT90CAN128 MCU
       as this device is now supported by avr-libc.

       * conf/dev/dev.nut, conf/arch/arch.nut, conf/arch/avr.nut: Added CAN
       driver for AT90CAN128

       * conf/os.nut: Added support for separating stack and conventional
       heap as required by AT09CAN128 MCUs

       * app/Makedefs.avr-gcc: Added support for relocating the data segment


2005-09-21  Christian Welzel <christian.welzel@welzel-online.ch>

    * tools/nutconf/iconlist.cpp, tools/nutconf/mainframe.cpp,
      tools/nutconf/nutconfview.cpp
    Replaced deprecated commands with newer ones.

2005-09-17  Oliver Schulz  <olischulz@web.de>

	* arch/avr/dev/irqstack.c: More program space saving implementation and
	moved from dev because it is avr platform specific.

	* include/dev/irqstack.h: More program space saving implementation.

	* conf/arch/avr.nut: Added irqstack.c to platform dependend sources.

	* dev/Makefile, arch/Makefile: Adjusted b/c of moved file irqstack.c.


2005-09-08  Ole Reinhardt <ole.reinhardt@embedded-it.de>
        * fs/pnutfs.c
        Added #ifdef statement in NutSegBufEnable to avoid compiler warning
	if no banked mem is used.

2005-09-07  Christian Welzel <christian.welzel@welzel-online.ch>

    * conf/MMnet02.conf
    Added configuration file for MMnet02

    * include/sys/bankmem.h
    Added banking support for MMnet02

    * arch/avr/os/nutinit.c
    Added MMnet02 CPLD initialization

    * arch/avr/dev/hd44780_bus.c
    Added support for MMnet02 display

    * fs/pnutfs.c
    Added support for MMnet02. Bankswitching is now handled in bankmem.h

    * tools/nutconf/nutcomponent.c
    Changed handling of default parameters. Nutconf now creates all default
    parameter defines within header files.

2005-08-26  Ole Reinhardt <ole.reinhardt@embedded-it.de>
        * pro/httpd.c, include/pro/httpd.h:
        added NutHttpProcessPostQuery(FILE *stream, REQUEST * req)

2005-08-25  Ole Reinhardt <ole.reinhardt@embedded-it.de>
        * arch/avr/dev/adc.c: Removed compute intensive % and replaced by an &

2005-08-19  Matthias Ringwald  <mringwal@inf.ethz.ch>
        * arch/avr/dev/adc.c: used 8-bit tail and head pointers. by this,
        the critical section is not necessary anymore.

2005-08-18  Christian Welzel <christian.welzel@welzel-online.ch>
        * os/event.c, arch/avr/os/context_gcc.c
        Fixed bug in handling of NUTDEBUG.

2005-08-14  Christian Welzel <christian.welzel@welzel-online.ch>
        * tools/nutconf/nutconfdoc.cpp
        Corrected wxLogMessages to avoid compiler warnings.

2005-08-10  Ole Reinhardt <ole.reinhardt@embedded-it.de>
        * pro/asp.c
        Corrected documentation

2005-08-05  Ole Reinhardt <ole.reinhardt@embedded-it.de>

        * crt/Makefile, crt/seek.c, crt/tell.c, crt/fseek.c, crt/ftell.c
          include/io.h
        Added support for _seek, _tell, fseek, ftell functions
        * include/stdio.h
        Added defines: SEEK_SET, SEEK_CUR, SEEK_END
        * fs/uromfs.c
        Added IOCTL function with support for seek
        * include/fs/fs.h
        Corrected typo
        * conf/crt/crt.nut
        Added seek.c, tell.c
        * pro/asp.c, pro/ssi.c, pro/httpd.c, pro/Makefile,
          include/pro/httpd.h, include/pro/asp.h, include/pro/ssi.h
        Added support to register a custom handler for mime types.
        Added Server side include support and ASP support.
        * conf/pro/pro.nut
        Added asp.c, ssi.c
        * app/httpd/httpserv.c, app/httpd/sample/index.html,
          app/httpd/sample/asp.asp, app/httpd/sample/ssi.shtml,
          app/httpd/sample/include.inc
        Added SSI and ASP sample


2005-08-03  Matthias Ringwald  <mringwal@inf.ethz.ch>

        * os/timer.c: made nut_tick public

2005-08-02  Harald Kipp  <harald.kipp@egnite.de>

	* doc/gen/nutdoc_en.txt: Major API documentation update.
	This also includes the modification of a large number of
	source files. But only comment lines had been updated.
	No code has been changed.

	* doc/gen/nut_en.cfg.in: Added new items for Doxygen 1.4.4.
	Event example and arch directory included.


2005-07-26  Harald Kipp  <harald.kipp@egnite.de>

	* conf/arch/arch.nut: All target dependent code is has been
	moved to a new library named libnutarch. This will break
	all existing application Makefiles.

	* lib/Makefile: Include new libnutarch into the build.

	* include/arch/arm/atom.h, include/arch/avr/atom.h,
	include/arch/h8300h/atom.h, include/arch/m68k/atom.h:
	AtomicInc() and AtomicDec() had been removed. This may break
	existing applications but simplifies portability.

	* include/dev/irqreg.h: Several files were moved from dev
	to arch.

	* include/dev/term.h: Avoid redefinition of TIOCGWINSZ and
	TIOCSWINSZ on Linux.

	* include/sys/confos.h: Avoid redefinition of CONFOS_EE_OFFSET.

	* include/arch/unix.h, include/compiler.h, include/dev/debug.h,
	include/dev/uartavr.h, include/dev/usartavr.h, include/errno.h,
	include/netdb.h, include/netinet/in.h, include/stdio.h,
	include/sys/atom.h, include/sys/nut_types.h,
	include/sys/socket.h, include/sys/thread.h, include/sys/types.h,
	net/confnet.c, os/confos.c, os/heap.c, os/osdebug.c:
	Cygwin added.

	* os/nutinit.c: Cygwin added. EEPROM support moved from os to
	dev.

	* os/thread.c: Cygwin added. The platform dependent part is
	now located in context.c in arch.

	* os/timer.c: Cygwin added. The platform dependent part is
	now located in ostimer.c in arch.

	* include/sys/timer.h: Hardware dependent timer functions
	moved to arch.

	* conf/arch/arm.nut, conf/arch/avr.nut, conf/arch/h8300h.nut,
	conf/arch/m68k.nut, conf/arch/unix.nut: Now each platform
	gets its own script.

	* conf/dev/dev.nut: Target dependent modules moved to arch.

	* conf/os/os.nut: Target dependent modules moved to arch.

	* nut/conf/repository.nut: Renamed "Target" to "Architecture".

	* conf/gbaxport2.conf: Main and idle stack size reduced
	to 1024. Now we use the C library provided by GNUARM.

	* arch/Makefile: Build new architecture library.

	* dev/Makefile: Target dependent modules moved to arch.

	* dev/ihndlr.c: Copyright added. Exclude NutRegisterIrqHandler()
	from Linux builds.

	* Makedefs.unix-gcc: Removed unused items and added INCPRE.

	* Makerules.unix-gcc: Added first and last include path,
	assembly rules and global clean rules.

	* app/Makedefs.unix-gcc: Added appdir and enabled list files.

	* app/Makerules.unix-gcc: Include original rules from top
	directory. Otherwise external application trees will not
	work.

	* app/basemon/Makefile, app/events/Makefile, app/ftpd/Makefile,
	app/httpd/Makefile, app/inetq/Makefile, app/nutpiper/Makefile,
	app/portdio/Makefile, app/pppc/Makefile, app/rs232d/Makefile,
	app/simple/Makefile, app/tcps/Makefile, app/threads/Makefile,
	app/timers/Makefile, app/uart/Makefile: Added nutarch library
	to the link list and cleaned it up where required.

	* arch/arm/init/crtgbaxport2.S: Changed from system to user
	mode for running Nut/OS.

	* arch/arm/os/nutinit.c: Use default stack sizes for main and
	idle if none had been defined.

	* arch/unix/os/nutinit.c: Add feature header for Cygwin.

	* include/cfg/arch/avrpio.h: Added missing SPIDIGIO_SIN_PORT
	and SPIDIGIO_SIN_DDR.

	* tools/nutconf/nutcomponent.c, tools/nutconf/nutcomponent.h:
	Version 1.2.3. Added new keyword "default" to specify default
	values. They will no longer appear in the conf files and we can
	remove the booldata flavor from most options. Bugfix: Options
	will now be recognized in all sublevels.

	* tools/nutconf/nutconf.h: Version 1.2.3.

	* tools/nutconf/nutconfdoc.cpp: Do not store default values.

	* app/Makedefs.avr-dude: Wrong name removed. It's Makeburn.

	* arch/arm/os/thread.c, arch/avr/os/thread.c: Moved to
	arch/(target)/os/context[_device].c.

	* arch/arm/os/timer.c, arch/avr/os/timer.c,
	arch/h8300h/os/timer.c, arch/m68k/os/timer.c,
	arch/unix/os/timer.c: Moved to arch/(target)/dev/ostimer.c.

	* arch/unix/os/eeprom.c: Moved to arch/unix/dev.

	* dev/irqreg.c: Previous platform distributor. No longer
	required.

	* dev/adc.c, dev/ahdlc0.c, dev/ahdlc1.c, dev/ahdlcavr.c,
	dev/cs8900.c, dev/cs8900.h, dev/debug0.c, dev/debug1.c,
	dev/eth0cs.c, dev/eth0rtl.c, dev/hd44780.c, dev/hd44780_bus.c,
	dev/ide.c, dev/ir.c, dev/irsony.c, dev/ivect01.c, dev/ivect02.c,
	dev/ivect03.c, dev/ivect04.c, dev/ivect05.c, dev/ivect06.c,
	dev/ivect07.c, dev/ivect08.c, dev/ivect09.c, dev/ivect10.c,
	dev/ivect11.c, dev/ivect12.c, dev/ivect13.c, dev/ivect14.c,
	dev/ivect15.c, dev/ivect16.c, dev/ivect17.c, dev/ivect18.c,
	dev/ivect19.c, dev/ivect20.c, dev/ivect21.c, dev/ivect22.c,
	dev/ivect23.c, dev/ivect24.c, dev/ivect25.c, dev/ivect26.c,
	dev/ivect27.c, dev/ivect28.c, dev/ivect29.c, dev/ivect30.c,
	dev/ivect31.c, dev/ivect32.c, dev/ivect33.c, dev/ivect34.c,
	dev/ivect35.c, dev/ivect36.c, dev/lanc111.c, dev/nicrtl.c,
	dev/pcmcia.c, dev/rtlregs.h, dev/sja1000.c, dev/spidigio.c,
	dev/spiflash.c, dev/twif.c, dev/uart0.c, dev/uart1.c,
	dev/uartavr.c, dev/usart0avr.c, dev/usart1avr.c, dev/usartavr.c,
	dev/vs1001k.c, dev/wlan.c, dev/wlandrv.c: Moved to arch/avr/dev.

	* dev/arm_irqreg.c, dev/ax88796.c, dev/reg_ax88796.h,
	dev/debug_at91.c, dev/debug_gba.c, dev/gba_irqreg.c,
	dev/uartgba.c: Moved to arch/arm/dev.

	* dev/h8_irqreg.c, dev/mweeprom.c, dev/nicrtl_h8.c,
	dev/s3c4510b_console.c, dev/s3c4510b_irqreg.c,
	dev/uart_s3c4510b_dbg.c, dev/scih8.c, dev/scih8dbg.c,
	dev/scih8devs.c: Moved to arch/h8300h/dev.

	* dev/m68k_irqreg.c: Moved to arch/m68k/dev/ihndlr.c.

	* dev/unix_devs.c: Moved to arch/unix/dev.

	* arch/arm/dev/ax88796.c, arch/arm/dev/debug_at91.c,
	arch/arm/dev/debug_gba.c, arch/arm/dev/ihndlr_gba.c,
	arch/arm/dev/ostimer_at91.c, arch/arm/dev/ostimer_gba.c,
	arch/arm/dev/ostimer_s3c4510b.c, arch/arm/dev/reg_ax88796.h,
	arch/arm/dev/uartgba.c: Moved from dev.

	* arch/avr/dev/adc.c, arch/avr/dev/ahdlc0.c,
	arch/avr/dev/ahdlc1.c, arch/avr/dev/ahdlcavr.c,
	arch/avr/dev/cs8900.c, arch/avr/dev/cs8900.h,
	arch/avr/dev/debug0.c, arch/avr/dev/debug1.c,
	arch/avr/dev/eth0cs.c, arch/avr/dev/eth0rtl.c,
	arch/avr/dev/hd44780.c, arch/avr/dev/hd44780_bus.c,
	arch/avr/dev/ide.c, arch/avr/dev/ir.c,
	arch/avr/dev/irsony.c, arch/avr/dev/ivect01.c,
	arch/avr/dev/ivect02.c, arch/avr/dev/ivect03.c,
	arch/avr/dev/ivect04.c, arch/avr/dev/ivect05.c,
	arch/avr/dev/ivect06.c, arch/avr/dev/ivect07.c,
	arch/avr/dev/ivect08.c, arch/avr/dev/ivect09.c,
	arch/avr/dev/ivect10.c, arch/avr/dev/ivect11.c,
	arch/avr/dev/ivect12.c, arch/avr/dev/ivect13.c,
	arch/avr/dev/ivect14.c, arch/avr/dev/ivect15.c,
	arch/avr/dev/ivect16.c, arch/avr/dev/ivect17.c,
	arch/avr/dev/ivect18.c, arch/avr/dev/ivect19.c,
	arch/avr/dev/ivect20.c, arch/avr/dev/ivect21.c,
	arch/avr/dev/ivect22.c, arch/avr/dev/ivect23.c,
	arch/avr/dev/ivect24.c, arch/avr/dev/ivect25.c,
	arch/avr/dev/ivect26.c, arch/avr/dev/ivect27.c,
	arch/avr/dev/ivect28.c, arch/avr/dev/ivect29.c,
	arch/avr/dev/ivect30.c, arch/avr/dev/ivect31.c,
	arch/avr/dev/ivect32.c, arch/avr/dev/ivect33.c,
	arch/avr/dev/ivect34.c, arch/avr/dev/ivect35.c,
	arch/avr/dev/ivect36.c, arch/avr/dev/lanc111.c,
	arch/avr/dev/nicrtl.c, arch/avr/dev/ostimer.c,
	arch/avr/dev/pcmcia.c, arch/avr/dev/rtlregs.h,
	arch/avr/dev/sja1000.c, arch/avr/dev/spidigio.c,
	arch/avr/dev/spiflash.c, arch/avr/dev/twif.c,
	arch/avr/dev/uart0.c, arch/avr/dev/uart1.c,
	arch/avr/dev/uartavr.c, arch/avr/dev/usart0avr.c,
	arch/avr/dev/usart1avr.c, arch/avr/dev/usartavr.c,
	arch/avr/dev/vs1001k.c, arch/avr/dev/wlan.c,
	arch/avr/dev/wlandrv.c: Moved from dev.

	* arch/h8300h/dev/ihndlr.c, arch/h8300h/dev/mweeprom.c,
	arch/h8300h/dev/nicrtl.c, arch/h8300h/dev/ostimer.c,
	arch/h8300h/dev/s3c4510b_console.c,
	arch/h8300h/dev/s3c4510b_irqreg.c,
	arch/h8300h/dev/scih8.c, arch/h8300h/dev/scih8dbg.c,
	arch/h8300h/dev/scih8devs.c, arch/h8300h/dev/uart_s3c4510b_dbg.c:
	Moved from dev.

	* arch/m68k/dev/ihndlr.c, arch/m68k/dev/ostimer.c:
	Moved from dev.

	* arch/unix/dev/eeprom.c, arch/unix/dev/ostimer.c,
	arch/unix/dev/unix_devs.c: Moved from dev.

	* arch/arm/os/context.c, arch/avr/os/context_gcc.c,
	arch/avr/os/context_icc.c: moved from os/thread.c.

	* include/arch/arm/irqreg.h, include/arch/arm/timer.h,
	include/arch/avr/irqreg.h, include/arch/avr/timer.h,
	include/arch/h8300h/irqreg.h, include/arch/m68k/irqreg.h,
	include/arch/unix/irqreg.h, include/arch/unix/timer.h,
	include/arch/timer.h: Architecture dependent header files added.


2005-07-23  Harald Kipp  <harald.kipp@egnite.de>

	* app/Makefile, app/events/events.c, app/events/Makefile:
	New sample demonstrates event queue handling.

	* net/route.c: Removed unnecessary critical sections and atomic
	inc-/decrements. Fixed a bug in NutIpRouteList(), which filled
	the first entry only. Corrected the comment about unavailabilty
	of removing routes.


2005-07-22  Harald Kipp  <harald.kipp@egnite.de>

	* tools/nutconf/ids.h: Toolbar menu added.

	* tools/nutconf/mainframe.cpp: Added selectable toolbar button
	sizes. Toolbar menu added. Additional toolbar buttons added
	for building, searching and help. Searching not yet implemented.
	Online help added.

	* tools/nutconf/mainframe.h, tools/nutconf/nutconf.rc:
	Accordingly updated.

	* tools/nutconf/nutconf.cpp: Online help added and Copyright
	years updated.

	* tools/nutconf/bitmaps/buildlibrary.xpm,
	tools/nutconf/bitmaps/buildlibrary_large.bmp,
	tools/nutconf/bitmaps/buildlibrary_large.xpm,
	tools/nutconf/bitmaps/help.xpm,
	tools/nutconf/bitmaps/help_large.bmp,
	tools/nutconf/bitmaps/help_large.xpm,
	tools/nutconf/bitmaps/library.xpm,
	tools/nutconf/bitmaps/library_dis.xpm,
	tools/nutconf/bitmaps/nutconf.xpm,
	tools/nutconf/bitmaps/open_large.bmp,
	tools/nutconf/bitmaps/open_large.xpm,
	tools/nutconf/bitmaps/save_large.bmp,
	tools/nutconf/bitmaps/save_large.xpm,
	tools/nutconf/bitmaps/search.xpm,
	tools/nutconf/bitmaps/search_large.bmp,
	tools/nutconf/bitmaps/search_large.xpm:
	New artwork added.

	* tools/nutconf/bitmaps/application.xpm,
	tools/nutconf/bitmaps/buildlibrary.bmp,
	tools/nutconf/bitmaps/closedfolder.ico,
	tools/nutconf/bitmaps/help.bmp,
	tools/nutconf/bitmaps/library.ico,
	tools/nutconf/bitmaps/library_dis.ico,
	tools/nutconf/bitmaps/module.ico,
	tools/nutconf/bitmaps/module.xpm,
	tools/nutconf/bitmaps/module_dis.ico,
	tools/nutconf/bitmaps/module_dis.xpm,
	tools/nutconf/bitmaps/nutconf.ico,
	tools/nutconf/bitmaps/open.bmp,
	tools/nutconf/bitmaps/open.xpm,
	tools/nutconf/bitmaps/save.bmp,
	tools/nutconf/bitmaps/save.xpm,
	tools/nutconf/bitmaps/search.bmp:
	Artwork updated.


2005-07-22  Matthias Ringwald  <mringwal@inf.ethz.ch>

    * dev/usartavr.c, dev/usart0avr.c, dev/usart1avr.c: added experimental
    improvements to usart driver. they are off by defaut. to enable them define:
    - USE_USART[0|1] to bypass Nut/OS IRQ handler
    - UART[0|1]_READMULTIBYTE to allow IRQ handler to read all bytes from RX FIFO
    - UART[0|1]_NO_SW_FLOWCONTROL to bypass software flowcontrol code

2005-07-21  Matthias Ringwald  <mringwal@inf.ethz.ch>

    * os/event.c: inlined NutEventPostFromIrq call in NutEventPostAsync to reduce CS

    * os/timer.c: rewrote timer handling. timer interrupt handler only update nut_ticks,
    NutTimerProcessElapsed uses diff to last execution to update timers accordingly.
    Calls to NutEnableTimerIrq and NutDisableTimerIrq removed.

2005-07-20  Ole Reinhardt <ole.reinhardt@embedded-it.de>
        * arch/unix/os/nutinit.c, include/arch/unix.h
        added saved_termios to emulation_options. On startup the terminal
        state will be saved and restored on exit by ctrl-c

2005-07-20  Harald Kipp  <harald.kipp@egnite.de>

	* configure.ac, os/version.c: Preparing new release 3.9.8.

	* app/Makedefs.arm-gcc: Use standard libraries provided by GNUARM.

	* arch/arm/ldscripts/wolf_ram.ld: Startup name corrected.

	* arch/arm/os/timer.c: Default NUT_CPU_FREQ and NUT_TICK_FREQ
	added. NutTimerIntr() removed, because we can use the hardware
	independent code.

	* conf/c/c.nut, conf/c/stdlib.nut, conf/c/string.nut: Lua
	scripts divided.

	* os/event.c: I'd have prefered to use malloc() and free()
	instead of NutHeapAlloc() and NutHeapFree() in the kernel.
	But sometimes this creates complicated dependencies. To
	avoid these, let's stick with native Nut/OS heap routines.

	* os/timer.c: Dito.

	* tools/nutconf/mainframe.cpp, tools/nutconf/nutconf.rc:
	Set application icon.

	* tools/nutconf/nutcomponent.c: Added provision to subdivide
	modules. Several comment lines added.

	* tools/nutconf/nutcomponent.h: Comments added.

	* tools/nutconf/nutconf.cpp: Changed mime type handling to
	make it work on Linux.

	* tools/nutconf/nutconf.h: Preparing new release 1.2.2.

	* tools/nutconf/settings.cpp: Prepend current directory
	to the default file paths.

	* tools/nutconf/bitmaps/nutconf.bmp,
	tools/nutconf/bitmaps/nutconf.ico: New artwork, more to come...

2005-07-15  Matthias Ringwald  <mringwal@inf.ethz.ch>
    * os/timer.c: corrected NutGetMillis() calculation which did overflow
    after approx. 8390 seconds (= 140 minutes) and updated comments

2005-07-13  Matthias Ringwald  <mringwal@inf.ethz.ch>
    * arch/avr/os/thread.c: Rewrote CS in NutThreadCreate
    * os/thread.c: Rewrote CS in NutThreadSetPriority
    * dev/uartavr.c: Rewrote CS in UartAvrInput

2005-07-13  Matthias Ringwald  <mringwal@inf.ethz.ch>
    * os/event.c: Rewrote NutEventWait to gain short critical sections

2005-07-12  Ole Reinhardt <ole.reinhardt@embedded-it.de>
    * os/timer.c: Added NULL pointer check in NutTimerProcessElapsed

2005-07-12  Matthias Ringwald  <mringwal@inf.ethz.ch>
    * os/threads.c: Found and fixed this bug:
    http://permalink.gmane.org/gmane.comp.hardware.microcontrollers.ethernut/4023
    NutThreadWake changed readyQueue without critical section
    Improved docu on NutThreadRemoveQueue and NutThreadAddPriQueue
    Removed critical section from NutSleep

    * os/timer.c: extracted timer creation from NutTimerStartTicks into NutTimerCreate

    * os/event.c: added missing critical section in NutEventTimeout. It can
    cause the same problems as the missing CS in NutThreadWake for the same
    reason.
    Removed unnecessary critical sections in NutEventPost, NutEventWait.
    Reduced CS in NutEventWaitNext

    * os /osdebug.c: removed critical sections from various functions
    as thread and timer lists are not changed by IRQ anymore

2005-07-07  Matthias Ringwald  <mringwal@inf.ethz.ch>
    * os/timer.c: Stopped timers are removed by NutTimerProcessElapsed
    now. NutTimerStopAsync does not set tn_ticks to zero and relies
    on NutTimerProcessElapsed to do so when removing the stopped timer.
    This assures that a stopped timer is removed on next thread switch
    instead of staying in the nutTimerList until all previous timers
    are elapsed.

2005-06-22  Matthias Ringwald  <mringwal@inf.ethz.ch>
    * dev/null.c, include/dev/null.h: added /dev/null as devNull.
    write always returns len of bytes to write, read returns
    without read bytes and ioctl always returns ok.
    This can be used to discard output of printf statements.

2005-06-14  Matthias Ringwald  <mringwal@inf.ethz.ch>
 	* os/timer.c: Fixed NutTimerStopAsync(): it now removes
    callback ptr, which actually stops the timer

2005-06-13  Ole Reinhardt <ole.reinhardt@embedded-it.de>
 	* dev/adc.c: Removed unnecessary NutExitCritical

2005-06-12  Harald Kipp  <harald.kipp@egnite.de>

	* arch/avr/os/timer.c: Timer configuration registers and values
	are now specified by preprocessor macros. This avoids code
	contamination with preprocessor conditionals. A note has been
	added to the documentation of NutDelay(), saying, that this
	code may not work. The timer interrupt handler had been moved
	to the hardware independent code. A new function CountCpuLoops()
	has been added to count the number of loops from timer start
	to timer overflow. In opposite to the previous check in
	NutComputeCpuClock(), this new routine will not use interrupts
	and thus will not initialize the timer for system use. This
	is now done in another new function NutRegisterTimer(), which
	contains all hardware dependent initialization previously
	done by NutInit(). The latter had been moved to the hardware
	independent part. The nominal timer granularity for the AVR
	platform is now about one millisecond, even if NUT_CPU_FREQ has
	not been defined. Automatic calculation of the CPU clock will
	now also work for ICCAVR.

	* os/timer.c: The most significant change had been done to the
	timer interrupt handler. Elapsed timers are no longer removed
	from the list. Instead, the handler uses a pointer to the
	currently processed timer entry and simply steps up to the
	next entry after the currently processed timer elapsed. These
	elapsed entries are removed by the new NutTimerProcessElapsed(),
	which is called from NutThreadResume() before switching the
	context. This significantly reduces interrupt latency times,
	but adds a new possible problem. Some applications may run
	out of memory when starting and stopping too many timers
	within a short period. Furthermore, I removed all but one
	counter from interrupt update. Any previously value, which
	had been updated in interrupt context, is now derived from this
	remaining counter. Finally one change may break existing
	applications. Timer callbacks are not processed in interrupt
	context and will not provide the exact timing you may expect.
	We are working on this issue.

	* include/sys/timer.h: Added NutTimerProcessElapsed() prototype.

	* os/osdebug.c: References to nutTimerPool removed.

	* os/thread.c: Added a call to NutTimerProcessElapsed() in
	NutThreadResume(). This will remove elapsed timers from
	nutTimerList, which had been previously done in the interrupt
	handler.

	* arch/unix/os/timer.c: Added hardware mimic functions and
	removed interrupt routine, which should not be platform
	dependent. Haven't checked these changes. Hope I didn't
	break the Unix emulation.


2005-06-10  Harald Kipp  <harald.kipp@egnite.de>

	* configure.ac: Lua check failed because autoconf test needs
	additional libraries. Thanks to Tim Lapawa for this fix.


2005-04-19  Matthias Ringwald  <mringwal@inf.ethz.ch>

	* os/event.c: corrected NuEventBroadcastAsync documentation.
	NutEventBroadcast uses NutEventPostAsync which disables IRQs.


2005-06-06  Harald Kipp  <harald.kipp@egnite.de>

	* configure.ac, os/version.c: Emergency bugfix release 3.9.7.1.

	* app/Makedefs.avr-gcc: Use Vesa's workaround for applications
	too.

	* appload/appload.c: Replaced deprecated port access. Now
	compiles with latest avr-libc.

	* dev/hd44780.c: Fixed to re-enable ICCAVR compilation.

	* include/sys/atom.h: Failed with building outside the
	source tree. In addition all header files moved from
	arch/cpu/include to include/arch/cpu.


2005-06-05  Harald Kipp  <harald.kipp@egnite.de>

	* include/netinet/udp.h: NutUdpInput() prototype removed.
	It' already defined in include/sys/sock_var.h.

	* include/sys/sock_var.h: Added bcast parameter to
	NutUdpInput() prototype.

	* net/arpcache.c: MAX_ARPREQUESTS default changed from
	4 to 1. ARP retries should be handled by upper layers.

	* net/ipin.c: Broadcast flag is passed to NutUdpInput().
	I changed its type from u_char to ureg_t to better support
	16 and 32 bit platforms.

	* net/udpin.c: Added bcast parameter to NutUdpInput().
	Do not respond with ICMP unreachable to broadcasts. Fixes
	bug #1215192.

	* nutsetup: Added advice to the user to change to lib/
	before running make.


2005-05-27  Oliver Schulz  <olischulz@web.de>

	* include/sys/atom.h, os/thread.c, os/timer.c, os/nutinit.c: Platform dependant files were moved to /arch directory.


2005-05-27  Vesa Jaaskelainen  <chaac@.nic.fi>

	* dev/ahdlcavr.c: Fixed bugs on closing AHDLC sessions. Fixed
	AHDLC ioctl handling. Not all messages were handled correctly
	and fixed possible problem of reading memory from address zero.

2005-05-27  Ole Reinhardt <ole.reinhardt@embedded-it.de>
        * autogen.sh, cleansweep.sh
          Added
          autogen.sh: automaticaly call autoconf, automake, aclocal and...
          cleansweep.sh: automaticaly remove all the auto generated files

2005-05-27  Ole Reinhardt <ole.reinhardt@embedded-it.de>
	* conf/dev/dev.nut
          Added new Display sizes for hd44780 and hd44780_bus
          Ports used for display connection still need's to be added.
        * include/dev/hd44780.h, dev/hd44780.c
	  Added support for new display sizes configurable by macros
          LCD_4x20, LCD_4x16, LCD_2x40, LCD_2x20, LCD_2x16, LCD_2x8,
          LCD_1x20, LCD_1x16, LCD_1x8, KS0073_CONTROLLER (4x20))
          Also added support for different delay types.
          For not to wait busy too long, I added support for busy bit
          read back and use NutSleep instead NutDelay if NUT_CPU_FREQ
          is defined.
          These changes hopefully should not break any existing code
	* dev/hd44780_bus.c
          Added support for new display sizes configurable by macros
          LCD_4x20, LCD_4x16, LCD_2x40, LCD_2x20, LCD_2x16, LCD_2x8,
          LCD_1x20, LCD_1x16, LCD_1x8, KS0073_CONTROLLER (4x20))
	* include/cfg/m-can.h
	  Changed specs to new m-can board design (LCD controller)
	* dev/sja1000.c
          Fixed a bug in irq initialisation

2005-05-26  Oliver Schulz  <olischulz@web.de>

	* include/sys/atom.h: Moved all platform dependend code to
	include/arch/*_atom.h, added some descriptions.

	* include/arch/*_atom.h: Contains the code moved from atom.h

	* net/udpin.c: ICMP unreachable will be sent on incoming udp packets with no local peer port.


2005-05-26  Harald Kipp  <harald.kipp@egnite.de>

	* eboot/Makefile: Bootloader failed to compile because of
	missing NutConf.mk. This and the following two eboot patches
	had been contributed by David (Who?).

	* eboot/ether.c: Get MAC from EEPROM instead of using a
	default. Deprecated GCC port macros replaced.

	* eboot/tftp.c: Now the bootloader will program the space
	between 0x1E000 and 0x1EFFF.


2005-05-25  Harald Kipp  <harald.kipp@egnite.de>

	* os/version.c: Build number incremented for Win32 release.
	Suffix 'pre' removed. We will hopefully create V4 trunk soon.

	* appicc/ftpd/ftpd.prj, appicc/ftpd/FTPD.SRC: FTP server
	sample ICC project added.

	* appicc/logtime/logtime.prj, appicc/logtime/LOGTIME.SRC:
	syslog client sample ICC project added.

	* appicc/nutpiper/nutpiper.prj, appicc/nutpiper/NUTPIPER.SRC:
	Internet radio sample ICC project added.

	* appicc/playmp3/playmp3.prj, appicc/playmp3/PLAYMP3.SRC:
	MP3 sample ICC project added.

	* appicc/README, appicc/basemon/basemon.prj,
	appicc/httpd/httpd.prj, appicc/inetq/inetq.prj,
	appicc/portdio/portdio.prj, appicc/pppc/pppc.prj,
	appicc/rs232d/rs232d.prj, appicc/simple/simple.prj,
	appicc/tcps/tcps.prj, appicc/threads/threads.prj,
	appicc/timers/timers.prj, appicc/uart/uart.prj:
	ImageCraft projects updated for ICCAVR Version 7.


2005-05-24  Harald Kipp  <harald.kipp@egnite.de>

	* tools/nutconf/nutcomponent.c: Absolute application path for
	top_appdir pointed to source directory. Fixed.


2005-05-22  Harald Kipp  <harald.kipp@egnite.de>

	* os/version.c: Build number incremented, 3.9.6.2.

	* tools/crurom/dirent.h, tools/crurom/getopt.h,
	tools/nutconf/dirent.h, tools/nutconf/getopt.h: Moved to
	tools/include/win32. Fixes #1205835.

	* configure.ac: Added option to completely disable tool build.
	Check versions of Lua and wxWidgets.

	* tools/nutconf/Makefile.am: Lua libs are determined in
	configure.ac. Option to build no configuration tools.

	* tools/nutconf/splitscroll.cpp: Removed MacUpdateImmediately.
	Doesn't seem to be required anymore.


2005-05-16  Harald Kipp  <harald.kipp@egnite.de>

	* conf/arthernet1.conf: Configuration for Arthernet board.
	See www.ispf.de. This one and all the following extensions
	for Arthernet had been provided by Martin Thomas. The bad
	thing is, that Nut/OS isn't flexible enough to handle this
	different CPLD design and most of the patches cry for
	more general solutions. For now we go the pragmatic way to
	get Nut/OS running on this board.

	* fs/pnutfs.c, include/sys/bankmem.h: Added banking support
	for the Arthernet board.

	* os/arch/avr_nutinit.c: Different wait states for Arthernet.

	* os/arch/avr_timer.c: Alternative CPU clock detection for
	Arthernet added.

	* net/arpcache.c: Fixes #1202404. Thanks to Marek Pavlu and
	Dusan Ferbas.


2005-05-14  Vesa Jaaskelainen  <chaac@.nic.fi>

	* include/sys/atom.h: Entering a critical section should
	now be faster on AVR's when calling NutEnterCritical().

	* ChangeLog: Fixed my log entries to allow sf.net's file viewer
	to correctly colorize it.

2005-05-09  Vesa Jaaskelainen  <chaac@.nic.fi>

	* Makedefs.avr-gcc: Added workaround for too aggressive GCC
	optimizations. Now C and C++ compilers use flag
	-fno-delete-null-pointer-checks when compiling Nut/OS.

	* app/Makerules.avr-gcc: Make sure that no EEPROM section is
	written to .HEX file if eeprom sections are defined in source
	files. EEPROM sections should only be in .EEP files.

2005-04-30  Vesa Jaaskelainen  <chaac@.nic.fi>

	* app/pppc/pppc.c, app/tcps/tcps.c, dev/chat.c, dev/cs8900.c,
	dev/lanc111.c, dev/netbuf.c, dev/nicrtl.c, dev/nicrtl_h8.c,
	dev/ppp.c, include/dev/chat.h, mod/os/heap.c, net/arpcache.c,
	net/ifconfig.c, net/pppin.c, net/pppout.c, net/pppsm.c,
	net/route.c, net/tcpin.c, net/tcpout.c, net/tcpsm.c, net/tcpsock.c
	os/heap.c, os/arch/avr_thread.c, os/arch/h8_thread.c,
	os/arch/m68k_thread.c, os/arch/unix_thread.c, os/arch/unix_timer.c
	pro/resolv.c, pro/wins.c: Fixed bug in handling of NUTDEBUG. Added
	include for cfg/os.h. If NUTDEBUG is defined in NutConf, it will
	make effect where it is used.

2005-04-30  Vesa Jaaskelainen  <chaac@.nic.fi>

	* pro/httpd.c: Added support for parsing Content-Length field
	in HTTP requests.

2005-04-28  Harald Kipp  <harald.kipp@egnite.de>

	* configure.ac, Makefile.am, doc/Makefile.am,
	doc/gen/Makefile.am, tools/crurom/Makefile.am,
	tools/nutconf/Makefile.am: Support for autoconf/automake
	added. This is far from working perfect, but at least
	builds an installation on Fedora Core 3.

	* AUTHORS COPYING INSTALL NEWS: Standard distribution doc files
	added.

	* reconf: Helper script for package building added.

	* doc/gen/nut_en.cfg.in: Replaces nut_en.cfg, which is now
	created by autoconf.

	* tools/packaging/ethernut.spec.in: Replaces the previous
	rpm spec, which is now created by autoconf.

	* configure: This file stands in the way of autoconf and has
	been renamed to nutsetup. Hopefully the executable permission
	will now be preserved.

	* Makefile: This file stands in the way of automake and has
	been moved to the lib subdirectory. If you are building in the
	source tree, then you must cd to lib first before running make.

	* tools/crurom/crurom.c, tools/nutconf/nutcomponent.c:
	Include autoheader file.

	* nut/tools/nutconf/repoptdlg.cpp: No idea why OFN_HIDEREADONLY
	is undefined on Fedora. File dialog option removed.


2005-04-26  Harald Kipp  <harald.kipp@egnite.de>

	* tools/nutconf/enumeditctrl.cpp, tools/nutconf/enumeditctrl.h:
	Workaround for wxChoice focus bug on GTK+ added.

	* tools/nutconf/scrolledtree.cpp, tools/nutconf/valuewindow.cpp:
	Minor wxWidgets runtime warning avoided.


2005-04-25  Harald Kipp  <harald.kipp@egnite.de>

	* tools/nutconf/configtree.cpp: Compile fix for the new
	wxWidgets 2.6.0.


2005-04-22  Harald Kipp  <harald.kipp@egnite.de>

	* app/Makeburn.avr-dude: Support for avrdude, kindly provided by
	Martin Thomas.

	* tools/nutconf/nutcomponent.c, tools/nutconf/nutconf.h:
	Version 1.2.1 can now run without GUI or with wxWidgets 2.5.5.

	* tools/nutconf/appoptdlg.cpp, tools/nutconf/bldoptdlg.cpp,
	tools/nutconf/configitem.cpp, tools/nutconf/configtree.cpp,
	tools/nutconf/enumeditctrl.cpp, tools/nutconf/inteditctrl.cpp,
	tools/nutconf/mainframe.cpp, tools/nutconf/propertylist.cpp,
	tools/nutconf/repoptdlg.cpp, tools/nutconf/splitscroll.cpp,
	tools/nutconf/texteditctrl.cpp, tools/nutconf/treecomp.cpp,
	tools/nutconf/valuewindow.cp: Marked unused function parameters
	to avoid compiler warnings.

	* tools/nutconf/configitem.cpp, tools/nutconf/configtree.cpp,
	tools/nutconf/nutconf.cpp, tools/nutconf/nutconfdoc.cpp,
	tools/nutconf/repoptdlg.cpp, tools/nutconf/scrolledtree.cpp,
	tools/nutconf/splitscroll.cpp, tools/nutconf/treecomp.cpp,
	tools/nutconf/valuewindow.cpp: Upgraded to wxWidgets 2.5.5.
	Mainly replaced deprecated functions.

	* tools/nutconf/dirent.c, tools/nutconf/dirent.h,
	tools/nutconf/getopt.c, tools/nutconf/getopt.h:
	Files added to support non-GUI Configurator.

	* tools/nutconf/nutconfdoc.cpp: Added support for building
	ICCAVR applications in the sample tree.


2005-04-19  Matthias Ringwald <mringwal@inf.ethz.ch>

	* include/unistd.h: added #include <compiler.h> as the implicit
	ordering is not sufficient on our red hat machines. relevant
	to unix emulation.

2005-04-19  Harald Kipp  <harald.kipp@egnite.de>

	* app/ftpd/ftpserv.c: Compiler warning added, if target is not
	Ethernut 2.

	* app/inetq/inetq.c: More detailed description added.

	* app/tcps/tcps.c: Description updated.

	* app/timers/timers.c: Description updated and ARM support added.

	* crt/putf.c: Support for size_t modifier added. Thanks to Tom
	Lynn.


2005-04-15  Ole Reinhardt <ole.reinhardt@embedded-it.de>
	* dev/unix_devs.c
        Changed the delimiting of the nativeName into ip and port.
        Now first check if nativeName == "stdio". Otherwise strtok will
        segfault. Strange... Perhaps a problem with the static declaration
        of the option strings? I don't know. Very mysterious.

2005-04-08  Ole Reinhardt <ole.reinhardt@embedded-it.de>
	* net/arpin.c, net/arpout.c, net/ethin.c, net/ethout.c,
          net/ipcpin.c, net/ipcpout.c, net/ipout.c, net/lcpin.c,
          net/lcpout.c, net/papin.c, net/papout.c, net/pppdebug.c,
          net/pppin.c, net/pppout.c, net/udpsock.c, net/tcpin.c,
	  pro/sntp.c, pro/wins.c,
	added <sys/types.h> (__APPLE__) and <netinet/in.h> (__linux__)
	for htons and simmilar.
        Fixes to make the unix emulation compiling again. Hope this won't
	break anything.

2005-04-04  Matthias Ringwald <mringwal@inf.ethz.ch>

	* include/irqreg.h, include/irqreg_unix.h: most unix emulation
        specific stuff now in irqreg_unix.h. #warning "MCU not defined"

2005-04-05  Harald Kipp  <harald.kipp@egnite.de>

	* os/version.c: Updated for the next pre-release 3.9.6. Still
	no version 4, because of several problems with ARM7 (see below).
	Anyway, most applications should now run on the ARM CPU with
	minor or no modification.

	* include/netinet/if_ether.h, include/netinet/ip.h,
	include/netinet/tcp.h: Finally the TCP/IP stack is running on
	the ARM7 platform. Added the 'packed' attribute to several
	protocol structures.

	* net/ipcsum.c, include/netinet/ipcsum.h: Northern hemisphere
	spring cleaning ;-). This part contained a lot of garbage and
	left overs. The AVRGCC inline assembly from Liquorice seemed to
	be buggy, the ImageCraft inline assembly didn't work better than
	compiled code, NutIpPseudoChkSum() was never called and nothing
	worked on 32 bit little endian machines. This whole mess had
	been radically replaced by a generic routine. Now we have room
	for new and clean optimizations.

	* net/tcpout.c: Inclusion of stdio header removed. These headers
	are useful during debugging, but may cause a lot of trouble
	later, if you forget to remove all print statements. Without the
	stdio header file, the compiler takes care that all debug
	outputs are removed.

	* include/sys/atom.h: NutEnter/ExitCritical for ARM7 added.
	I missed to commit this earlier, sorry.

	* conf/dev/dev.nut, conf/net/net.nut, conf/pro/pro.nut,
	dev/ahdlcavr.c, net/pppsm.c, net/tcpsm.c, pro/dhcpc.c,
	pro/sntp.c: Configurable stack sizes. Because of larger
	registers and memory alignment, ARM CPUs consume a lot more
	stack.

	* include/cfg/ahdlc.h, include/cfg/ppp.h, include/cfg/sntp.h,
	include/cfg/tcp.h: Placeholders added to allow building
	in the source tree.

	* conf/dev/dev.nut, dev/ax88796.c, dev/reg_ax88796.h,
	include/dev/ax88796.h: ARM7 Ethernet driver for Asix' AX88796
	added. Many thanks to Marek Hummel for the initial work.

	* dev/debug_at91.c, include/dev/debug.h: Hacked to make it work
	on USART0. Initialization had been removed too, because I do
	not have the time for a nicer porting. This probably breaks the
	implementation for the AT91EB40A, but to my knowledge I'm to
	only user. :)

	* dev/debug_gba.c, os/arch/arm_timer.c, include/arch/gba.h: More
	consistent register naming for the Gameboy Advance. The hardware
	definitions are now in the central file gba.h. Additionally I
	cleaned up the AT91 timer handling.

	* dev/irqreg.c, include/dev/irqreg.h, include/dev/irqreg_arm.h,
	os/arch/arm_nutinit.c, dev/gba_irqreg.c: Implements conformant
	interrupt registration for the Gameboy Advance. Still no
	solution for the AT91.

	* os/arch/arm_thread.c: ARM threads are now running in system
	mode instead of very limited user mode. I alos removed some less
	helpful debug outputs. The big problem with the initial port
	still exists: It is not yet possible to pass a parameter to
	another thread. Important note: Due to the mode change the
	Gameboy startup needs to be fixed. Again, since I'm the only
	user running Nut/OS on the GBA, who cares?

	* pro/dhcpc.c: No parameter parsing to threads when running
	on ARM. Using a global variable until this is fixed.

	* include/arch/at91.h: Previous interrupt handling allowed
	nesting. This was nice, but regularly crashed the system.
	Nesting has been disabled.

	* conf/fs/fs.nut: UROM file system isn't limited to AVR.

	* conf/net/net.nut: TCP provides device read and write. Even if
	no other devices are available, stdio read and write should be
	included in the build.

	* app/Makedefs.arm-gcc, crt/fwrite.c, net/tcpsock.c, pro/httpd.c:
	No decision about ARM runtime lib, so we go without any. The main
	problem is integer division, which demands assembly language
	routines. As a temporary solution these parts had been excluded
	from the code. The result is, that fwrite will return the number
	of bytes instead of the number of items and that HTTP parameter
	parsing is not available.

	* arch/arm/init/crtwolf_ram.S, arch/arm/ldscripts/wolf_ram.ld,
	app/httpd/httpserv.c, conf/wolf.conf, conf/repository.nut,
	conf/tools.nut: Added support for the Wolf prototype board, which
	uses the AT91R40008 CPU and the AX88796 Ethernet controller.
	Right now there is no support for ROM-able applications. Our
	prototypes run 'armboot' from FLASH and load the Nut/OS
	application via TFTP into the internal RAM. Special thanks to
	Marek Hummel for providing this ported armboot and to hwgroup
	for the hardware.

	* app/threads/threads.c, app/timers/timers.c: Applications can
	run on the Gameboy Advance.

	* dev/uartgba.c, include/dev/uartgba.h: UART support for the
	Gameboy Advance using MBV II hardware. Unfortunately it doesn't
	work as expected. It sends and receives characters somehow, but
	the number of characters is quite random. If someone else with
	some spare time is interested...


2005-04-04  Matthias Ringwald <mringwal@inf.ethz.ch>

	* configure, Makefile, include/netdb.h, include/sys/socket.h,
	include/netinet/in.h: added creation of include/netdb_orig.h,
	include/sys/socket_orig.h and include/netinet/in_orig.h to allow unix
	emulation to use tcp/ip sockets.

	* dev/unix_devs.c, include/dev/unix_devs.h: added socket redirection
	feature for unix emulation uarts. Every nut/os uart device can now be mapped
	to a TCP/IP socket using the "-u{0/1/2} hostname:port" command line option.

	* os/arch/unix_options.c: clean up of usage message.

2005-03-30  Michael Jones <Michael.e.Jones@web.de>

	* net/tcpsm.c: Defussed race condition in NutTcpStateActiveOpenEvent
	where the NutEventWait would be called after sock->so_ac_tq had been
	signaled and therefore the calling thread will hang due to usage of
	NutEventBroadcast which will not store the signaled state.
	This condition can e.g. occur when attempting connection an
	unconnected target port on an active host. The returning RST would
	be processed and signaled before the NutEventWait is called.

2005-03-25  Michael Jones <Michael.e.Jones@web.de>

	* pro/dhcpc.c: Removed small typo that stopped the DHCPST_REBOOTING state
	from releasing a previously reserved IP-Address if the DHCP server
	sends an NAK.

2005-03-21  Matthias Ringwald <mringwal@inf.ethz.ch>

	* configure, include/unidst.h: added creation of include/unistd_orig.h
	Added NUT_ wrapper for nut's unistd.h functions. Use <unistd_orig.h>
	instead of "/usr/include/unistd.h". Relevant for unix emulation only.

	* Makefile: added Bernado Innocenti's patches to compile unix c++

2005-03-13  Harald Kipp  <harald.kipp@egnite.de>

	* net/arpcache.c: If NutArpOutput() failed, then NutArpCacheQuery()
	released the already released NETBUF. This bug had been fixed.
	If NutArpAllocNetBuf() fails, the ARP entry will now be
	removed immediately. Additional check for valid entry pointer
	added. These modifications had been suggested by Dusan Ferbas.
	Finally memcpy() has been replaced by a simple loop in order
	to provide a work around for GCC Bug #18251.


2005-03-09  Henrik Maier  <hwmaier@users.sourceforge.net>

        * os/arch/avr_timer.c: Finally implemented the correct timer routines
        and init for AT90CAN128. Timer2 is now used on AT90CAN128 rather
        Timer0 because Atmel (don't blame me) swapped the Timer designation.


2005-03-04  Ole Reinhardt  <ole.reinhardt@embedded-it.de>
	* dev/adc.c; include/dev/adc.h
	Added function void ADCStartLowNoiseConversion(void)
	This function enters sleep mode!!! Be shure to read
	the AVR datasheet before using this function
	Only implemented on avr_gcc

2005-02-26  Oliver Schulz  <olischulz@web.de>

	* os/arch/avr_nutinit.c: Moved heap initialization to section .init5 to
	support c++ constructors for static objects.

	* tools/nutconf/nutcomponent.c: Added support for relative paths for sample
	application directory.


2005-02-23 Matthias Ringwald <mringwal@inf.ethz.ch>

	* include/unistd.h: Correctly include /usr/include/unistd.h for
	unix emulation

2005-02-23  Henrik Maier  <hwmaier@users.sourceforge.net>

        * app/basemon/basemon.c: Some minor changes to support AT90CAN128 MCU

        * app/basemon/realtek.c, app/basemon/xmemtest.c:
        Changes in order to support AT90CAN128 with it's different register
        structure, changed "ifdef __AVR_ATmega128__" to
        "#ifdef __AVR_ENHANCED__" so the condition also includes AT90CAN128.

        * app/pppc/pppc.c:
        Changed "ifdef __AVR_ATmega128__" to "#ifdef __AVR_ENHANCED__" so the
        condition also includes AT90CAN128.


2005-02-22 Matthias Ringwald <mringwal@inf.ethz.ch>

	* include/arch/avr.h: Added cpp test to guess avr-libc-version required
	to specify twi.h include path.

2005-02-22  Ole Reinhardt <ole.reinhardt@embedded-it.de>

	* os/tracer.c
        Changed "#if defined(__AVR_ATmega128__) || defined(__AVR_ATmega103__) || ..."
        to a more generic "#if defined(__AVR__)"


2005-02-22  Henrik Maier  <hwmaier@users.sourceforge.net>

        * app/Makeburn.avr-uisp-stk500: Replaced hardcoded processor definition
        with MCU definition to allow burning of AT90CAN128 once it is supported
        by uisp.

        * app/Makeburn.avr-jtagice, app/Makeburn.avr-jtagicemkii: Added to
        support Atmel JTAGICE programmers (Windows only, as Atmel provides
        only Windows tools)

        * app/httpd/httpserv.c:
        Changed "#if defined(__AVR_ATmega128__) || defined(__AVR_ATmega103__)"
        to a more generic "#if defined(__AVR__)" in order to support
        AT90CAN128 device as well.


2005-02-21 Philipp Blum <blum@tik.ee.ethz.ch>

        * dev/usartavr.c, include/sys/atom.h, include/sys/tracer.h,
        os/event.c, os/thread.c, os/timer.c, os/tracer.c, os/arch/avr_timer.c
        Removed tabs and added semicolons after NUTTRACER macros

2005-02-21  Ole Reinhardt <ole.reinhardt@embedded-it.de>
	* os/tracer.c
	Added #if defined(...) statement to compile only on avr-gcc
	platform (fixed compile bug for unix emulation)

2005-02-21  Ole Reinhardt <ole.reinhardt@embedded-it.de>
	* fs/pnutfs.c
	Changed declaration of the "root" variable to compile with
	unix emulation

	* include/unistd.h
	For unix plattforms I added #include "/usr/include/unistd.h"
	since some functions needed for unix_nutinit.c are missing in this
	file...

2005-02-21  Henrik Maier  <hwmaier@users.sourceforge.net>

        * conf/arch/arch.nut: Fixed makedefs MCU definition for AT90CAN128

        * conf/dev/dev.nut: New CAN int vectors ivect35.c and ivect36 added,
        removed "makedefs" entry for RTL_IRQ_RISING_EDGE. Wasn't causing
        trouble with nutconf 1.0.4 but it does with the 1.1.2 version.

        * os/thread.c:
        Changed "#if defined(__AVR_ATmega128__) || defined(__AVR_ATmega103__)"
        to a more generic "#if defined(__AVR__)" in order to support
        AT90CAN128, ATMEGA64, and possibly the ATMEGA256 as well.


2005-02-17 Matthias Ringwald <mringwal@inf.ethz.ch>

	* os/arch/unix_options.c, os/arch/unix_nutinit: added #include <getopt.h>

2005-02-17  Philipp Blum <blum@tik.ee.ethz.ch>, Matthias Ringwald

	* os/thread.c, include/sys/thread.h: Removed volatile declarations of
	runQueue since it is not touched from interrupt context.
	Same for nutThreadList, runningThread and killedThreads.

	* os/thread.c: As runQueue is not modified by interrupts,
	runningThread == runQueue always. Therefore removed obsolete
	comparison in NutThreadYield().

	* os/thread.c: Removed unnecessary critical section in NutThreadYield.
	Put NutThreadSwitch call of NutThreadResume into critical section.

	* os/event.c: In NutEventWait(), replaced NutThreadRemoveQueue by
	direct removal of first thread in queue.

2005-02-16  Harald Kipp  <harald.kipp@egnite.de>

	* os/event.c, os/thread.c, os/timer.c, os/arch/avr_thread.c,
	include/sys/thread.h: Introduced a new queue in the kernel.
	This may currently break any non-AVR port!
	Instead of inserting a woken-up thread to the priority ordered
	queue of ready-to-run threads, it will be added to the new
	simple linked list of threads waiting to become ready.
	This results in a more deterministic execution time of
	NutEventPostFromIrq(), which is running in interrupt context.
	As a side effect, interrupts do not change the runQueue
	anymore, which in turn allows much tighter critical
	sections.
	All threads collected in the new queue will be moved to the
	ready-to-run queue, when the currently running thread is
	willing to release the CPU. Thus, the non-deterministic
	task of modifify a priority ordered queue has been moved
	from interrupt context to application context, which reduces
	overall interrupt latency.
	Remark: This is the first step towards guaranteed real-time
	response, which is independant of the number of running threads
	or timers. In a second step, a new timer handling will have
	to be implemented.
	Many thanks to Matthias Ringwald and Philipp Blum for their
	stimulating thoughts and discussions.

	* conf/os/os.nut, dev/usart0avr.c, include/sys/atom.h:
	Typo of NUTDEBUG corrected and Philipp Blum's tracer added
	(AVRGCC only).

	* os/arch/avr_thread.c: Added attribute 'naked' to the declaration
	for NutThreadSwitch. Without this attribute GCC may introduced
	some harmful prologue and epilogue code. Thanks to Pete Allinson.


2005-02-10  Henrik Maier  <hwmaier@users.sourceforge.net>

        * configure: Added Cygwin platform and ATMEGA128 CPU

        * net/confnet.c NutNetLoadConfig and NutNetSaveConfig are disabled
        for the AT90CAN128 device as the EEPROM routines are not yet supported
        in avr-libc v1.2 and earlier.
        Refer to: http://lists.gnu.org/archive/html/avr-libc-dev/2004-04/msg00108.html

        * dev/ivect18.c, dev/ivect19.c, dev/ivect20.c, dev/ivect22.c,
        dev/ivect24.c, dev/ivect25.c, dev/ivect26.c, dev/ivect27.c,
        dev/ivect28.c, dev/ivect29.c, dev/ivect30.c, dev/ivect31.c,
        dev/ivect32.c, dev/ivect33.c, dev/ivect34.c:
        Changed test for __AVR_ATmega128__ to a test for the definition of the
        interrupt signal name (GCC) or interrupt vector number (ICC)
        to allow compilation for AT90CAN128.

        * dev/ivect35.c, dev/ivect36.c, dev/Makefile: New files added w/
        interupt handler for AT90CAN128 CAN interupts.

        * include/dev/irqreg.h: Obsolete IRQ enumeration removed. Added CAN
        interrupts for AT90CAN128.

        * include/avr.h: Added some compatibility definitions to support
        AT90CAN128. At this stage only for GCC. ICC still needs work here.

        * os/arch/avr_nutinit.c: Various changes in order to support AT90CAN128
        with it's different register structure.

        * os/avr/thread.c: Removed conditional compilation of
        NutThreadEntry for __AVR_ATmega128__ and __AVR_ATmega103__ as this
        code section is also valid for other supported AVR MCUs.

        * dev/ide.c: Changes to compile for AT90CAN128 MCU.

        * dev/ide.c, dev/wlandrv.c: Removed dependency from
        include/dev/irqreg.h's IRQ enumeration. Using now INTx definition
        instead of irqreg.h's IRQ_INTx.

        * dev/irqreq.c, include/dev/irqreg.h, include/dev/debug.h,
        include/compiler.h, sys/atom.h, sys/types.h, sys/nut_types.h,
        os/nutinit.c, os/timer.c, os/thread.c, include/arch/avr.h,
        sys/nutconfig.h:
        Changed "#if defined(__AVR_ATmega128__) || defined(__AVR_ATmega103__)"
        to a more generic "#if defined(__AVR__)" in order to support
        AT90CAN128, ATMEGA64, and possibly the ATMEGA256 as well.

        * dev/adhdlc.c, dev/debug.h, dev/ide.c, dev/nicrtl.c, dev/twif.c,
        dev/uartavr.c, dev/usart0avr.c, dev/usart1avr.c, dev/usartavr.c,
        include/arch/avr.h, include/dev/debug.h, include/dev/uartavr.h,
        include/dev/usartavr.h, os/arch/timer.c, dev/debug1.c, dev/ide.c,
        os/arch/avr_timer.c:
        Changed "ifdef __AVR_ATmega128__" to "#ifdef __AVR_ENHANCED__" so the
        condition also includes AT90CAN128 and ATMEGA64.


2005-02-08  Ole Reinhardt <ole.reinhardt@embedded-it.de>

	* os/arch/avr-nutinit.c
	Changed waitstate settings in the manner that the lower
	sector still use one waitstate (only for NUT_3WAITSTATES)

2005-02-04  Harald Kipp  <harald.kipp@egnite.de>

	* include/cfg/dhcp.h: Added missing file for compiling in the
	source tree.

	* net/arpcache.c: A few problems solved, thanks to Dusam Ferbas
	and Rostislav Hlebak. Check for completed entry and generating a
	request had been in wrong order, producing one additional
	request. After further looking into the code, it became obvious,
	that this is one of the oldest parts from the very beginning
	of Nut/OS. Several volatile attributes had been left over from
	the days when outdated ARP entries were removed in interrupt
	context. Later, the interrupt handling had been replaced by
	a thread. I decided to remove this thread to save a lot of RAM.
	ARP cache aging is now processed before each incoming and
	outgoing packet.

	* include/cfg/arp.h, conf/net/net.nut: ARP configuration added.

	* net/tcpsm.c: Unused include files removed.

	* net/tcpsock.c: Minor performance fix. NutTcpFindSocket()
	didn't stop on the first listening socket, but always parsed
	the complete list. Now the socket list isn't nicely sorted
	anymore, but that's acceptable.


2005-02-03  Harald Kipp  <harald.kipp@egnite.de>

	* pro/dhcpc.c, include/pro/dhcp.c: Several bug fixes and
	enhancements. The most important fix will avoid hanging, when
	Ethernut is reset while ICMP pings are received. A large number
	of changes make the client to follow RFC 2131 more closely,
	like maintaining renewal and rebind time. Two new API calls,
	NutDhcpStatus() and NutDhcpError(), allow to query the current
	status of the DHCP client. The previously introduced API call
	NutDhcpIsConfigured() has been marked deprecated. Another
	problem was with timeout, because the client continued
	negotiation with the server after the timeout time given in the
	API called elapsed. Now all internal timeouts are adjusted to
	the API timeout. Furthermore the previous version let the
	client continue on fatal errors like UDP receive or UDP
	broadcast failures. Now the client stops on such errors and
	informs the caller. Finally the documentation has been enhanced.


2005-02-02  Harald Kipp  <harald.kipp@egnite.de>

	* conf/pro/pro.nut: DHCP configuration added.

	* net/udpin.c: Do not wake up waiting threads if the incoming
	datagram doesn't fit in the buffer.

	* doc/gen/nutfoot.html: Number of year updated.

	* doc/gen/nut_en.cfg: Upgraded to Doxygen 1.4.1.

	* conf/dev/dev.nut, conf/ethernut13g.conf, include/cfg/arch/avr.h,
	include/cfg/arch/avrpio.h: Port configuration was completely
	broken, because no AVRPORT values had been left undefined for the
	preprocessor. To fix this without modifying too many sourcefiles,
	the name of AVR port config file changed and this new file is
	included by the old cfg/arch/avr.h. However, this may break
	your exisiting code. If you are using a modified version of
	cfg/arch/avr.h, please move all definitions to cfg/arch/avrpio.h.
	If you're using your own configuration files for the Configurator,
	make sure that all items are still correctly configured.
	Specially configured port names may disappear, because most
	names changed from SOME_PORT to SOME_AVRPORT. Sorry for the
	inconvenience caused by this confusing port modification chaos.

	* dev/lanc111.c: If no Ethernet link was available on the LAN91C111,
	each outgoing packet took 15 seconds and, even worse, the ouput
	routine doesn't return an error. Now the first attempt to send a
	packet without Ethernet link will wait 5 seconds for the link to
	come up again and, if this fails, subsequent attempts will take
	0.5 seconds only, always returning an error.

	* dev/spidigio.c: Corrected a typo. Due to the port configuration
	problem, this and the resulting compile error wasn't detected.


2005-01-26  Matthias Ringwald <mringwal@inf.ethz.ch>

	* os/tracer.c, include/sys/tracer.h: fixed includes
	and prototypes

2005-01-21  Matthias Ringwald <mringwal@inf.ethz.ch>

	* os/tracer.c, include/sys/tracer.h: new tracer for
	profiling of nut/os and app functions by Philipp Blum

	* dev/usart0avr.c, dev/usart1avr.c, dev/usartavr.c,
	include/sys/atom.h, os/arch/avr_timer.c, os/event.c,
	thread.c, timer.c: enable profiling of AvrUsartTxEmpty,
	AvrUsartRxComplete, NutEnterCritical, NutExitCritical,
	NutTimer0Intr, NutEventWait, NutThreadYield, NutThreadSetPriority,
	NutSleep

2005-01-22  Harald Kipp  <harald.kipp@egnite.de>

	* Makefile, Makedefs.avr-gcc, conf/cpp/cpp.nut,
	conf/repository.nut, conf/tools.nut, include/cpp/nutcpp.h:
	Added C++ patches contributed by Oliver Schulz (MPI). The
	file nutcpp.h must be included by C++ applications. We got
	a real problem now, because this is not the same Oliver Schulz
	we know from several previous contributions. I'll add MPI to
	his name, because he's currently working at the Max Planck
	Institute of Molecular Physiology in Dortmund.

	* app/cppdemo/cppdemo.cc, app/cppdemo/Makefile: Not yet
	documented very well, but it proofs that C++ is available
	to Nut/OS applications.

	* app/Makedefs.avr-icc: Compiling applications with external
	RAM for variable space didn't work when using ICCAVR on the
	command line. This fixes it.

	* arch/avr/init/crtnut.s, arch/avr/init/crtnutram.s,
	arch/avr/init/init.s: Upgraded to the latest ICCAVR V6
	release.

	* arch/avr/init/crtenut.s, arch/avr/init/crtenutram.s,
	arch/avr/init/ethini.s, conf/arch/arch.nut: Fixes external
	memory problems for ICCAVR and Ethernut 1.3 Rev-G. The
	RTL8019AS is now initialized early.

	* os/arch/avr_nutinit.c: Fixes the same external memory
	problems on Ethernut 1.3 Rev-G for GCC.

	* conf/repository.nut, conf/dev/dev.nut, dev/lanc111.c,
	dev/nicrtl.c, dev/spidigio.c, dev/usart0avr.c, dev/usart1avr.c,
	include/cfg/arch/avr.h:
	Changed AVR port configuration names from PORTx to AVRPORTx.
	Now the preprocessor is able to handle port related
	expressions even after avr/io.h has been included.

	* dev/uartspi.c, dev/uarts.c, dev/Makefile, conf/dev/dev.nut:
	Removed uartspi devices. No one uses them any more.

	* cfg/coconut.h, cfg/ethernut.h, cfg/modem.h: Marked
	deprecated.

	* os/nutinit.c: My assumption on moving the ms62_5 counter
	from timer.c to nutinit.c to keep it in AVR's internal memory
	was wrong. However, in most cases applications consume RAM by
	large uninitialized arrays. Explicitly initializing ms62_5 will
	help in most cases.


2005-01-21  Matthias Ringwald <mringwal@inf.ethz.ch>

	* os/event.c: NutEventPostAsync -> NutEventPostFromIrq,
	new NutEventPostAsync with build-in critical section.

	* include/sys/event.h os/event.c dev/sja1000.c dev/ahdlcavr.c
	dev/ide.c dev/lanc111.c dev/nicrtl.c dev/nicrtl_h8.c dev/scih8.c
	dev/twif.c dev/uartavr.c dev/uartspi.c dev/unix_devs.c dev/usartavr.c
	dev/wlandrv.c net/tcpsm.c os/arch/unix_nutinit.c os/msg.c:
	Renamed calls from IRQs to NutEvenPostAsync into NutEventPostFromIrq,
	removed Critcal Sections around calls to NutEventPostAsync

2005-01-19  Matthias Ringwald <mringwal@inf.ethz.ch>

	* stdio.h, stdio_nut_wrapper.h, time.h: more fixes
	for cygwin compilation

	* timer.h, timer.c, event.c, msg.c: Made critical section
	of NuTimerStart shorter. Extracted ms to ticks
	conversion out of NutTimerStart as NutTimerMillisToTicks.
	Extra function NutTimerStartTicks. Adapted NutSleep
	and NutMsgQTimerCb to take benefit of this.
 	Improved critical section in NutEventPost.

2005-01-19  Matthias Ringwald <mringwal@inf.ethz.ch>

	* unix_devs.c: added includes for cygwin compile.
	Implemented input flush (read with len = 0).

2005-01-13  Harald Kipp  <harald.kipp@egnite.de>

	* conf/net/net.nut: Added dependencies to avoid compilation
	of network parts for targets without network hardware.

	* net/netdebug.c: Removed type casts from previously converted
	printf formats to avoid compiler warnings.

	* os/timer.c, os/nutinit.c: Moved ms62_5 counter from timer.c
	to nutinit.c. On AVR platforms this makes sure, that the
	variable is located in internal RAM, because nutinit.c is
	the first module being linked. This fixes the wrong baudrate
	bug for applications occupying all internal RAM. Not nice,
	but works. In addition some timer handling had been optimized.
	The volatile attribute of a pointer in NutTimerInsert() wasn't
	really required and had been removed. In NutTimerStop() the
	critical section had been reduced to improve interrupt
	performance of the whole system. More could be done here.


2005-01-10  Ole Reinhardt <ole.reinhardt@embedded-it.de>

	* include/arch/avr.h
	Included check if atof is just defined (needed by
	new avr-libc versions on debian unstable)


2005-01-02  Harald Kipp  <harald.kipp@egnite.de>

	* net/tcpsm.c: Replaced unprotected calls to NutEventPostAsync()
	by late calls to NutEventPost(). This should fix the infrequent
	system halts/resets. The event to the transmitter waiting queue
	will be broadcasted on relevant state changes. Finally I added
	some more comments to the code.

	* net/tcpsock.c: Simplyfied NutTcpSend().


2005-01-02  Harald Kipp  <harald.kipp@egnite.de>

	* net/netdebug.c, os/event.c, os/thread.c, os/timer.c:
	Replaced platform dependant formats in debug outputs.


2004-12-31  Oliver Schulz  <olischulz@web.de>

	* pro/dhcpc.c, include/pro/dhcp.h: Bugfixes from Michel Hendriks applied:
	Allocate empty dyncfg's to prevent freeing twice of domain/hostname, Clear
	pointer after ReleaseDynCfg to prevent freeing twice, Make sure SelectOffer
	is never called with 0 offers, When falling back from rebooting to
	selecting, clear the received ip address so NutDhcpIfConfig does not assume
	it has been configured properly.


2004-12-17  Harald Kipp  <harald.kipp@egnite.de>

	* net/route.c, include/net/route.h: Added Adam Pierce's
	routing management functions.

	* os/bankmem.c: Bugfix. Comparison of the read and write
	pointers now includes the segments. Thanks to Pete Allinson
	and Johan van der Stoel.

	* dev/nicrtl.c, conf/dev/dev.nut: Support of rising edge
	interrupts for hardware w/o inverter gate. Fixed compilation
	issue for hardware with RTL reset port. Thanks to
	FOCUS Software Engineering Pty Ltd.

	* conf/xnut-100.conf: proconX XNUT-100 board added.


2004-12-16  Harald Kipp  <harald.kipp@egnite.de>

	* dev/ahdlcavr.c, dev/twif.c, dev/uartavr.c,
	os/arch/avr_timer.c: Late increment fixes ICCAVR bug.
	Thanks to Andreas Siebert and Michael Fischer.

	* conf/charon2.conf: Configuration for Charon II added.

	* pro/httpd.c, include/pro/httpd.h: Added Mikael Adolfsson's
	excellent parameter parsing routines. (Mikael, sorry for
	the delay.)

	* app/httpd/httpserv.c: Form handling uses Mikael's
	NutHttpGetParameter routines. Provided by Michael Fischer.

	* net/ipin.c, include/netinet/ip.h: Added Damian Slee's
	IP filter function.


2004-11-29  Matthias Ringwald <mringwal@inf.ethz.ch>

    * include/stdio.h, include/stdio_nut_wrapper.h, include/time.h,
    dev/unix_devs.c: some fixed to get core nut/os compiled on cygwin
    hint: add -D__linux__ to Makedefs after configuration

    * dev/unix_devs.c: no support for speed > 230400 on cygwin

    * os/arch/unix_thread.c: added return to make a compiler happy

2004-11-29  Matthias Ringwald <mringwal@inf.ethz.ch>

    * include/stdio.h, include/stdio_nut_wrapper.h, include/time.h,
    dev/unix_devs.c: some fixed to get core nut/os compiled on cygwin
    hint: add -D__linux__ to Makedefs after configuration

    * dev/unix_devs.c: no support for speed > 230400 on cygwin

    * os/arch/unix_thread.c: added return to make a compiler happy

2004-11-24  Harald Kipp  <harald.kipp@egnite.de>

	* tools/nutconf/nutcomponent.c, tools/nutconf/nutconf.cpp,
	tools/nutconf/nutconf.h, tools/nutconf/valuewindow.cpp,
	tools/nutconf/nutconfdoc.cpp: Release 1.1.1. Do not store
	empty options. Remove include files from the build tree,
	if they are no longer used. Command line parameter 's'
	allows different settings. Minor compiler warning fixed.

	* conf/stk501.conf: Configuration for Atmel's STK501 board
	added.

	* conf/crt/crt.nut, crt/getf.c, crt/putf.c: Floating point
	working again. putff.c, getff.c and libnutcrtf.a are unused
	but kept a while for backward compatibility. Configuration
	of max. number of streams added.

	* conf/dev/dev.nut: Advanced descriptions. Ole's memory
	mapped LCD driver, CAN Bus driver and ADC routines added.
	Chat options added.

	* include/dev/chat.h: Configurable chat options.

	* conf/os/os.nut: EEPROM location no more required in
	.conf files. The problem is, that we can't have empty
	integer values, so I added flavor 'booldata' to disable
	this item.

	* conf/repository.nut: Added empty strings to choice
	arrays. This enables creation of empty items, which
	are not added to the .conf files.

	* include/arch/gba.h, include/cfg/chat.h:
	Placeholders added.

	* app/Makeburn.gba-xport2: Programming support for
	Xport 2.0.

	* During commit I mistyped the command. CVS is too
	tolerant and some log messages in the conf directory
	are spoiled. Grrrrrr....

	* app/uart/uart.c: Include cfg/crt.h for floating point
	support.

	* include/sys/syslog.h: Prototype declarations for
	Harvard architecture corrected.


2004-11-11  Ole Reinhardt
	* dev/sja1000.c
	Added critical section around NutEventPostAsync

2004-11-08  Oliver Schulz  <olischulz@web.de>

	* Makerules.arm-gcc, Makerules.avr-gcc, */Makefile: Added rule to clean up
	intermediate gcc files (*.i)

	* tools/nutconf/nutconfdoc.cpp: While creating the sample directory, CVS
	files are now not copied.


2004-11-08  Harald Kipp  <harald.kipp@egnite.de>

	* Makedefs.arm-gcc, app/Makedefs.arm-gcc: Generating code
	that works with mixed arm and thumb mode (interwork). Usage
	of frame pointer disabled. No idea why, but it failed on
	the Gameboy when code uses a frame pointer register.

	* arch/arm/init/crtgbaxport2.S: Interrupt handling
	removed. It didn't work, didn't even compile without
	modification. GBA interrupt support is still a hack.

	* dev/debug_gba.c: Now supports carriage return.

	* dev/twif.c: Several fixes, don't ask me about details.
	I'm really fed up with this. But we've got four ATmegas
	running Nut/OS in multimaster mode for days without
	problem.

	* include/dev/usart.h: Changed rbf_head, rbf_tail and
	rbf_cnt in the RINGBUFF structure to volatile, because
	they are modified by the interrupt routines.

	* os/heap.c: Allocated sizes are adjusted to 32-bit
	boundaries. I know this is botch. We need something
	more general to configure alignment.

	* conf/*.conf, conf/os/os.nut, include/cfg/os.h,
	os/arch/arm_nutinit.c, os/arch/avr_nutinit.c,
	os/arch/h8_nutinit.c, os/arch/unix_nutinit.c:
	Stack size of idle and main thread is now configurable.

	* os/arch/arm_timer.c: Hacked in Gameboy timer support.

	* os/arch/arm_thread.c: Made assembly includes look
	nice (and independent from embedded tabs). Changed
	mode from supervisory to user supervisory, which
	seems to work with the GBA. Skipped entry frame,
	because it simply confuses me. :-) Finally Nut/OS
	is now running on my GBA SP.


2004-10-14  Oliver Schulz  <olischulz@web.de>

	* crt/localtim.c, crt/gmtime.c, dev/usart.c, dev/wlandrv.c, pro/resolv.c:
	Fixed compiler warning "comparison between signed and unsigned"


2004-10-14  Ole Reinhardt <ole.reinhardt@kernelconcepts.de>

        * dev/hd44780_bus.c: Added default LCD config to avoid compiling
	  error if no LCD type is defined.


2004-10-10  Oliver Schulz  <olischulz@web.de>

	* net/route.c: Removed unneccessary call to NutIpRouteRecQuery.

	* net/ipout.c: Now directed broadcasts to the local network are detected,
	and no ARP queries are sent.


2004-10-03  Harald Kipp  <harald.kipp@egnite.de>

	* doc/gen/nut_en.cfg, os/version.c: Set to 3.9.2.

	* conf/arch/arch.nut, conf/repository.nut, conf/tools.nut,
	dev/irqreg.c, arch/arm/init/crtgbaxport2.S,
	arch/arm/ldscripts/gbaxport2.ld, conf/gbaxport2.conf:
	Added Nintendo Game Boy Advance with Xport 2.0 from Charmed Labs.

	* conf/dev/dev.nut, include/dev/debug.h, debug_gba.c:
	Added GBA debug device and made UART SPI dependent from
	HW_MCU_AVR.

	* dev/usart1avr.c: Set base address to 1, so drivers are
	able to distinguish UART0 from UART1.

	* pro/syslog.c, include/sys/syslog.h: Harvard architecture
	calls added.

	* os/arch/arm_timer.c: No GBA timer yet, but made it
	compilable.


2004-09-26  Oliver Schulz  <olischulz@web.de>

	* tools/nutconf/nutconf.cpp, tools/nutconf/nutcomponent.c,
	tools/nutconf/nutcomponent.h, tools/nutconf/nutconfdoc.cpp: Fixed several
	hundred memory leaks :-). Relative pathes can now be used for source, build
	and install directory, but doesn't work for samples yet.


2004-09-25  Oliver Schulz  <olischulz@web.de>

	* conf/dev/dev.nut: Light change for separate interrupt stack. Now it depends
	also on macro HW_MCU_AVR.

	* conf/os/os.nut: Removed configuration for separate interrupt stack, it's now
	in conf/dev/dev.nut


2004-09-22  Harald Kipp  <harald.kipp@egnite.de>

	* conf/arch/arch.nut, conf/dev/dev.nut, dev/lanc111.c:
	LAN91C111 driver is configurable, but no ATmega103
	support. Does anybody need this?
	List of devices sorted by platform.

	* conf/dev/dev.nut, dev/irqstack.c, include/dev/irqstack.h,
	os/arch/avr_thread.c: Separate IRQ stack for AVR is
	configurable.

	* conf/dev/dev.nut, dev/spidigio.c: Configurable ports
	for digital I/O shift register.

	* conf/dev/dev.nut, dev/usart0avr.c, dev/usart0avr.c:
	Configurable handshake ports.


2004-09-19  Harald Kipp  <harald.kipp@egnite.de>

	* app/logtime/logtime.c, app/logtime/Makefile: New application
	demonstrates usage of syslog and SNTP.

	* include/sys/syslog.h, pro/syslog.c, pro/Makefile,
	conf/pro/pro.nut: Syslog protocol added.

	* include/cfg/arch.h, include/cfg/crt.h, include/cfg/eeprom.h,
	include/cfg/os.h, include/cfg/syslog.h: Configuration
	placeholders for building in source tree.

	* arch/arm/init/crteb40a_ram.S, arch/arm/ldscripts/eb40a_ram.ld,
	arch/arm/ldscripts/s3c4510b_ram.ld, arch/Makefile:
	ARM7 initialization.

	* arch/avr/init/area.s, arch/avr/init/crtnut.s,
	arch/avr/init/crtnutram.s, arch/avr/init/extram.s,
	arch/avr/init/init.s, Makedefs.avr-icc, Makerules.avr-icc,
	conf/arch/arch.nut: ICCAVR initialization added to build.

	* tools/nutconf/nutcomponent.c: Bugfix. More than one target
	in a single component created wrong list, which failed with
	'make install'.

	* tools/nutconf/nutconfdoc.cpp: Bugfix. Modifying anything
	else but checkboxes didn't enable the toolbar's save button.


2004-09-17  Ole Reinhardt <ole.reinhardt@kernelconcepts.de>
	* dev/hd44780_bus, dev/sja1000.c
	Added #ifdef __GNUC__ statement since both drivers are not ported
	to icc by now... Anybody wants to port them

2004-09-17  Harald Kipp  <harald.kipp@egnite.de>

	* tools/nutconf/Makefile: Ole removed tooloptdlg.o, which
	was correct to get it compiled. But the real problem was,
	that I forget to commit all changes. So tooloptdlg.o
	has been added again.

	* tools/nutconf/tooloptdlg.cpp, tools/nutconf/tooloptdlg.h,
	tools/nutconf/nutconf.cpp, tools/nutconf/settings.cpp,
	tools/nutconf/settings.h, tools/nutconf/settingsdlg.cpp,
	tools/nutconf/settingsdlg.h: New settings page for tool
	options added.

	* tools/nutconf/nutcomponent.c, tools/nutconf/nutcomponent.h,
	tools/nutconf/nutconfdoc.cpp:
	INCFIRST and INCLAST definitions added to application sample
	directory building.


2004-09-16  Ole Reinhardt <ole.reinhardt@kernelconcepts.de>
	* os/Makefile
	Changed position of LIBDIR to support correct install directory for
	nutinit.o and libnutos.a

2004-09-12  Harald Kipp  <harald.kipp@egnite.de>

	* doc/gen/nut_en.cfg: Updated version and using default
	installation path.

	* doc/gen/nutdoc_en.txt: Old history, stream and init
	removed. Version updated.

	* tools/crurom/Makefile: Target install added.

	* tools/nutconf/Makefile: Target install and tooloptdlg.o
	added.

	* tools/packaging/ethernut-3.9-1.spec: RPM spec file
	added.


2004-09-10  Harald Kipp  <harald.kipp@egnite.de>

	* eboot/ether.c: Added minimal "EEPROM emulation" to support
	Ethernut 1.3 Rev-G boards. To squeeze it again in 4kByte,
	the broadcast, gateway and dns had been removed.

	* Makedefs.avr-icc, Makerules.avr-icc, app/Makedefs.avr-icc,
	app/Makerules.avr-icc: Replaces .icc files.

	* app/Makedefs.avr-gcc, app/Makerules.avr-gcc: Replaces
	.gcc files.

	* app/rs232d/rs232d.c: Removed old header files.

	* app/threads/Makefile: Undefined references solved by
	second pass for libnutos.

	* app/threads/threads.c: Replaced devUart0 by devUsartAvr0.

	* app/uart/Makefile, app/uart/uart.c: Floating point
	configuration broken. Temporarly removed.

	* dev/nicrtl.c: ICCAVR compile problems fixed.

	* Makedefs.avr-gcc, Makefile, app/Makedefs.avr-gcc,
	crt/Makefile, dev/Makefile, fs/Makefile, net/Makefile,
	os/Makefile, pro/Makefile: Old method of building the
	system within the source dir works again for AVR. We
	keep this as a backup method.


2004-09-08  Harald Kipp  <harald.kipp@egnite.de>

	* os/version.c: Although this is no final release, there
	is a lot of new hardware waiting for Nut/OS support. So
	I marked this with version 3.9.1 before creating the
	long awaited 4.0 branch.

	* Makedefs.arm-gcc, Makerules.arm-gcc: Reduced to what we
	really need.

	* Makedefs.avr-gcc: Remove directory part from listing
	files to keep the source directory clean.

	* nut/Makerules.avr-gcc: Assembler rule added.

	* nut/app/Makedefs.avr-dude, nut/app/Makeburn.avr-uisp-stk500:
	Programmer configuration files added. Frankly, I'm not happy
	with this solution. Any better ideas for programmer
	configuration?

	* app/isp2/Makefile: *nix requires dot-slash for local
	include directory.

	* app/simple/Makefile, app/threads/Makefile: Add configurable
	library list.

	* app/threads/threads.cpp: Added support for EB40A. This is
	our first example running on that board.

	* app/timers/timers.cpp: Added support for EB40A, but still
	not working. :-(

	* c/stdlib/*, c/string/*: Minimal standard C library added,
	using some BSD code. There are a lot of libraries available,
	but many of them are not really OS independent.

	* conf/arch/arch.nut: Enable C startup for ARM platforms
	only.

	* crt/fclose.c, crt/freopen.c, include/arch/arm.h: RAMSTART
	check removed. In fact we need to check the stream for stdio,
	so this is now wrong. But RAMSTART is too hardware dependent.
	For now it is not possible to close stdio streams.

	* crt/malloc.c, nut/os/devreg.c: RAMSTART check removed. Buggy
	AVR applications may now crash when freeing unallocated
	memory.

	* dev/arm_irqreg.c, include/dev/irqreg_arm.h,
	dev/s3c4510b_console.c, dev/s3c4510b_irqreg.c,
	dev/uart_s3c4510b_dbg.c: SAMSUNG S3C45 support added, but not
	fully working yet.

	* dev/twif.c: Too lazy to list all fixes. :-) Many thanks to
	all the unnamed contributors.

	* include/arch/at91.h, include/arch/at91eb40a.h: Hardware
	definitions for new ARM7 support.

	* dev/debug_at91.c, include/dev/debug.h: Device devDebug1
	added for ARM7. This is the only device for this CPU so far.

	* os/arch/arm_nutinit.c: Using configurable NUTMEM_SIZE
	and __heap_start from linker script. Looks like all platform
	dependancies can be removed from NutInit?

	* os/arch/arm_thread.c: I took over James Tyou's port for the
	SAMSUNG chip nearly without modifications and it works fine
	with Atmel's ARM7TDMI. Good work!

	* os/arch/arm_timer.c: Added my AT91 timer interrupt, which
	ignores Nut/OS interrupt registration for now. Also included
	is Tyou's SAMSUNG timer initialization, but some more has to
	be done. Please use the full port from Tyou's website until
	then.

	* nut/os/confos.c: No EEPROM support for AT91.

	* nut/os/timer.c: Added OS configuration include file.

	* conf/*.conf: Ethernut configuration files updated.


2004-09-07  Harald Kipp  <harald.kipp@egnite.de>

	* conf/arch/arch.nut: MCU type in NutConf.mk and cstartup
	added.

	* conf/crt/crt.nut: Program space routines moved to specific
	modules.

	* conf/dev/dev.nut: ARM7 IRQ handler removed to get it
	running with the current implementation for EB40A, which
	handles the timer interrupt in arm_timer.c. We will have
	to create a more general interrupt handler for ARMs later.

	* conf/repository.nut: ARM7 linker script choice added.

	* conf/tools.nut: ARM7 linker script and nutlibc configuration
	added.

	* tools/nutconf/configitem.cpp: Boolean items were not
	properly initialized.

	* tools/nutconf/nutcomponent.c: SRCx replaced by OBJx for
	additional modules. Still bumpy with some versions of make.
	Not all subdirs had been created with prior versions.
	-DETHERNUT2 added to any newly created UserConf.mk.

	* tools/nutconf/nutconfdoc.cpp: Configured build dir
	added to library and include paths of sample makefiles.

	* tools/nutconf/settings.cpp: Initial default lib
	directory is now empty.

	* conf/ethernut13f.conf, conf/ethernut13g.conf,
	conf/at91eb40a.conf: New pre-defined hardware configurations.


2004-09-01  Harald Kipp  <harald.kipp@egnite.de>

	* app/basemon/basemon.c, app/basemon/realtek.c: Added support
	for EEPROM emulation.

	* conf/dev/dev.nut: Added UART handshake and EEPROM emulation
	port bits.

	* conf/os/os.nut: Cleaned up memory configuration.

	* conf/repository.nut: AVR interrupts chosen by number.

	* os/arch/avr_nutinit.c: Using configuration values from
	cfg/memory.h. Added configurable reserved memory area.
	Automatic check for external memory removed.


2004-08-26
	* dev/hd44780_bus.c
	Fixed cursor positionion for different devices. Now can set
	four LCD types by defining: KS0073_CONTROLLER, LCD_4x20, LCD_4x16

2004-08-25  Harald Kipp  <harald.kipp@egnite.de>

	* include/cfg/arch/avr.h, include/cfg/arch/avrpio.h:
	New include directory cfg/arch added, which should be used
	for target specific items, mainly port usage or MCU specific
	register settings. Still the top configuration directory
	should be prefered whenever possible. For example, memory
	layout may seem MCU specific, but in this sense it is not.
	Memory addresses are typically board specific.

	* include/cfg/bankmem.h, include/cfg/memory.h: More general
	memory layout definitions moved to the new cfg/memory.h.
	The header file bankmem.h is still kept and may define
	the number of banks to used by a specific function.

	* dev/nicrtl.c: Hardware dependent definitions are
	configurable. For performance reasons the base address is not
	kept in a variable any longer. It is now a preprocessor macro
	and the parameters during device registration are ignored. The
	speed improvements provided by Kolja Waschk for the LAN91C111
	had been implemented here too. The driver will not touch a
	port anymore unless a reset port bit had been configured.
	For Ethernut 1.1 bit 4 PORTE must be specified in the
	configuration. Finally, an EEPROM emulation had been added,
	which can use address bus bits instead of wasting additional
	port pins. The required hardware has been implemented on
	Rev.-G Ethernut 1.3 boards. This fixes the Realtek full
	duplex problem.

	* app/Makedefs.*: Fixed a problem with undefined top_srcdir
	and top_blddir when building applications in the source
	directory.


2004-08-25  Ole Reinhardt <ole.reinhardt@kernelconcepts.de>

	* dev/candev.c, dev/candev.h
	Added function to set acceptance filter

2004-08-18  Harald Kipp  <harald.kipp@egnite.de>

	* os/bankmem.c, include/sys/bankmem.h, include/cfg/bankmem.h:
	Made banked memory configurable.

	* crt/putf.c: Compile error on non-Harvard architecture fixed.

	* app/*/Makefile: Replaced top_srcdir by parent directory to
	allow independent application directories.

	* tools/nutconf, conf/*.nut: Tool is working now on Win32 and
	Linux for avr-gvv.

	* makedefs.avr-gcc, makerules.avr-gcc: Copied from .gcc to have
	a more consistent naming convention. The original files may be
	removed later.


2004-08-11  Matthias Ringwald <mringwal@inf.ethz.ch>
    * dev/unix_devs.c: removed a potential dead lock,
    and now initialized a pthread_mutex before usage

    * doc/gen/nutdoc_en.txt: some docu added for mutex, semaphore
    and the unix emulation

2004-08-09  Matthias Ringwald <mringwal@inf.ethz.ch>
    * dev/unix_devs.c, include/dev/unix_devs.c, include/arch/unix.h:
    added a third uart as devDebug2, devUart2, devUsartAvr2
    for testing in unix emulation

2004-08-05  Oliver Schulz  <olischulz@web.de>

	* crt/filelength.c: For VIRTUALDEVICEs the return value of the ioctl
	function was returned, which is obviosly wrong. Now the correct
	filelength value is returned to the caller.

2004-08-05  Matthias Ringwald <mringwal@inf.ethz.ch>
    * dev/irqreg.h, os/thread.c, os/arch/unix_nutinit.c,
    os/arch/unix_thread.c: added unix emulation hook in NutThreadYield
    to safely process NutPostEventAsync calls occuring in non Nut/OS
    threads.

    * dev/unix_devs.c, include/dev/unix_devs.c: rewrote the unix read
    function again using the new unix NutThreadYield hook to call
    the NutPostEventAsync function safely (fast & correct).
    _write(nf, 0, 0) aka fflush is ignored on unix emulation.

    * dev/unix_devs.c: CTRL-C on terminal terminates running
    unix emulation apps nows.

    * os/nutinit.c, os/arch/unix_eeprom.c, include/arch/unix.h:
    added an avr-libc compatible (but yet uncomplete) eeprom simulation
    that uses file 'eeprom.bin' in the current directory to store eeprom
    content.

2004-08-03  Harald Kipp  <harald.kipp@egnite.de>

	* app/basemon: Dataflash check added. Fixed a bug, which offered MAC
	address 0. This is really weird: The MAC address bug had been fixed
	by making an auto array global. There's probably something wrong
	with the stack. UART initialization is now early for easier debugging.
	In previous releases the web server didn't produce any output when
	Basemon didn't detect RS232 input. This confused users, didn't show
	the IP settings and thus had been changed. All calls to NutDelay had
	been replaced by calls of the local Delay routine. The SMSC shares
	transmit and receive buffer, which let the broadcast test fail after
	some incoming packets, which where never removed from the NIC. Now
	the receiver is disabled during broadcast test and the NIC will be
	reset if running out of buffer space. A more feasible baudrate table
	is used now, which also supports overclocked ATmegas.


2004-08-03  Harald Kipp  <harald.kipp@egnite.de>

	* conf, tools/nutconf: Lots of changes, too many to list here.
	The tool seems to become useful soon, just a few bug fixes
	away from here.


2004-08-02  Ole Reinhardt
    * include/can_dev.h dev/can_dev.c
    Changed typing of CAN_TryRxFrame. Hope this will not concern too much
    people

    * include/adc.h dev/adc.c
    Initial import of an ADC driver for ATMega128 / AVR-GCC

2004-07-30  Oliver Schulz  <olischulz@web.de>

    * include/io.h: First proposal to define some global ioctl commands.

    * crt/filelength.c:  filelength implemented for VIRTUALDEVICEs using the new
    global ioctl command IOCTL_GETFILESIZE.

    * include/netinet/tcp_fsm.h: Added a comment and changed the prototype of
    NutTcpStateRetranTimeout.

    * include/netinet/tcputil.h: Added prototype of new function NutTcpCalcRtt.

    * pro/httpd.c: Slightly improved handling if socket was closed by peer.

    * include/sys/socket.h, include/sys/sock_var.h, net/tcpsock.c, net/tcpout.c,
    net/tcpsm.c, net/tcputil.c: Some code of TCP stack redesigned. Round trip
    time calculation is now supported. Fixed several bugs in TCP state machine.
    Now TCP connections should be more reliable under heavy traffic or poor
    physical connections.


2004-07-27  Oliver Schulz  <olischulz@web.de>

    * crt/strtok_r.c, include/strtok_r.h: Implementation of strtok_r adjusted to
    the POSIX 1c standard. This will just affect the ImageCraft compiler,
    because avrlibc already supplies this function.

    * net/arpcache.c: Under certain circumstances the same ARPENTRY was
    allocated twice.

    * net/arpin.c: If NutArpOutput fails, the NetBuf must not be deallocated by
    calling NutNetBufFree.


2004-07-19  Matthias Ringwald <mringwal@inf.ethz.ch>
    * os/event.c: Fixed NutPostEvent to give up CPU
    if there is another thread ready with same priority.
    to match the documentation
    Also removed 'SWP..' NBUTDEBUG output, as switching
    is done calling NutThreadYield()

2004-07-19  Matthias Ringwald <mringwal@inf.ethz.ch>

    * os/mutex.c: code contained same bug as os/semaphore.c.
    Unfortunately I didn't understand the other fix, but
    anyway made NutMutexLock more robust.
    Fixed wrong indention of all functions

2004-07-14  Matthias Ringwald <mringwal@inf.ethz.ch>

    * dev/unix_devs.c: read operation is now woken by
    a 'IRQ'-handler to avoid race-conditions
    Provide placebo implementations for
    UART_[SET/GET][TX|RX]BUF[SIZ|HWMARK|LWMARK],
    UART_[GET|SET]STATUS and UART_SETCOOKEDMODE ioctl.

    * os/arch/unix-nutinit.c, unix_timer.c, unix.h:
    Provide enumeration for IRQs used so far,
    IRQ dispatcher uses broadcast now,
    added handler for CTRL-C

2004-07-09  Matthias Ringwald <mringwal@inf.ethz.ch>

    * os/arch/avr-nutinit.c: Allow setting of NUTRAMEND
    by giving it as a compiler flag and moved
    ((volatile u_char *) NUTRAMEND) cast into NUTRAMENDPTR

    * os/arch/avr-nutinit.c: New function
    NutThreadSetSleepMode to tell nut/os to set the
    MCU to sleep when in idle (avr-gcc && avr128 only)

2004-06-25  Matthias Ringwald <mringwal@inf.ethz.ch>

    * crt/write.c, crt/write_P.c: Added note that write
    calls are not thread-safe, i.e, two writes might
    come out intermixed

2004-06-24  Matthias Ringwald <mringwal@inf.ethz.ch>

    * dev/unix_devs.c: if using STDIO, better read from
    STDIN instead of STDOUT => unix piping works

2004-06-23  Ole Reinhardt <ole.reinhardt@kernelconcept.de>
    * dev/can_dev.c, include/dev/can_dev.h:
    Added functions for buffer monitoring (avail / free)

2004-06-21  Matthias Ringwald <mringwal@inf.ethz.ch>

    * dev/unix_devs.c: multiple parallel reads now work.
    But still dead-locks possible.
    Non-blocking stdio.

2004-06-21  Matthias Ringwald <mringwal@inf.ethz.ch>

   * os/arch/unix_nutinit.c: idle thread now sleeps until
    the next (virtual) IRQ occures

2004-06-21  Matthias Ringwald <mringwal@inf.ethz.ch>

    * dev/unix_devs.c: read operation is using extra pthread
      to only block current thread (instead of all threads)

2004-06-21  Matthias Ringwald <mringwal@inf.ethz.ch>

    * include/dev/usart.h|uart.h: added device definitions for
      *nix emulation

2004-06-08  Matthias Ringwald <mringwal@inf.ethz.ch>

    * include/sys/types.h: changed #include "types_orig.h" to
    <sys/types_orig.h> to allow this file to be in $MODDIR

2004-06-07  Harald Kipp  <harald.kipp@egnite.de>

	* conf: Still incomplete configuration scripts added.

	* tools/nutconf: Working configuration tool replaced by very
	incomplete re-design. It will read the Lua scripts from the
	conf directory and display an editable tree of configuration
	items.


2004-06-07  Ole Reinhardt  <ole.reinhardt@kernelconcepts.de>
	* dev/sja1000.c, dev/can_dev.c
	  include/dev/sja1000.h, include/dev/can_dev.h

	Initial checkin of a driver and a simple api for can-bus devices.
	This driver is for the well known phillips sja1000 wich is connected
	to the Memory bus and an external interrupt.

2004-06-02  Ole Reinhardt  <ole.reinhardt@kernelconcepts.de>
	* os/semaphore.c
	Changed NutEventWait to NutEventWaitNext according to a hint
	from Oliver

2004-06-02  Ole Reinhardt  <ole.reinhardt@kernelconcepts.de>
	* os/semaphore.c, include/sys/semaphore.h
	Fixed a integer overflow (underflow) in semaphore implementation
	Now a Semaphore initialized with 0 can not underrun any longer.

2004-05-26  Ole Reinhardt  <ole.reinhardt@kernelconcepts.de>
	* dev/cs8900.c
	Now compatible with newer AVRGCC versions. Reading of FrameLength
	and ReceiveStatus needs to be done high byte first.
	Added software wakeup and reset to init code (only available
	for new code)

2004-06-07  Harald Kipp  <harald.kipp@egnite.de>

	* conf: Still incomplete configuration scripts added.

	* tools/nutconf: Working configuration tool replaced by very
	incomplete re-design. It will read the Lua scripts from the
	conf directory and display an editable tree of configuration
    items.

2004-05-24  Ole Reinhardt  <ole.reinhardt@kernelconcepts.de>

	* include/dev/hd44780_bus, dev/hd44780_bus
	New driver for memory mappen LCD displays. Take a look into
	hd44780_bus.c for detailed information about hardware design

	* include/dev/term.h, dev/term.h
	Small change to pass base address to LCD driver.

	* include/dev/hd44780.h, dev/hd44780.c
	Small changes to be compatible with newly added hd44780_bus.c driver
	and changed terminal driver

	* os/arch/avr_nutinit.c
	Added option to add 3 waitstates to memory region 0x8000-0xFFFF. You
	can enable this option by defining NUT_3WAITSTATES
	This is needed for some memory mapped io devices. Espacialy for the
	cs8900 driver and hd44780_bus device.

	* dev/cs8900.h, dev/cs8900.c

	CHANGED BEHAVIOR:
	By default this driver will now retreive it's MAC Address from
	EEPROM config. Also it will retreive it's base address by default
	from NutRegisterDevice. Also a hardware depended reset method is
	disabled by default.

	To get back the old functionality define NUT_CS8900_OLD

2004-05-24  Oliver Schulz  <olischulz@web.de>

	* include/dev/usart.h, dev/usart.c, dev/usart0avr.c, dev/usart1avr.c:
	Implemented function dev_size, which retrieves the number of bytes in
	input buffer.

	* include/dev/uart.h, dev/uartavr.c, dev/uart0.c, dev/uart1.c: ditto.

	* crt/kbhit.c, crt/Makefile: Added function kbhit(). Returns nonzero if
	stdin has at least one char in input buffer. Uses _filelength to get the
	file size.


2004-05-23  Oliver Schulz  <olischulz@web.de>

	* include/arch/avr.h: Added some macros, because they are no longer
	available since version 1.1.0 of avr-libc.


2004-05-21  Matthias Ringwald <mringwal@inf.ethz.ch>

        * configure: defined MCU for *nix emulation as 'unix', so libs can go
        into lib/gcc/unix. MCU names like 'i386' and 'ppc' would be better.

2004-05-20  Oliver Schulz  <olischulz@web.de>

	* dev/usart.c: Memory was allocated twice for NUTFILE in UsartOpen.


2004-05-17  Harald Kipp  <harald.kipp@egnite.de>

        * include/dev/nicrtl.h, dev/nicrtl.c: Added major changes,
        which had been contributed by Bengt Florin. This driver
        uses polling for transmission, which may look like a
        disadvantage. In fact it became rock solid, hardly no
        packet loss even under very heavy traffic.


2004-05-16  Matthias Ringwald <mringwal@inf.ethz.ch>

	* os/mutex.c, include/sys/mutex.h: added recursive mutex implementation

	* os/semaphore.c, include/sys/semaphore.h: added semaphore implementation

	* os/Makefile: added above files


2004-05-16  Oliver Schulz  <olischulz@web.de>

	* dev/usartavr.c: Applied bugfixes for half duplex mode and XON/XOFF
	handling. Thanks to Damian Slee.


2004-05-17  Harald Kipp  <harald.kipp@egnite.de>

	* include/dev/nicrtl.h, dev/nicrtl.c: Added major changes,
	which had been contributed by Bengt Florin. This driver
	uses polling for transmission, which may look like a
	disadvantage. In fact it became rock solid, hardly no
	packet loss even under very heavy traffic.


2004-04-25  Oliver Schulz  <olischulz@web.de>

	* include/dev/irqstack.h, dev/irqstack.h, os/arch/avr_thread.c:
	Modified to be compatible with nested interrupts. Every time a interrupt
	occurs, a counter is incremented. If the counter is zero, the stack
	switch is performed. After the isr returns, the counter is decremented.
	An additional variable _irqstackdec defined in os/arch/avr_thread.c. The
	stack size of each new thread will be decremented by this value.


2004-04-15  Oliver Schulz  <olischulz@web.de>

	* pro/dhcpc.c: Added support for hostname also in DHCPDiscover.

	* pro/resolv.c: If the DNS server answers with more than one record, and
	the first has no ip address (CNAME), the function failed.

	* pro/resolv.c, include/netdb.h: New function NutDnsGetMxByDomain to
	request an MX record from DNS server.


2004-04-15  Harald Kipp  <harald.kipp@egnite.de>

	* eboot: Ethernet boot loader for RTL8019AS added.

	* crt/feof.c, crt/ferror.c, crt/fread.c, crt/nut_io.h:
	Stream functions feof() and ferror() do now return meaningful
	results.

	* net/tcpout.c: Retransmission timer not always set in the
	state machine. Initializing it when the first entry is added
	to the transmit buffer is a much better idea. However, now
	we have a unique retransmission in every situation. Again,
	it is most important to implement round trip time calculation.

	* net/tcpsm.c: The state machine did not increment the sequence
	number on FIN segments. Thus, FIN segments were never
	retransmitted and connections weren't properly closed.

	* net/tcpsm.c: The packet drop problem of the Realtek driver
	could be observed quite often in HTTP applications, where
	the browser concurrently opened several connections. Adding
	a slight delay during SYN and FIN receptions remarkably
	reduced the problem. This delay is activated only, if
	RTLCONNECTHACK has been defined. Note, that this is a
	temporary hack, but it really helps some applications.


2004-04-07  Harald Kipp  <harald.kipp@egnite.de>

	* Added Matthias Ringwald's patches, which enable Nut/OS
	emulation running on Linux and Mac OS X.

	* dev/usartavr.c: Half duplex operation failed if direction
	is not controlled by RTS. Thanks to Dusan Ferbas for reporting
	this problem and providing a solution. Dusan also found out,
	that half duplex is not enabled by _ioctl(UART_SETFLOWCONTROL)
	alone. As a temporary fix, call _ioctl(UART_SETSPEED) after
	setting flow control.


2004-03-19  Jan Dubiec  <jdx@slackware.pl>

	* os/event.c, os/heap.c, os/osdebug.c, os/thread.c, os/timer.c,
	net/netdebug.c: Format strings declarations has been changed
	to static prog_char in order to save data memory and print debug
	messages properly on AVR.

	* configure: Added "-mint32" switch to H8 gcc options so "int"
	is now 32 bit on H8/300H and H8S.

	* include/dev/mweeprom.h, dev/mweeprom.c: u_char and u_short
	changed to unsigned char and unsigned short accordingly in order
	to avoid compilation problems on H8 microcontrollers: mweeprom.h
	is included by compiler.h and compiler.h in included by sys/types.h
	so u_char and u_short were used before they were defined. The
	occurence of this problem depended on place in sys/types.h in which
	compiler.h was included.

	* arch/h8300h/include/h83068f.h: Added comment about the origin of
	this file.


2004-03-18  Harald Kipp  <harald.kipp@egnite.de>

	* include/arch/avr.h: Removed Harvard architecture definition.
	It's required in UserConf.mk.

	* dev/uartavr.c: Removed deprecated raw I/O.

	* os/devclose.c, os/devioctl.c, os/devopen.c, os/devread.c,
	os/devtran.c, os/devwrite.c, os/ifstran.c, os/ifstream.c,
	os/init.c, os/print.cnet/sostream.c: Deprecated functions
	from version 2 finally removed.

	* sys/atomic.h: Unused file removed to simplify portability.

	* sys/devtran.h, sys/ifstran.h, print.h, netinet/sostream.h:
	Deprecated prototypes removed.

	* sys/device.h, sys/ifstream.h: Second header file removed.
	The IFSTREAM structure is still used by some device drivers
	and has been moved to sys/device.h.

	* pro/resolv.c: Deprecated header file replaced.

	* pro/dhcpc.c, include/pro/dhcp.h: Deprecated NutNetAutoConfig
	removed.

	* fs/uromfs.c, include/fs/uromfs.h: Deprecated NutRom functions
	removed.

	* net/arpcache.c, net/icmpin.c, net/ifconfig.c, if_var.h:
	Comments updated.

	* doc/copying-gpl.txt, doc/copying-liquorice.txt:
	Added as required by Liquorice's licence.

	* net/pppin.c: Avoid calculation with void pointers.

	* include/sys/types.h: compiler.h must be included
	early to allow definitions of platform dependant
	macros.

	* include/compiler.h, include/sys/nutconfig.h: Added ATMEGA
	macro for ICCAVR support.

	* include/stdio.h: stddef header inclusion removed.

	* include/dev/irqreg.h: Bugfix. ICCAVR can't find header files.

	* include/arch/avr.h: Added __AVR_ATmega103__ in ICCAVR block.

	* dev/term.c, include/dev/term.h: Added Michael Fischer's
	TIOCGWINSZ ioctl.

	* dev/irsony.c: Infrared interrupts now working. Thanks to
	Michael Fischer, who reported this problem.

	* Added Michael Fischer's WLAN driver almost unchanged. I had
	to make some changes though, because the code mixes int
	variables with long constants. GCC is very picky in these
	things. This compiler also throws warnings, if static functions
	or local variables are unused. Remember, we compile with -Werror.
	I have marked my changes with '/* Harald:'. Additionally I
	blindly put all in dev/ and updated the includes. FInally it
	compiles, but not sure, what it does. The code needs some
	extra care, but due to demand I put it in CVS in its current
	state. If it breaks something, please remove it from the
	Makefile.


2004-03-17  Harald Kipp  <harald.kipp@egnite.de>

	* include/dev/chat.h, include/sys/atom.h: Bugfix, ICCAVR
	does not define __AVR__.

	* irqreg.c, avr_irqreg.c: Deprecated AVR interrupt registration
	removed.

	* include/arch/avr.h: Define Harvard architecture for AVR by
	default.


2004-03-16  Harald Kipp  <harald.kipp@egnite.de>

	* Jan Dubiec's H8/300 port added. This breaks at least the
	make process on Windows machines. Jan's work is substantial,
	so I added his diff regardless of any existing code. Actually
	his code is very clean and porting it back again for the
	Windows environment should be easy.


2004-03-14  Harald Kipp  <harald.kipp@egnite.de>

	* dev/ppp.c, include/dev/ppp.h: Compile problems fixed, thanks
	to Jan Dubiec.


2004-03-09  Harald Kipp  <harald.kipp@egnite.de>

	* include/dev/ahdlcavr.h: This one was missing.


2004-03-08  Harald Kipp  <harald.kipp@egnite.de>

	* dev/ahdlc*.c: Asynchronous HDLC driver added.

	* dev/chat.c, include/dev/chat.h: Debug output added.

	* dev/lanc111.c: Quick hack for fixed mode added. Should be replaced
	by ioctl() function.

	* dev/ppp.c, include/netinet/ppp_fsm.h, net/pppout.c, net/pppsm.c:
	HDLC functions moved to async HDLC driver.

	* include/cfg/modem.h: Hardware handshake disabled by default.

	* include/sys/msg.h: Not all compilers like arrays of size zero.
	Hopefully there are no side effects, but at least ICCAVR compiles it.

	* net/icmpout.c: Not all compilers like pointer calculation with
	void pointers.

	* net/ifconfig.c: Ugly PPP activation hack replaced by HDLC ioctl.

	* net/ipcpin.c: PppUp() replaced by direct post.

	* net/lcpin.c, net/pppdebug.c, net/pppin.c: PPP header compression
	on incoming packets accepted. Thanks to Francois Rademeyer.

	* net/lcpout.c: Bugfix, establishing PPP sessions failed. Thanks to
	Zoltan Korbai.


2004-03-05  Oliver Schulz  <olischulz@web.de>

	* os/tmr_avr.c: Bugfix in NutTimerInit. ICCAVR failed to compile, if
	NUT_CPU_FREQ is defined.


2004-03-03  Oliver Schulz  <olischulz@web.de>

	* crt/fpurge.c, crt/Makefile: Added function 'fpurge'. This is only a
	wrapper for calling the device read function with buffer pointer set to
	zero to purge a stream, i.e. discard any input buffer.

	* include/sys/confos.h, os/confos.h, app/basemon/basemon.c, pro/dhcpc.c,
	os/init.c, os/nutinit.c: Structure confos was extended to store the
	system's hostname in EEPROM. This hostname is reported to DHCP server
	while requesting a DHCP lease.

	* os/confos.c, os/init.c: Bugfix in NutSaveConfig. Write only to eeprom
	if actual byte in eeprom differs from byte to write.


2004-03-02  Oliver Schulz  <olischulz@web.de>

	* pro/httpd.c: Bugfix in NutHttpSendError. Appended \r\n to auth_fmt_P
	to write the next header line to a new line.


2004-02-28  Oliver Schulz  <olischulz@web.de>

	* net/tcpsm.c: Bugfix in several tcp state functions. Swapped around the
	check for ACK and SYN flag. Because initial SYN packets don't have an
	ACK flag, recevied SYN packets were never rejected.

	* pro/resolv.c: Memory leak fixed in CreateDnsQuestion.

	* crt/getf.c: Several bugfixes applied.
 	- "%%" didnt work.
 	- integer parsing corrected.
 	- support for "%u".


2004-02-01  Harald Kipp  <harald.kipp@egnite.de>

	* dev/debug*.c: Added ioctl baudrate support.

	* dev/lanc111.c, net/ifconfig.c: Avoid chip initialization with MAC
	address zero. This is a quick hack for all this init mess.

	* include/pro/dhcp.h: Added NutDhcpRelease prototype.

	* pro/dhcpc.c: New API added to relinguish the DHCP lease.
	Collecting more than one offer is now disabled, if the application
	sets timeout below three times of MAX_DHCP_WAIT (5 seconds).
	The lease renewal will now start when 3/4 has elapsed, opposed
	to 1/2 used previously. Finally the DHCP thread will sleep as
	long as possible, while the previous version woke up every
	ten seconds.


2004-02-01  Harald Kipp  <harald.kipp@egnite.de>

	* appload/appload.c, appload/ip.c: Bugfix. SMSC bootloader failed if
	DHCP offer is not broadcasted. Now IP input routine accepts any target
	IP while our local IP is unconfigured.


2004-02-18  Oliver Schulz  <olischulz@web.de>

	* os/ctx_*.c: Bugfix in NutThreadCreate. If NutHeapAlloc fails, the
	function returned without calling NutExitCritical to reenable
	interrupts.


2004-02-08  Oliver Schulz  <olischulz@web.de>

	* net/arpcache.c: Arp entries with set ATF_PERM are not removed from the
	cache list any more.


2004-02-06  Oliver Schulz  <olischulz@web.de>

	* net/icmpin.c, net/icmpout.c: After my last changes, ping didn't work
	any more. Thanks to Pavel Celeda, who discovered this bug.


2004-02-04  Oliver Schulz  <olischulz@web.de>

	* os/msg.c, include/sys/msg.h, os/Makefile: First version of message
	queueing  implemented. Thanks to Ralph Mason, who provided this code.
	Still contains some debug functions.


2004-02-02  Oliver Schulz  <olischulz@web.de>

	* include/net/if_var.h, net/ifconfig.c, pro/dhcp.c: Gateway ip
	address was not set, if static network configuration from
	EEPROM is used.

	* net/icmpin.c, net/icmpout.c, net/ipin.c, net/tcpsm.c,
	include/sys/socket.h, include/netinet/icmp.h: Added some more ICMP
	support. Now the network stack handles incoming ICMP unreachable
	messages, and aborts appropiate TCP sockets.


2004-02-01  Harald Kipp  <harald.kipp@egnite.de>

	* include/compiler.h, os/timer.c, os/thread.c: Additional support
	started for ARM7TDMI, H8/300 and Coldfire.

	* os/ctx_CPU.c: Split os/thread.c by CPU families.

	* os/tmr_CPU.c: Split os/timer.c by CPU families.

	* include/cpu/CPU.h: Split include/compiler.h by CPU families.


2004-01-30  Harald Kipp  <harald.kipp@egnite.de>

	* Version 3.4 release candidate.

	* appload/tftpd.c: Ethernut 2 bootloader failed to load
	files larger than 64kB.

	* net/ipcpin.c: Fixed a memory hole in case of incoming IPCP
	with bad identifiers.

	* net/lcpout.c: Added a parameter to LcpTxConfReq to handle
	rejected magic number requests. This is a dirty hack, but
	should help for now. All calls in lcpin.c and pppsm.c plus
	the prototype in include/netinet/if_ppp.h had been adapted as
	well. Thanks to Alex Joni and Zoltan Korbai, who discovered
	this problem.


2004-01-30  Oliver Schulz  <olischulz@web.de>

	* include/dev/irqreg.h, include/dev/irqstack.h, dev/irqstack.c,
	dev/ivect??.c, dev/Makefile: Separate interrupt stack for avr-gcc only
	implemented. Size of this stack is 256 bytes. May be changed later. The
	interrupt stack reduces the stack space needed for every thread, because
	if an interrupt occurs, the stack pointer is immediately changed to the
	interrupt stack and the thread stack is no longer used while executing
	interrupt code.


2004-01-25  Oliver Schulz  <olischulz@web.de>

	* net/tcpsm.c: Bugfix for establishing tcp connections by
	calling NutTcpConnect. If no answer is received, retransmission
	is stoped after about 6 secs. If RST if received, the
	connection request is now properly aborted and the error is
	returned to the caller.


2004-01-14  Oliver Schulz  <olischulz@web.de>

	* pro/dhcpc.c, include/pro/dhcp.h: Applied changes by Damian
	Slee. Now it should be possible to obtain gateway and dns
	server ip address from Win2k DHCP servers.

	* net/lcpin.c: Same bug fix like in IpcpRxConfReq applied
	also to LcpRxConfReq.

	* dev/lanc111.c: Speed improvements for transfering bytes
	from and to nic applied.

	* net/tcpsock.c: New TCP output buffering implemented. If not
	configured, it works nearly like the old buffering. To
	configure, use NutTcpSetSockOpt with new option SO_SNDBUF.

	* net/tcpsm.c: Now the retransmission timer is also
	started on call of NutTcpConnect.


2004-01-04  Oliver Schulz  <olischulz@web.de>

	* app/basemon/basemon.c: After adding thread termination
	support to Nut/OS, the priority of basemon's own idle
	thread was also changed from 255 to 254 to avoid idle thread
	termination.


2003-12-19  Oliver Schulz  <olischulz@web.de>

	* include/time.h, crt/time.c, crt/mktime.c, crt/gmtime.c
	crt/localtim.c: Dox written.


2003-12-18  Harald Kipp  <harald.kipp@egnite.de>

	* include/dev: Added missing usart driver include files.


2003-12-15  Harald Kipp  <harald.kipp@egnite.de>

	* os/version.c: Switched to 3.3.3, still preview.

	* os/thread.c: Long awaited support for terminating
	threads had been implemented. The context switch frame
	has been reduced to those registers, which really need
	to be saved. These most valuable changes had been
	contributed by Ralph Mason.

	* os/nutinit.c: Destroys terminated threads. Priority
	255 is used to terminate threads, thus the idle thread's
	priority changed from 255 to 254. This may break your
	existing application. Thanks again to Ralph Mason.

	* appicc: Imagecraft projects updated to version 6.29.

	* dev/usart.c: Hardware independant U(S)ART device driver
	added.

	* dev/usartavr.c: ATmega128/103 USART hardware support
	for new usart.c. Includes HW/SW handshake, 9-bit and
	synchronous communication.

	* include/fcntl.h: Dox updated.

	* include/bankmem.h: Banking enabled with Ethernut 2.


2003-12-12  Oliver Schulz  <olischulz@web.de>

	* crt/putf.c: Rewritten support for strings stored in prgram
	space. Using still type character 'P', but also some heap
	to store the string in RAM before the output function is
	called.


2003-12-06  Oliver Schulz  <olischulz@web.de>

	* os/nutinit.c, os/init.c: Using __heap_start instead of
	__bss_end to support .noinit section under gcc.

	* os/nutinit.c: changed external RAM detection. Now it's
	possible to used more than 4KB static data under gcc.


2003-11-28  Harald Kipp  <harald.kipp@egnite.de>

	* net/tcpsm.c: TCP connections suddenly drop during
	transmission. Bug in retransmission timer fixed.


2003-11-27  Oliver Schulz  <olischulz@web.de>

	* pro/dencode.c: Bug fix and code size improvement


2003-11-26  Oliver Schulz  <olischulz@web.de>

	* nutlibcrt.a: Added some standard C time functions to
	implement time handling and real time clocks.

	* pro/sntp.c: Added SNTP protocol to retreive universal
	coordinated time (UCT) from SNTP servers.

	* net/udpin.c, net/udpsock.h: Added a configurable receive
	packet queue for UDP packets.

	* crt/putf.c: Added support for program space character
	strings (%P).


2003-11-05  Harald Kipp  <harald.kipp@egnite.de>

	* Version 3.3.2

	* app/pppc.c: Added a note, that this will not work with
	ATmega103 chips as long as debugging is enabled, which
	requires a second UART.

	* dev/lanc111.c: Leftover from debugging set last byte
	of MAC address to 1.


2003-11-04  Harald Kipp  <harald.kipp@egnite.de>

	* All applications will work on Ethernut 1 and 2.

	* net/tcpsm.c: Race condition in TCP state machine left
	socket in CLOSE-WAIT state. Fixed.

	* app/basemon: Ignore PD5 in port test. Used with RS485.

	* dev/lanc111.c: Still link problems. Finally it should
	work now after correcting delays during PHY configuration.


2003-11-03  Harald Kipp  <harald.kipp@egnite.de>

	* app/isp2: New application to update the ISP adapter
	included in the Ethernut Starter Kit.

	* app/basemon: Rewritten to support RTL8019AS and
	LAN91C111 Ethernet Controllers and banked memory.

	* appload: New bootloader for LAN91C111 added.

	* include/lanc111.h: Allow applications to link
	both Ethernet Controller Drivers.

	* dev/lanc111.c: Several optimizations and bugfixes.
	The driver will reliably link now on 10 MBit networks.
	Sudden buffer allocation failures had been fixed by
	resetting the MMU in this situation.

	* pro/dhcpc.c: Renewal disabled, if lease time is set
	to zero

	* os/timer.c: New API function returns system uptime in
	miliseconds. This function is now used by the TCP state
	machine to calculate retransmission timeouts. Another
	step towards round trip time calculation, which is
	still missing in Nut/Net.

	* include/compiler.h: New register types added for
	better portability to different MCU platforms.

	* dev/twif.c: Documentation of API calls enhanced.


2003-10-14  Harald Kipp  <harald.kipp@egnite.de>

	* tools/nutconf: New GUI configuration tool named nutconf.
	Based on the excellent wxWindows class library.

	* crt/icc: Imagecraft runtime initialization added to
	the CVS repository.


2003-10-13  Harald Kipp  <harald.kipp@egnite.de>

	* dev/lanc111.c: New driver for SMSC LAN91C111 provides
	100 Mbps Ethernet interface.

	* os/timer.c: Added a seconds counter.

	* pro/dhcpc.c: Replaced tick counter with seconds
	counter. This should fix the DHCP timer bug.

	* Added hardware definition to Makedef files.


2003-09-03  Harald Kipp  <harald.kipp@egnite.de>

	* Tested with WinAVR-20030913

	* app/httpd/httpserv.c: Using strtok and portable
	version of strtok_r.

	* crt/srttok_r.c: Incompatible strtok_r marked
	deprecated and removed from GCC compile.

	* os/nutinit.c: XRAMEND replaced by NUTRAMEND to avoid
	GCC conflicts.

	* app/nutpiper/player.c: Include file sequence changed.

	* app/nutpiper/scanner.c: dito.

	* dev/chat.c: Report function contributed by Jelle
	Martijn Kok.


2003-08-14  Harald Kipp  <harald.kipp@egnite.de>

	* Version 3.3.1

	* app/pppc.c: PPP sample added.

	* crt/putf.c: Formatted output of unsigned int fixed
	by Ralph Mason.

	* dev/ppp.c: Bugfix, HDLC may only use a single flag
	between two consecutive frames.

	* Avoid changing the PPP request identifier while
	resending unanswered frames.

	* net/lcpout.c: Negotiate local PPP magic.

	* net/lcpin.c: LCP echo reply support added.

	* net/lcpout.c: Bugfix, send protocol reject in correct
	byte order.

	* net/pppdebug.c: Added support for LCP echo and
	discard frames.

	* net/pppsm.c: Retry for authentication request added.

	* net/tcpsm.c: Bugfix by Ralph Mason, NutTcpAccept
	fails if caller got higher priority.

	* net/tcpsm.c: Bugfix by Ralph Mason, incoming TCP
	NETBUFs will never be released if TCP is not used by
	application.

	* net/tcpsock.c: Another fix by Ralph, TCP may reuse
	socket ports because of wrong byte order during
	compare.


2003-08-07  Harald Kipp  <harald.kipp@egnite.de>

	* app/httpd/httpserv.c: Bugfix, remote not displayed
	in the socket list.

	* pro/dhcpc.c: Complete redesign to follow RFC 2131.


2003-08-05  Harald Kipp  <harald.kipp@egnite.de>

	* app: Examples updated and checked in.

	* Removed DNS entries from network interface
	structure. This may break your driver/app.

	* dev/nicrtl.c: Bugfix, failed to boot with empty
	EEPROM.

	* include/compiler.h: Added strcmp_P(), outb() and
	_BV() for ICCAVR.


2003-07-24  Harald Kipp  <harald.kipp@egnite.de>

	* net/ipcpin.c: Bugfix, PPP always used the secondary
	DNS.

	* net/ipcpout.c: When the PPP server rejects the
	secondary DNS, IPCP negotiation was trapped in a
	loop.


2003-07-23  Harald Kipp  <harald.kipp@egnite.de>

	* Michael Fisher contributed the first ATAPI version
	of his IDE driver and FAT filesystem. Note, that the
	IDE port moved from 0x8000 to 0xE000.


2003-07-21  Harald Kipp  <harald.kipp@egnite.de>

	* Version 3.3 prepared for release.

	* os/bankmem.c: Support for banked memory added.

	* os/ir.c: Support for infrared remote control added.

	* dev/irsony.c: First infrared remote control driver
	for Sony TV codes.

	* dev/vs1001k.c: Internal buffer handling replaced by
	banked memory support routines.

	* app/nutpiper: New application. Shoutcast radio with
	remote control, LCD displayand banked memory support.
	Experimental.


2003-07-20  Harald Kipp  <harald.kipp@egnite.de>

	* pro/httpd.c: Reduced RAM usage by moving string
	literals to program space.

	* net/ipout.c: Memory hole bugfix.

	* net/udpsock.c: System crash on UDP send failure
	has been fixed.

	* app/httpd: Redesigned HTTP server sample added.

	* dev: New Ethernet driver for CS8900A.

	* crt/vsscanf.c: Bugfix for sscanf functions.

	* crt/sprintf_p.c: Bugfix.

	* crt/filelength.c: Wrong description replaced.

	* pro/dhcpc.c: Added code to support secondary DNS.

	* pro/resolve.c: Dito.

	* No explanation had been given how to disable the
	timeout of several functions using NutEventWait().
	A defined value of NUT_WAIT_INFINITE has been added
	to event.h.

	* Missing directories added to repository.

	* urom filesystem filenames moved to program space
	to save RAM.

	* Conflicting Ethernet driver routine names solved.


2003-07-17  Harald Kipp  <harald.kipp@egnite.de>

	* dev/hd44780.c: Works with applications which may
	change the data direction registers.

	* dev/nicrtl.c: Speed enhancements and being less
	strictly for accepting valid frames.

	* dev/twif.c: Missing speed settings added.

	* pro/dhcpc.c: No more default (egnite) MAC address.

	* pro/httpd.c: Memory hole fixed.


2003-07-13  Harald Kipp  <harald.kipp@egnite.de>

	* ChangeLog: Added.

	* net/confnet.c: Unconfigured MAC address changed to
	broadcast address.

	* net/tcpsm.c: Changing the socket data buffer into
	a NETBUF queue results in faster TCP transfers.

	* net/tcpsock.c: dito.

	* include/sys/sock_var.h: dito.
